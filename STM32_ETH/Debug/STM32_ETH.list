
STM32_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c08  0800f02c  0800f02c  0001f02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c34  08011c34  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08011c34  08011c34  00021c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c3c  08011c3c  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c3c  08011c3c  00021c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c40  08011c40  00021c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08011c44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          0000a664  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a6ec  2000a6ec  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001808d  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d04  00000000  00000000  00048188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001200  00000000  00000000  0004ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e45  00000000  00000000  0004e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f4d0  00000000  00000000  0004eed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021801  00000000  00000000  0007e3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8793  00000000  00000000  0009fba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f88  00000000  00000000  0018833c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  0018d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f014 	.word	0x0800f014

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f014 	.word	0x0800f014

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fcca 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f816 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f884 	bl	80006a4 <MX_GPIO_Init>
  MX_LWIP_Init();
 800059c:	f002 fe8e 	bl	80032bc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */


//
  udpServer_init();
 80005a0:	f000 fa32 	bl	8000a08 <udpServer_init>
  IP_ADDR4(&CTS_IPADDR, 192, 168, 0, 15);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <main+0x2c>)
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <main+0x30>)
 80005a8:	601a      	str	r2, [r3, #0]
  CTS_PORT = 8080;
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <main+0x34>)
 80005ac:	f641 7290 	movw	r2, #8080	; 0x1f90
 80005b0:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MX_LWIP_Process();
 80005b2:	f002 ffc3 	bl	800353c <MX_LWIP_Process>
 80005b6:	e7fc      	b.n	80005b2 <main+0x26>
 80005b8:	200000e4 	.word	0x200000e4
 80005bc:	0f00a8c0 	.word	0x0f00a8c0
 80005c0:	200000e8 	.word	0x200000e8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00d fe71 	bl	800e2ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemClock_Config+0xd8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemClock_Config+0xd8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xd8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xdc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <SystemClock_Config+0xdc>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xdc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000638:	23b4      	movs	r3, #180	; 0xb4
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fa07 	bl	8002a5c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f89a 	bl	800078c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000658:	f002 f9b0 	bl	80029bc <HAL_PWREx_EnableOverDrive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000662:	f000 f893 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2105      	movs	r1, #5
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fc61 	bl	8002f4c <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000690:	f000 f87c 	bl	800078c <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	4b31      	ldr	r3, [pc, #196]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a30      	ldr	r2, [pc, #192]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a29      	ldr	r2, [pc, #164]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_GPIO_Init+0xe0>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_GPIO_Init+0xe0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_GPIO_Init+0xe0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : ETH_INT_Pin */
  GPIO_InitStruct.Pin = ETH_INT_Pin;
 8000762:	2304      	movs	r3, #4
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xe4>)
 8000776:	f001 ff75 	bl	8002664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	3730      	adds	r7, #48	; 0x30
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40021800 	.word	0x40021800

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 fbca 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <ETH_IRQHandler+0x10>)
 8000842:	f001 f827 	bl	8001894 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20004c0c 	.word	0x20004c0c

08000850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return 1;
 8000854:	2301      	movs	r3, #1
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <_kill>:

int _kill(int pid, int sig)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <_kill+0x20>)
 800086c:	2216      	movs	r2, #22
 800086e:	601a      	str	r2, [r3, #0]
  return -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	2000a6dc 	.word	0x2000a6dc

08000884 <_exit>:

void _exit (int status)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffe5 	bl	8000860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000896:	e7fe      	b.n	8000896 <_exit+0x12>

08000898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e00a      	b.n	80008c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008aa:	f3af 8000 	nop.w
 80008ae:	4601      	mov	r1, r0
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60ba      	str	r2, [r7, #8]
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf0      	blt.n	80008aa <_read+0x12>
  }

  return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e009      	b.n	80008f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	60ba      	str	r2, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbf1      	blt.n	80008e4 <_write+0x12>
  }
  return len;
 8000900:	687b      	ldr	r3, [r7, #4]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_close>:

int _close(int file)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000932:	605a      	str	r2, [r3, #4]
  return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <_isatty>:

int _isatty(int file)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b480      	push	{r7}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d205      	bcs.n	80009b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <_sbrk+0x6c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295
 80009ae:	e009      	b.n	80009c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <_sbrk+0x64>)
 80009c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	371c      	adds	r7, #28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20030000 	.word	0x20030000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200000dc 	.word	0x200000dc
 80009dc:	2000a6f0 	.word	0x2000a6f0
 80009e0:	2000a6dc 	.word	0x2000a6dc

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SystemInit+0x20>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <SystemInit+0x20>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   //struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000a0e:	f00a ffe1 	bl	800b9d4 <udp_new>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <udpServer_init+0x54>)
 8000a16:	6013      	str	r3, [r2, #0]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 10);
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <udpServer_init+0x58>)
 8000a1a:	603b      	str	r3, [r7, #0]

   err = udp_bind(upcb, &myIPADDR, 8080);  // 8080 is the server UDP port
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <udpServer_init+0x54>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4639      	mov	r1, r7
 8000a22:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00a fe7c 	bl	800b724 <udp_bind>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	71fb      	strb	r3, [r7, #7]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d107      	bne.n	8000a48 <udpServer_init+0x40>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <udpServer_init+0x54>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4909      	ldr	r1, [pc, #36]	; (8000a64 <udpServer_init+0x5c>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f00a ff65 	bl	800b910 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000a46:	e004      	b.n	8000a52 <udpServer_init+0x4a>
	   udp_remove(upcb);
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <udpServer_init+0x54>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00a ff7f 	bl	800b950 <udp_remove>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000e0 	.word	0x200000e0
 8000a60:	0a00a8c0 	.word	0x0a00a8c0
 8000a64:	08000a69 	.word	0x08000a69

08000a68 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000a76:	8c3b      	ldrh	r3, [r7, #32]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	6839      	ldr	r1, [r7, #0]
 8000a7c:	68b8      	ldr	r0, [r7, #8]
 8000a7e:	f00a fed9 	bl	800b834 <udp_connect>

	uint16_t copied_ret;

	if (p != NULL) {
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d023      	beq.n	8000ad0 <udp_receive_callback+0x68>
		if (p->tot_len <= MAX_BUF_SIZE) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	891b      	ldrh	r3, [r3, #8]
 8000a8c:	2b14      	cmp	r3, #20
 8000a8e:	d805      	bhi.n	8000a9c <udp_receive_callback+0x34>
			receive_buffer_size = p->tot_len;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	891b      	ldrh	r3, [r3, #8]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <udp_receive_callback+0x70>)
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e002      	b.n	8000aa2 <udp_receive_callback+0x3a>
		} else {
			receive_buffer_size = MAX_BUF_SIZE;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <udp_receive_callback+0x70>)
 8000a9e:	2214      	movs	r2, #20
 8000aa0:	601a      	str	r2, [r3, #0]
		}

		if (receive_buffer != NULL) {
			// Copy the data from pbuf to the receive_buffer
			copied_ret = pbuf_copy_partial(p, receive_buffer, receive_buffer_size, 0);
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <udp_receive_callback+0x70>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	490c      	ldr	r1, [pc, #48]	; (8000adc <udp_receive_callback+0x74>)
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f004 feb1 	bl	8005814 <pbuf_copy_partial>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	82fb      	strh	r3, [r7, #22]
			if (copied_ret > 0) {
 8000ab6:	8afb      	ldrh	r3, [r7, #22]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <udp_receive_callback+0x62>
				// Process the received data
				process_received_data(upcb, receive_buffer, receive_buffer_size);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <udp_receive_callback+0x70>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4906      	ldr	r1, [pc, #24]	; (8000adc <udp_receive_callback+0x74>)
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	f000 f80b 	bl	8000ae0 <process_received_data>
		} else {
			// Handle error: receive_buffer is NULL
		}

		// Free the received pbuf
		pbuf_free(p);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f004 fca8 	bl	8005420 <pbuf_free>
	}

}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000b8 	.word	0x200000b8
 8000adc:	200000a4 	.word	0x200000a4

08000ae0 <process_received_data>:

void process_received_data(struct udp_pcb *upcb,uint8_t* receive_buffer,uint32_t receive_buffer_size){
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]



	if(receive_buffer[0] == 0xAB && receive_buffer[1] == 0xAB){                       //TM_ITP MESSAGE (M10)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2bab      	cmp	r3, #171	; 0xab
 8000af2:	d14a      	bne.n	8000b8a <process_received_data+0xaa>
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3301      	adds	r3, #1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2bab      	cmp	r3, #171	; 0xab
 8000afc:	d145      	bne.n	8000b8a <process_received_data+0xaa>
		if(receive_buffer[3] == 0xCD && receive_buffer[4] == 0xCD){
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3303      	adds	r3, #3
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2bcd      	cmp	r3, #205	; 0xcd
 8000b06:	d153      	bne.n	8000bb0 <process_received_data+0xd0>
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2bcd      	cmp	r3, #205	; 0xcd
 8000b10:	d14e      	bne.n	8000bb0 <process_received_data+0xd0>
			if(receive_buffer[2] == 0x01){
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3302      	adds	r3, #2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10e      	bne.n	8000b3a <process_received_data+0x5a>
				strcpy((char*)response_buffer, "Received 0x01");
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <process_received_data+0xdc>)
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <process_received_data+0xe0>)
 8000b20:	4614      	mov	r4, r2
 8000b22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b24:	6020      	str	r0, [r4, #0]
 8000b26:	6061      	str	r1, [r4, #4]
 8000b28:	60a2      	str	r2, [r4, #8]
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	81a3      	strh	r3, [r4, #12]
				udpserver_send(upcb, response_buffer, 13);
 8000b2e:	220d      	movs	r2, #13
 8000b30:	4922      	ldr	r1, [pc, #136]	; (8000bbc <process_received_data+0xdc>)
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f000 f84c 	bl	8000bd0 <udpserver_send>
		if(receive_buffer[3] == 0xCD && receive_buffer[4] == 0xCD){
 8000b38:	e03a      	b.n	8000bb0 <process_received_data+0xd0>
			}
			else if(receive_buffer[2] == 0x02){
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d10e      	bne.n	8000b62 <process_received_data+0x82>
				strcpy((char*)response_buffer, "Received 0x02");
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <process_received_data+0xdc>)
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <process_received_data+0xe4>)
 8000b48:	4614      	mov	r4, r2
 8000b4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b4c:	6020      	str	r0, [r4, #0]
 8000b4e:	6061      	str	r1, [r4, #4]
 8000b50:	60a2      	str	r2, [r4, #8]
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	81a3      	strh	r3, [r4, #12]
				udpserver_send(upcb, response_buffer, 13);
 8000b56:	220d      	movs	r2, #13
 8000b58:	4918      	ldr	r1, [pc, #96]	; (8000bbc <process_received_data+0xdc>)
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 f838 	bl	8000bd0 <udpserver_send>
		if(receive_buffer[3] == 0xCD && receive_buffer[4] == 0xCD){
 8000b60:	e026      	b.n	8000bb0 <process_received_data+0xd0>
			}
			else if(receive_buffer[2] == 0x03){
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3302      	adds	r3, #2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d121      	bne.n	8000bb0 <process_received_data+0xd0>
				strcpy((char*)response_buffer, "Received 0x03");
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <process_received_data+0xdc>)
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <process_received_data+0xe8>)
 8000b70:	4614      	mov	r4, r2
 8000b72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b74:	6020      	str	r0, [r4, #0]
 8000b76:	6061      	str	r1, [r4, #4]
 8000b78:	60a2      	str	r2, [r4, #8]
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	81a3      	strh	r3, [r4, #12]
				udpserver_send(upcb, response_buffer, 13);
 8000b7e:	220d      	movs	r2, #13
 8000b80:	490e      	ldr	r1, [pc, #56]	; (8000bbc <process_received_data+0xdc>)
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f000 f824 	bl	8000bd0 <udpserver_send>
		if(receive_buffer[3] == 0xCD && receive_buffer[4] == 0xCD){
 8000b88:	e012      	b.n	8000bb0 <process_received_data+0xd0>
			}

		}
	}
		else{
			strcpy((char*)response_buffer, "Header & Footer not matched");
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <process_received_data+0xdc>)
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <process_received_data+0xec>)
 8000b8e:	4615      	mov	r5, r2
 8000b90:	461c      	mov	r4, r3
 8000b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b94:	6028      	str	r0, [r5, #0]
 8000b96:	6069      	str	r1, [r5, #4]
 8000b98:	60aa      	str	r2, [r5, #8]
 8000b9a:	60eb      	str	r3, [r5, #12]
 8000b9c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000b9e:	6128      	str	r0, [r5, #16]
 8000ba0:	6169      	str	r1, [r5, #20]
 8000ba2:	61aa      	str	r2, [r5, #24]
			udpserver_send(upcb, response_buffer, 27);
 8000ba4:	221b      	movs	r2, #27
 8000ba6:	4905      	ldr	r1, [pc, #20]	; (8000bbc <process_received_data+0xdc>)
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f811 	bl	8000bd0 <udpserver_send>
		}

}
 8000bae:	e000      	b.n	8000bb2 <process_received_data+0xd2>
		if(receive_buffer[3] == 0xCD && receive_buffer[4] == 0xCD){
 8000bb0:	bf00      	nop
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000bc 	.word	0x200000bc
 8000bc0:	0800f02c 	.word	0x0800f02c
 8000bc4:	0800f03c 	.word	0x0800f03c
 8000bc8:	0800f04c 	.word	0x0800f04c
 8000bcc:	0800f05c 	.word	0x0800f05c

08000bd0 <udpserver_send>:

void udpserver_send(struct udp_pcb *upcb,uint8_t* response_buffer,uint32_t response_buffer_size){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
	struct pbuf *txBuf;



	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,response_buffer_size, PBUF_RAM);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000be4:	4619      	mov	r1, r3
 8000be6:	2036      	movs	r0, #54	; 0x36
 8000be8:	f004 f936 	bl	8004e58 <pbuf_alloc>
 8000bec:	6178      	str	r0, [r7, #20]

	/* copy the data into the buffer  */
	pbuf_take(txBuf, response_buffer, response_buffer_size);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f004 fe7e 	bl	80058f8 <pbuf_take>


//	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000bfc:	6979      	ldr	r1, [r7, #20]
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f00a fba6 	bl	800b350 <udp_send>

//
//	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000c04:	6978      	ldr	r0, [r7, #20]
 8000c06:	f004 fc0b 	bl	8005420 <pbuf_free>

}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c18:	f7ff fee4 	bl	80009e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f00d fb89 	bl	800e358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fca1 	bl	800058c <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c58:	08011c44 	.word	0x08011c44
  ldr r2, =_sbss
 8000c5c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c60:	2000a6ec 	.word	0x2000a6ec

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>

08000c66 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00b      	beq.n	8000c8e <DP83848_RegisterBusIO+0x28>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <DP83848_RegisterBusIO+0x28>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <DP83848_RegisterBusIO+0x28>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e014      	b.n	8000cbe <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	691a      	ldr	r2, [r3, #16]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d17c      	bne.n	8000de4 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e01c      	b.n	8000d3e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	f107 0208 	add.w	r2, r7, #8
 8000d0c:	2119      	movs	r1, #25
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	4798      	blx	r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da03      	bge.n	8000d20 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000d18:	f06f 0304 	mvn.w	r3, #4
 8000d1c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d1e:	e00b      	b.n	8000d38 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d105      	bne.n	8000d38 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
         break;
 8000d36:	e005      	b.n	8000d44 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2b1f      	cmp	r3, #31
 8000d42:	d9df      	bls.n	8000d04 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b1f      	cmp	r3, #31
 8000d4a:	d902      	bls.n	8000d52 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000d4c:	f06f 0302 	mvn.w	r3, #2
 8000d50:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d145      	bne.n	8000de4 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6810      	ldr	r0, [r2, #0]
 8000d60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d64:	2100      	movs	r1, #0
 8000d66:	4798      	blx	r3
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db37      	blt.n	8000dde <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6810      	ldr	r0, [r2, #0]
 8000d76:	f107 0208 	add.w	r2, r7, #8
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4798      	blx	r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db28      	blt.n	8000dd6 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4798      	blx	r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000d8e:	e01c      	b.n	8000dca <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4798      	blx	r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000da2:	d80e      	bhi.n	8000dc2 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6810      	ldr	r0, [r2, #0]
 8000dac:	f107 0208 	add.w	r2, r7, #8
 8000db0:	2100      	movs	r1, #0
 8000db2:	4798      	blx	r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da07      	bge.n	8000dca <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000dba:	f06f 0304 	mvn.w	r3, #4
 8000dbe:	613b      	str	r3, [r7, #16]
                 break;
 8000dc0:	e010      	b.n	8000de4 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000dc2:	f06f 0301 	mvn.w	r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
               break;
 8000dc8:	e00c      	b.n	8000de4 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1dd      	bne.n	8000d90 <DP83848_Init+0xc6>
 8000dd4:	e006      	b.n	8000de4 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000dd6:	f06f 0304 	mvn.w	r3, #4
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	e002      	b.n	8000de4 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000dde:	f06f 0303 	mvn.w	r3, #3
 8000de2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d112      	bne.n	8000e10 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4798      	blx	r3
 8000df0:	4603      	mov	r3, r0
 8000df2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000df4:	bf00      	nop
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4798      	blx	r3
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e08:	d9f5      	bls.n	8000df6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000e10:	693b      	ldr	r3, [r7, #16]
 }
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6810      	ldr	r0, [r2, #0]
 8000e2e:	f107 020c 	add.w	r2, r7, #12
 8000e32:	2101      	movs	r1, #1
 8000e34:	4798      	blx	r3
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	da02      	bge.n	8000e42 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e3c:	f06f 0304 	mvn.w	r3, #4
 8000e40:	e06e      	b.n	8000f20 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6810      	ldr	r0, [r2, #0]
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4798      	blx	r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da02      	bge.n	8000e5e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e58:	f06f 0304 	mvn.w	r3, #4
 8000e5c:	e060      	b.n	8000f20 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e059      	b.n	8000f20 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6810      	ldr	r0, [r2, #0]
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4798      	blx	r3
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	da02      	bge.n	8000e88 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e82:	f06f 0304 	mvn.w	r3, #4
 8000e86:	e04b      	b.n	8000f20 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d11b      	bne.n	8000eca <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <DP83848_GetLinkState+0x90>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e03a      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e033      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e02c      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e02a      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6810      	ldr	r0, [r2, #0]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4798      	blx	r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	da02      	bge.n	8000ee6 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000ee0:	f06f 0304 	mvn.w	r3, #4
 8000ee4:	e01c      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	e015      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0306 	and.w	r3, r3, #6
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d101      	bne.n	8000f02 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000efe:	2302      	movs	r3, #2
 8000f00:	e00e      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f003 0306 	and.w	r3, r3, #6
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e007      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0306 	and.w	r3, r3, #6
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d101      	bne.n	8000f1e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e000      	b.n	8000f20 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000f1e:	2305      	movs	r3, #5
    }
  }
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f94f 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	200f      	movs	r0, #15
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fc1c 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f967 	bl	800125e <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f92f 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	200000ec 	.word	0x200000ec

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200000ec 	.word	0x200000ec

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff29 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff3e 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff31 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e06c      	b.n	8001364 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001290:	2b00      	cmp	r3, #0
 8001292:	d106      	bne.n	80012a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2223      	movs	r2, #35	; 0x23
 8001298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f002 fb07 	bl	80038b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_ETH_Init+0xf4>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_ETH_Init+0xf4>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_ETH_Init+0xf4>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <HAL_ETH_Init+0xf8>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a2b      	ldr	r2, [pc, #172]	; (8001370 <HAL_ETH_Init+0xf8>)
 80012c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_ETH_Init+0xf8>)
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4927      	ldr	r1, [pc, #156]	; (8001370 <HAL_ETH_Init+0xf8>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_ETH_Init+0xf8>)
 80012da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f4:	f7ff fe7e 	bl	8000ff4 <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012fa:	e011      	b.n	8001320 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012fc:	f7ff fe7a 	bl	8000ff4 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800130a:	d909      	bls.n	8001320 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2204      	movs	r2, #4
 8001310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	22e0      	movs	r2, #224	; 0xe0
 8001318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e021      	b.n	8001364 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1e4      	bne.n	80012fc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fef0 	bl	8002118 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 ff97 	bl	800226c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 ffed 	bl	800231e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	461a      	mov	r2, r3
 800134a:	2100      	movs	r1, #0
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 ff55 	bl	80021fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2210      	movs	r2, #16
 800135e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800

08001374 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001382:	2b10      	cmp	r3, #16
 8001384:	d150      	bne.n	8001428 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2223      	movs	r2, #35	; 0x23
 800138a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f9fd 	bl	8001794 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0208 	orr.w	r2, r2, #8
 80013a8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fe2a 	bl	800100c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0204 	orr.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fe17 	bl	800100c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fd36 	bl	8001e58 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001402:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2223      	movs	r2, #35	; 0x23
 8001420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	e000      	b.n	800142a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
  }
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001440:	2b23      	cmp	r3, #35	; 0x23
 8001442:	d14a      	bne.n	80014da <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2223      	movs	r2, #35	; 0x23
 8001448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800145e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001462:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	f023 0302 	bic.w	r3, r3, #2
 8001476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800147a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0204 	bic.w	r2, r2, #4
 800148a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fdb9 	bl	800100c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fcd8 	bl	8001e58 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0208 	bic.w	r2, r2, #8
 80014b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fda3 	bl	800100c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2210      	movs	r2, #16
 80014d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
  }
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07c      	b.n	8001604 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001510:	2b23      	cmp	r3, #35	; 0x23
 8001512:	d176      	bne.n	8001602 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001514:	2200      	movs	r2, #0
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 ff6d 	bl	80023f8 <ETH_Prepare_Tx_Descriptors>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	f043 0202 	orr.w	r2, r3, #2
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e065      	b.n	8001604 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001538:	f3bf 8f4f 	dsb	sy
}
 800153c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3206      	adds	r2, #6
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	2b03      	cmp	r3, #3
 800155c:	d904      	bls.n	8001568 <HAL_ETH_Transmit+0x84>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	1f1a      	subs	r2, r3, #4
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3106      	adds	r1, #6
 8001574:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800157c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800157e:	f7ff fd39 	bl	8000ff4 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001584:	e037      	b.n	80015f6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d011      	beq.n	80015bc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	f043 0208 	orr.w	r2, r3, #8
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e023      	b.n	8001604 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c2:	d018      	beq.n	80015f6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015c4:	f7ff fd16 	bl	8000ff4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d302      	bcc.n	80015da <HAL_ETH_Transmit+0xf6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e0:	f043 0204 	orr.w	r2, r3, #4
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80015f0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e006      	b.n	8001604 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	dbc3      	blt.n	8001586 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
  }
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0a8      	b.n	800178a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800163e:	2b23      	cmp	r3, #35	; 0x23
 8001640:	d001      	beq.n	8001646 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0a1      	b.n	800178a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	3212      	adds	r2, #18
 8001652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001656:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800165c:	f1c3 0304 	rsb	r3, r3, #4
 8001660:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001662:	e06a      	b.n	800173a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001688:	2b00      	cmp	r3, #0
 800168a:	d103      	bne.n	8001694 <HAL_ETH_ReadData+0x88>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d040      	beq.n	8001716 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00c      	beq.n	80016d8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016c8:	3b04      	subs	r3, #4
 80016ca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016f0:	461a      	mov	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f002 faf5 	bl	8003ce4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	441a      	add	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d902      	bls.n	8001728 <HAL_ETH_ReadData+0x11c>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b04      	subs	r3, #4
 8001726:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	3212      	adds	r2, #18
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800173e:	2b00      	cmp	r3, #0
 8001740:	db06      	blt.n	8001750 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	429a      	cmp	r2, r3
 8001748:	d202      	bcs.n	8001750 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d089      	beq.n	8001664 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	441a      	add	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f815 	bl	8001794 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d108      	bne.n	8001788 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017a0:	2301      	movs	r3, #1
 80017a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	3212      	adds	r2, #18
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017bc:	e03d      	b.n	800183a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d112      	bne.n	80017ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4618      	mov	r0, r3
 80017cc:	f002 fa5a 	bl	8003c84 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	74fb      	strb	r3, [r7, #19]
 80017da:	e007      	b.n	80017ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	461a      	mov	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017ec:	7cfb      	ldrb	r3, [r7, #19]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d023      	beq.n	800183a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	4a24      	ldr	r2, [pc, #144]	; (8001890 <ETH_UpdateDescriptor+0xfc>)
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	e003      	b.n	800180a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001808:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d902      	bls.n	8001828 <ETH_UpdateDescriptor+0x94>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b04      	subs	r3, #4
 8001826:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	3212      	adds	r2, #18
 800182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001832:	617b      	str	r3, [r7, #20]
      desccount--;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	3b01      	subs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <ETH_UpdateDescriptor+0xb2>
 8001840:	7cfb      	ldrb	r3, [r7, #19]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1bb      	bne.n	80017be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	429a      	cmp	r2, r3
 800184e:	d01a      	beq.n	8001886 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	3301      	adds	r3, #1
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800185a:	f3bf 8f5f 	dmb	sy
}
 800185e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6919      	ldr	r1, [r3, #16]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	18ca      	adds	r2, r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001878:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	80004600 	.word	0x80004600

08001894 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	2b40      	cmp	r3, #64	; 0x40
 80018ac:	d112      	bne.n	80018d4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d109      	bne.n	80018d4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_ETH_IRQHandler+0x178>)
 80018cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f8ac 	bl	8001a2c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d113      	bne.n	800190e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10a      	bne.n	800190e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001900:	461a      	mov	r2, r3
 8001902:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001906:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f885 	bl	8001a18 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001920:	d14c      	bne.n	80019bc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001934:	d142      	bne.n	80019bc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193c:	f043 0208 	orr.w	r2, r3, #8
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001958:	d11a      	bne.n	8001990 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_ETH_IRQHandler+0x17c>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001980:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001984:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	22e0      	movs	r2, #224	; 0xe0
 800198a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800198e:	e012      	b.n	80019b6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	f248 6380 	movw	r3, #34432	; 0x8680
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ae:	461a      	mov	r2, r3
 80019b0:	f248 6380 	movw	r3, #34432	; 0x8680
 80019b4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f842 	bl	8001a40 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d10e      	bne.n	80019e8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f83a 	bl	8001a54 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_ETH_IRQHandler+0x180>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_ETH_IRQHandler+0x180>)
 80019f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019fa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f833 	bl	8001a68 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	00010040 	.word	0x00010040
 8001a10:	007e2000 	.word	0x007e2000
 8001a14:	40013c00 	.word	0x40013c00

08001a18 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 031c 	and.w	r3, r3, #28
 8001a98:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	02db      	lsls	r3, r3, #11
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	019b      	lsls	r3, r3, #6
 8001aaa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001acc:	f7ff fa92 	bl	8000ff4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad2:	e00d      	b.n	8001af0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ad4:	f7ff fa8e 	bl	8000ff4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae2:	d301      	bcc.n	8001ae8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e010      	b.n	8001b0a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ec      	bne.n	8001ad4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 031c 	and.w	r3, r3, #28
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b6c:	f7ff fa42 	bl	8000ff4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b72:	e00d      	b.n	8001b90 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b74:	f7ff fa3e 	bl	8000ff4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b82:	d301      	bcc.n	8001b88 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e009      	b.n	8001b9c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ec      	bne.n	8001b74 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0d9      	b.n	8001d6c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf14      	ite	ne
 8001c40:	2301      	movne	r3, #1
 8001c42:	2300      	moveq	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf14      	ite	ne
 8001d5c:	2301      	movne	r3, #1
 8001d5e:	2300      	moveq	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e00b      	b.n	8001da4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d105      	bne.n	8001da2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f883 	bl	8001ea4 <ETH_SetMACConfig>

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 031c 	bic.w	r3, r3, #28
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dc4:	f001 fa6e 	bl	80032a4 <HAL_RCC_GetHCLKFreq>
 8001dc8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d908      	bls.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x38>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d804      	bhi.n	8001de4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e027      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d908      	bls.n	8001dfe <HAL_ETH_SetMDIOClockRange+0x52>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d204      	bcs.n	8001dfe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f043 030c 	orr.w	r3, r3, #12
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e01a      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d303      	bcc.n	8001e0e <HAL_ETH_SetMDIOClockRange+0x62>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d911      	bls.n	8001e32 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d908      	bls.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d804      	bhi.n	8001e28 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e005      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e000      	b.n	8001e34 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e32:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	01312cff 	.word	0x01312cff
 8001e48:	02160ebf 	.word	0x02160ebf
 8001e4c:	03938700 	.word	0x03938700
 8001e50:	05f5e0ff 	.word	0x05f5e0ff
 8001e54:	08f0d17f 	.word	0x08f0d17f

08001e58 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e7a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff f8bf 	bl	800100c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e98:	6193      	str	r3, [r2, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4b51      	ldr	r3, [pc, #324]	; (8002000 <ETH_SetMACConfig+0x15c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	7c1b      	ldrb	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <ETH_SetMACConfig+0x28>
 8001ec6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001eca:	e000      	b.n	8001ece <ETH_SetMACConfig+0x2a>
 8001ecc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7c5b      	ldrb	r3, [r3, #17]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <ETH_SetMACConfig+0x38>
 8001ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eda:	e000      	b.n	8001ede <ETH_SetMACConfig+0x3a>
 8001edc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ede:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ee4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7fdb      	ldrb	r3, [r3, #31]
 8001eea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ef2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	7f92      	ldrb	r2, [r2, #30]
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d102      	bne.n	8001f02 <ETH_SetMACConfig+0x5e>
 8001efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f00:	e000      	b.n	8001f04 <ETH_SetMACConfig+0x60>
 8001f02:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	7f1b      	ldrb	r3, [r3, #28]
 8001f0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	791b      	ldrb	r3, [r3, #4]
 8001f18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	d102      	bne.n	8001f2c <ETH_SetMACConfig+0x88>
 8001f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f2a:	e000      	b.n	8001f2e <ETH_SetMACConfig+0x8a>
 8001f2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	7bdb      	ldrb	r3, [r3, #15]
 8001f34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f46:	4313      	orrs	r3, r2
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f7ff f854 	bl	800100c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d101      	bne.n	8001f92 <ETH_SetMACConfig+0xee>
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	e000      	b.n	8001f94 <ETH_SetMACConfig+0xf0>
 8001f92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d101      	bne.n	8001faa <ETH_SetMACConfig+0x106>
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	e000      	b.n	8001fac <ETH_SetMACConfig+0x108>
 8001faa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001fb4:	2a01      	cmp	r2, #1
 8001fb6:	d101      	bne.n	8001fbc <ETH_SetMACConfig+0x118>
 8001fb8:	2204      	movs	r2, #4
 8001fba:	e000      	b.n	8001fbe <ETH_SetMACConfig+0x11a>
 8001fbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001fc6:	2a01      	cmp	r2, #1
 8001fc8:	d101      	bne.n	8001fce <ETH_SetMACConfig+0x12a>
 8001fca:	2202      	movs	r2, #2
 8001fcc:	e000      	b.n	8001fd0 <ETH_SetMACConfig+0x12c>
 8001fce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f80f 	bl	800100c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	ff20810f 	.word	0xff20810f

08002004 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <ETH_SetDMAConfig+0x110>)
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	7b1b      	ldrb	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <ETH_SetDMAConfig+0x2c>
 800202a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800202e:	e000      	b.n	8002032 <ETH_SetDMAConfig+0x2e>
 8002030:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	7b5b      	ldrb	r3, [r3, #13]
 8002036:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002038:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	7f52      	ldrb	r2, [r2, #29]
 800203e:	2a00      	cmp	r2, #0
 8002040:	d102      	bne.n	8002048 <ETH_SetDMAConfig+0x44>
 8002042:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002046:	e000      	b.n	800204a <ETH_SetDMAConfig+0x46>
 8002048:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800204a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	7b9b      	ldrb	r3, [r3, #14]
 8002050:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002052:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002058:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7f1b      	ldrb	r3, [r3, #28]
 800205e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002060:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7f9b      	ldrb	r3, [r3, #30]
 8002066:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002068:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800206e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002076:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002078:	4313      	orrs	r3, r2
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800209a:	2001      	movs	r0, #1
 800209c:	f7fe ffb6 	bl	800100c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	461a      	mov	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe ff87 	bl	800100c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	f8de3f23 	.word	0xf8de3f23

08002118 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0a6      	sub	sp, #152	; 0x98
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002154:	2300      	movs	r3, #0
 8002156:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800215e:	2300      	movs	r3, #0
 8002160:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800217a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002180:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800218c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fe86 	bl	8001ea4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002198:	2301      	movs	r3, #1
 800219a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff08 	bl	8002004 <ETH_SetDMAConfig>
}
 80021f4:	bf00      	nop
 80021f6:	3798      	adds	r7, #152	; 0x98
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3305      	adds	r3, #5
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	3204      	adds	r2, #4
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <ETH_MACAddressConfig+0x68>)
 800221e:	4413      	add	r3, r2
 8002220:	461a      	mov	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3303      	adds	r3, #3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	061a      	lsls	r2, r3, #24
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3302      	adds	r3, #2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4313      	orrs	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <ETH_MACAddressConfig+0x6c>)
 800224e:	4413      	add	r3, r2
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6013      	str	r3, [r2, #0]
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40028040 	.word	0x40028040
 8002268:	40028044 	.word	0x40028044

0800226c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e03e      	b.n	80022f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68d9      	ldr	r1, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	3206      	adds	r2, #6
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d80c      	bhi.n	80022dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68d9      	ldr	r1, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e004      	b.n	80022e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3301      	adds	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d9bd      	bls.n	800227a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002310:	611a      	str	r2, [r3, #16]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e046      	b.n	80023ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6919      	ldr	r1, [r3, #16]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002368:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002370:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	3212      	adds	r2, #18
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d80c      	bhi.n	80023aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6919      	ldr	r1, [r3, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	e004      	b.n	80023b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d9b5      	bls.n	800232c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ea:	60da      	str	r2, [r3, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b08d      	sub	sp, #52	; 0x34
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3318      	adds	r3, #24
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800243a:	d007      	beq.n	800244c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	3304      	adds	r3, #4
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e103      	b.n	8002658 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3301      	adds	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002468:	f023 031f 	bic.w	r3, r3, #31
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	6852      	ldr	r2, [r2, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	431a      	orrs	r2, r3
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80024d6:	f3bf 8f5f 	dmb	sy
}
 80024da:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024e8:	e084      	b.n	80025f4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e005      	b.n	8002516 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	3301      	adds	r3, #1
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b03      	cmp	r3, #3
 8002520:	d902      	bls.n	8002528 <ETH_Prepare_Tx_Descriptors+0x130>
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	3b04      	subs	r3, #4
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800254a:	d007      	beq.n	800255c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	3304      	adds	r3, #4
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d029      	beq.n	80025b0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002568:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
 800256e:	e019      	b.n	80025a4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002570:	f3bf 8f5f 	dmb	sy
}
 8002574:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	3301      	adds	r3, #1
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	2b03      	cmp	r3, #3
 800258c:	d902      	bls.n	8002594 <ETH_Prepare_Tx_Descriptors+0x19c>
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	3b04      	subs	r3, #4
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	3301      	adds	r3, #1
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3e1      	bcc.n	8002570 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80025ac:	2302      	movs	r3, #2
 80025ae:	e053      	b.n	8002658 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	3301      	adds	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80025ce:	f023 031f 	bic.w	r3, r3, #31
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	6852      	ldr	r2, [r2, #4]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	3301      	adds	r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80025e2:	f3bf 8f5f 	dmb	sy
}
 80025e6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af76 	bne.w	80024ea <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800262e:	6979      	ldr	r1, [r7, #20]
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	3304      	adds	r3, #4
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002640:	b672      	cpsid	i
}
 8002642:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002652:	b662      	cpsie	i
}
 8002654:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3734      	adds	r7, #52	; 0x34
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	e177      	b.n	8002970 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002680:	2201      	movs	r2, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	429a      	cmp	r2, r3
 800269a:	f040 8166 	bne.w	800296a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d005      	beq.n	80026b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d130      	bne.n	8002718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	2203      	movs	r2, #3
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0201 	and.w	r2, r3, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d017      	beq.n	8002754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d123      	bne.n	80027a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	08da      	lsrs	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3208      	adds	r2, #8
 8002768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	69b9      	ldr	r1, [r7, #24]
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0203 	and.w	r2, r3, #3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80c0 	beq.w	800296a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_GPIO_Init+0x324>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4a65      	ldr	r2, [pc, #404]	; (8002988 <HAL_GPIO_Init+0x324>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f8:	6453      	str	r3, [r2, #68]	; 0x44
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_GPIO_Init+0x324>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002806:	4a61      	ldr	r2, [pc, #388]	; (800298c <HAL_GPIO_Init+0x328>)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	220f      	movs	r2, #15
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_GPIO_Init+0x32c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d037      	beq.n	80028a2 <HAL_GPIO_Init+0x23e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_GPIO_Init+0x330>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d031      	beq.n	800289e <HAL_GPIO_Init+0x23a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a56      	ldr	r2, [pc, #344]	; (8002998 <HAL_GPIO_Init+0x334>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <HAL_GPIO_Init+0x236>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a55      	ldr	r2, [pc, #340]	; (800299c <HAL_GPIO_Init+0x338>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d025      	beq.n	8002896 <HAL_GPIO_Init+0x232>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a54      	ldr	r2, [pc, #336]	; (80029a0 <HAL_GPIO_Init+0x33c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <HAL_GPIO_Init+0x22e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a53      	ldr	r2, [pc, #332]	; (80029a4 <HAL_GPIO_Init+0x340>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x22a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_GPIO_Init+0x344>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x226>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x348>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x222>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_GPIO_Init+0x34c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x21e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_GPIO_Init+0x350>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x21a>
 800287a:	2309      	movs	r3, #9
 800287c:	e012      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 800287e:	230a      	movs	r3, #10
 8002880:	e010      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 8002882:	2308      	movs	r3, #8
 8002884:	e00e      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 8002886:	2307      	movs	r3, #7
 8002888:	e00c      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 800288a:	2306      	movs	r3, #6
 800288c:	e00a      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 800288e:	2305      	movs	r3, #5
 8002890:	e008      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 8002892:	2304      	movs	r3, #4
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 8002896:	2303      	movs	r3, #3
 8002898:	e004      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 800289a:	2302      	movs	r3, #2
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x240>
 80028a2:	2300      	movs	r3, #0
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	f002 0203 	and.w	r2, r2, #3
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	4093      	lsls	r3, r2
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b4:	4935      	ldr	r1, [pc, #212]	; (800298c <HAL_GPIO_Init+0x328>)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_GPIO_Init+0x354>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e6:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <HAL_GPIO_Init+0x354>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_GPIO_Init+0x354>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002910:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <HAL_GPIO_Init+0x354>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_GPIO_Init+0x354>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293a:	4a1f      	ldr	r2, [pc, #124]	; (80029b8 <HAL_GPIO_Init+0x354>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_GPIO_Init+0x354>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_GPIO_Init+0x354>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	f67f ae84 	bls.w	8002680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40013800 	.word	0x40013800
 8002990:	40020000 	.word	0x40020000
 8002994:	40020400 	.word	0x40020400
 8002998:	40020800 	.word	0x40020800
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40021400 	.word	0x40021400
 80029a8:	40021800 	.word	0x40021800
 80029ac:	40021c00 	.word	0x40021c00
 80029b0:	40022000 	.word	0x40022000
 80029b4:	40022400 	.word	0x40022400
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x90>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x90>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_PWREx_EnableOverDrive+0x90>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_PWREx_EnableOverDrive+0x94>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e8:	f7fe fb04 	bl	8000ff4 <HAL_GetTick>
 80029ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ee:	e009      	b.n	8002a04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029f0:	f7fe fb00 	bl	8000ff4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029fe:	d901      	bls.n	8002a04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e01f      	b.n	8002a44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d1ee      	bne.n	80029f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a18:	f7fe faec 	bl	8000ff4 <HAL_GetTick>
 8002a1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a1e:	e009      	b.n	8002a34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a20:	f7fe fae8 	bl	8000ff4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a2e:	d901      	bls.n	8002a34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e007      	b.n	8002a44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a40:	d1ee      	bne.n	8002a20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	420e0040 	.word	0x420e0040
 8002a54:	40007000 	.word	0x40007000
 8002a58:	420e0044 	.word	0x420e0044

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e267      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d075      	beq.n	8002b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7a:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d00c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b85      	ldr	r3, [pc, #532]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d112      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4b7e      	ldr	r3, [pc, #504]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d05b      	beq.n	8002b64 <HAL_RCC_OscConfig+0x108>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d157      	bne.n	8002b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e242      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x74>
 8002ac2:	4b76      	ldr	r3, [pc, #472]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a75      	ldr	r2, [pc, #468]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e01d      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6f      	ldr	r2, [pc, #444]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b6d      	ldr	r3, [pc, #436]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6c      	ldr	r2, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0xb0>
 8002af4:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a68      	ldr	r2, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b66      	ldr	r3, [pc, #408]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a65      	ldr	r2, [pc, #404]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fa6e 	bl	8000ff4 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fa6a 	bl	8000ff4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e207      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b5b      	ldr	r3, [pc, #364]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0xc0>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fa5a 	bl	8000ff4 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe fa56 	bl	8000ff4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e1f3      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	4b51      	ldr	r3, [pc, #324]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0xe8>
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b72:	4b4a      	ldr	r3, [pc, #296]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d11c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d116      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_RCC_OscConfig+0x152>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e1c7      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4937      	ldr	r1, [pc, #220]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc2:	e03a      	b.n	8002c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <HAL_RCC_OscConfig+0x244>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fa0f 	bl	8000ff4 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fe fa0b 	bl	8000ff4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1a8      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4925      	ldr	r1, [pc, #148]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
 8002c0c:	e015      	b.n	8002c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_OscConfig+0x244>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe f9ee 	bl	8000ff4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7fe f9ea 	bl	8000ff4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e187      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d036      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_RCC_OscConfig+0x248>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe f9ce 	bl	8000ff4 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe f9ca 	bl	8000ff4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e167      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_OscConfig+0x240>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x200>
 8002c7a:	e01b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_OscConfig+0x248>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fe f9b7 	bl	8000ff4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e00e      	b.n	8002ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe f9b3 	bl	8000ff4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d907      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e150      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	42470000 	.word	0x42470000
 8002ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ea      	bne.n	8002c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8097 	beq.w	8002df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b81      	ldr	r3, [pc, #516]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	4b7d      	ldr	r3, [pc, #500]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a7c      	ldr	r2, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b7a      	ldr	r3, [pc, #488]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b77      	ldr	r3, [pc, #476]	; (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b74      	ldr	r3, [pc, #464]	; (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a73      	ldr	r2, [pc, #460]	; (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe f973 	bl	8000ff4 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7fe f96f 	bl	8000ff4 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e10c      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <HAL_RCC_OscConfig+0x474>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x2ea>
 8002d38:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a63      	ldr	r2, [pc, #396]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	e01c      	b.n	8002d80 <HAL_RCC_OscConfig+0x324>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b05      	cmp	r3, #5
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x30c>
 8002d4e:	4b5f      	ldr	r3, [pc, #380]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5e      	ldr	r2, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0x324>
 8002d68:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
 8002d74:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d78:	4a54      	ldr	r2, [pc, #336]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002d7a:	f023 0304 	bic.w	r3, r3, #4
 8002d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe f934 	bl	8000ff4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fe f930 	bl	8000ff4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0cb      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ee      	beq.n	8002d90 <HAL_RCC_OscConfig+0x334>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db4:	f7fe f91e 	bl	8000ff4 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f91a 	bl	8000ff4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e0b5      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ee      	bne.n	8002dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	4a38      	ldr	r2, [pc, #224]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80a1 	beq.w	8002f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d05c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d141      	bne.n	8002e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_RCC_OscConfig+0x478>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe f8ee 	bl	8000ff4 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f8ea 	bl	8000ff4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e087      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	491b      	ldr	r1, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x478>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe f8c3 	bl	8000ff4 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe f8bf 	bl	8000ff4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e05c      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x416>
 8002e90:	e054      	b.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_RCC_OscConfig+0x478>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe f8ac 	bl	8000ff4 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe f8a8 	bl	8000ff4 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e045      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_OscConfig+0x470>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x444>
 8002ebe:	e03d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e038      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x4ec>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d121      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d11a      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	3b01      	subs	r3, #1
 8002f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0cc      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d90c      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b63      	ldr	r3, [pc, #396]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b8      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa0:	4b59      	ldr	r3, [pc, #356]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb8:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a52      	ldr	r2, [pc, #328]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	494d      	ldr	r1, [pc, #308]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d044      	beq.n	800306c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d119      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e07f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d003      	beq.n	800300a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	2b03      	cmp	r3, #3
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e067      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4b37      	ldr	r3, [pc, #220]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 0203 	bic.w	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4934      	ldr	r1, [pc, #208]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303c:	f7fd ffda 	bl	8000ff4 <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	e00a      	b.n	800305a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7fd ffd6 	bl	8000ff4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e04f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 020c 	and.w	r2, r3, #12
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1eb      	bne.n	8003044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d20c      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e032      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4916      	ldr	r1, [pc, #88]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	490e      	ldr	r1, [pc, #56]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d2:	f000 f821 	bl	8003118 <HAL_RCC_GetSysClockFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	490a      	ldr	r1, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	5ccb      	ldrb	r3, [r1, r3]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd ff3a 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00
 8003108:	40023800 	.word	0x40023800
 800310c:	08011a58 	.word	0x08011a58
 8003110:	20000000 	.word	0x20000000
 8003114:	20000004 	.word	0x20000004

08003118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311c:	b090      	sub	sp, #64	; 0x40
 800311e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003128:	2300      	movs	r3, #0
 800312a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b08      	cmp	r3, #8
 800313a:	d00d      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x40>
 800313c:	2b08      	cmp	r3, #8
 800313e:	f200 80a1 	bhi.w	8003284 <HAL_RCC_GetSysClockFreq+0x16c>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x34>
 8003146:	2b04      	cmp	r3, #4
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x3a>
 800314a:	e09b      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_GetSysClockFreq+0x184>)
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003150:	e09b      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003152:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003156:	e098      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003158:	4b4f      	ldr	r3, [pc, #316]	; (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003162:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d028      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	099b      	lsrs	r3, r3, #6
 8003174:	2200      	movs	r2, #0
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	627a      	str	r2, [r7, #36]	; 0x24
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003180:	2100      	movs	r1, #0
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003184:	fb03 f201 	mul.w	r2, r3, r1
 8003188:	2300      	movs	r3, #0
 800318a:	fb00 f303 	mul.w	r3, r0, r3
 800318e:	4413      	add	r3, r2
 8003190:	4a43      	ldr	r2, [pc, #268]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003192:	fba0 1202 	umull	r1, r2, r0, r2
 8003196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003198:	460a      	mov	r2, r1
 800319a:	62ba      	str	r2, [r7, #40]	; 0x28
 800319c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319e:	4413      	add	r3, r2
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a4:	2200      	movs	r2, #0
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	61fa      	str	r2, [r7, #28]
 80031aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031b2:	f7fd f86d 	bl	8000290 <__aeabi_uldivmod>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4613      	mov	r3, r2
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031be:	e053      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c0:	4b35      	ldr	r3, [pc, #212]	; (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	2200      	movs	r2, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	617a      	str	r2, [r7, #20]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031d2:	f04f 0b00 	mov.w	fp, #0
 80031d6:	4652      	mov	r2, sl
 80031d8:	465b      	mov	r3, fp
 80031da:	f04f 0000 	mov.w	r0, #0
 80031de:	f04f 0100 	mov.w	r1, #0
 80031e2:	0159      	lsls	r1, r3, #5
 80031e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e8:	0150      	lsls	r0, r2, #5
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	ebb2 080a 	subs.w	r8, r2, sl
 80031f2:	eb63 090b 	sbc.w	r9, r3, fp
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003202:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003206:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800320a:	ebb2 0408 	subs.w	r4, r2, r8
 800320e:	eb63 0509 	sbc.w	r5, r3, r9
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	00eb      	lsls	r3, r5, #3
 800321c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003220:	00e2      	lsls	r2, r4, #3
 8003222:	4614      	mov	r4, r2
 8003224:	461d      	mov	r5, r3
 8003226:	eb14 030a 	adds.w	r3, r4, sl
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	eb45 030b 	adc.w	r3, r5, fp
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800323e:	4629      	mov	r1, r5
 8003240:	028b      	lsls	r3, r1, #10
 8003242:	4621      	mov	r1, r4
 8003244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003248:	4621      	mov	r1, r4
 800324a:	028a      	lsls	r2, r1, #10
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003252:	2200      	movs	r2, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	60fa      	str	r2, [r7, #12]
 8003258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800325c:	f7fd f818 	bl	8000290 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4613      	mov	r3, r2
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_GetSysClockFreq+0x180>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	3301      	adds	r3, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003282:	e002      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetSysClockFreq+0x184>)
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800328c:	4618      	mov	r0, r3
 800328e:	3740      	adds	r7, #64	; 0x40
 8003290:	46bd      	mov	sp, r7
 8003292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	00f42400 	.word	0x00f42400
 80032a0:	017d7840 	.word	0x017d7840

080032a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000000 	.word	0x20000000

080032bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80032c2:	4b87      	ldr	r3, [pc, #540]	; (80034e0 <MX_LWIP_Init+0x224>)
 80032c4:	22c0      	movs	r2, #192	; 0xc0
 80032c6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80032c8:	4b85      	ldr	r3, [pc, #532]	; (80034e0 <MX_LWIP_Init+0x224>)
 80032ca:	22a8      	movs	r2, #168	; 0xa8
 80032cc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80032ce:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <MX_LWIP_Init+0x224>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80032d4:	4b82      	ldr	r3, [pc, #520]	; (80034e0 <MX_LWIP_Init+0x224>)
 80032d6:	220a      	movs	r2, #10
 80032d8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80032da:	4b82      	ldr	r3, [pc, #520]	; (80034e4 <MX_LWIP_Init+0x228>)
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80032e0:	4b80      	ldr	r3, [pc, #512]	; (80034e4 <MX_LWIP_Init+0x228>)
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80032e6:	4b7f      	ldr	r3, [pc, #508]	; (80034e4 <MX_LWIP_Init+0x228>)
 80032e8:	22ff      	movs	r2, #255	; 0xff
 80032ea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80032ec:	4b7d      	ldr	r3, [pc, #500]	; (80034e4 <MX_LWIP_Init+0x228>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80032f2:	4b7d      	ldr	r3, [pc, #500]	; (80034e8 <MX_LWIP_Init+0x22c>)
 80032f4:	22c0      	movs	r2, #192	; 0xc0
 80032f6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80032f8:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <MX_LWIP_Init+0x22c>)
 80032fa:	22a8      	movs	r2, #168	; 0xa8
 80032fc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80032fe:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003300:	2200      	movs	r2, #0
 8003302:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003306:	2201      	movs	r2, #1
 8003308:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800330a:	f000 fd59 	bl	8003dc0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800330e:	4b74      	ldr	r3, [pc, #464]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	061a      	lsls	r2, r3, #24
 8003314:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003316:	785b      	ldrb	r3, [r3, #1]
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	431a      	orrs	r2, r3
 800331c:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <MX_LWIP_Init+0x224>)
 800331e:	789b      	ldrb	r3, [r3, #2]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	4313      	orrs	r3, r2
 8003324:	4a6e      	ldr	r2, [pc, #440]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003326:	78d2      	ldrb	r2, [r2, #3]
 8003328:	4313      	orrs	r3, r2
 800332a:	061a      	lsls	r2, r3, #24
 800332c:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <MX_LWIP_Init+0x224>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	0619      	lsls	r1, r3, #24
 8003332:	4b6b      	ldr	r3, [pc, #428]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	4319      	orrs	r1, r3
 800333a:	4b69      	ldr	r3, [pc, #420]	; (80034e0 <MX_LWIP_Init+0x224>)
 800333c:	789b      	ldrb	r3, [r3, #2]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	430b      	orrs	r3, r1
 8003342:	4967      	ldr	r1, [pc, #412]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003344:	78c9      	ldrb	r1, [r1, #3]
 8003346:	430b      	orrs	r3, r1
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800334e:	431a      	orrs	r2, r3
 8003350:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	0619      	lsls	r1, r3, #24
 8003356:	4b62      	ldr	r3, [pc, #392]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	041b      	lsls	r3, r3, #16
 800335c:	4319      	orrs	r1, r3
 800335e:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003360:	789b      	ldrb	r3, [r3, #2]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	430b      	orrs	r3, r1
 8003366:	495e      	ldr	r1, [pc, #376]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003368:	78c9      	ldrb	r1, [r1, #3]
 800336a:	430b      	orrs	r3, r1
 800336c:	0a1b      	lsrs	r3, r3, #8
 800336e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003372:	431a      	orrs	r2, r3
 8003374:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	0619      	lsls	r1, r3, #24
 800337a:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <MX_LWIP_Init+0x224>)
 800337c:	785b      	ldrb	r3, [r3, #1]
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	4319      	orrs	r1, r3
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <MX_LWIP_Init+0x224>)
 8003384:	789b      	ldrb	r3, [r3, #2]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	430b      	orrs	r3, r1
 800338a:	4955      	ldr	r1, [pc, #340]	; (80034e0 <MX_LWIP_Init+0x224>)
 800338c:	78c9      	ldrb	r1, [r1, #3]
 800338e:	430b      	orrs	r3, r1
 8003390:	0e1b      	lsrs	r3, r3, #24
 8003392:	4313      	orrs	r3, r2
 8003394:	4a55      	ldr	r2, [pc, #340]	; (80034ec <MX_LWIP_Init+0x230>)
 8003396:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003398:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <MX_LWIP_Init+0x228>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	061a      	lsls	r2, r3, #24
 800339e:	4b51      	ldr	r3, [pc, #324]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033a8:	789b      	ldrb	r3, [r3, #2]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	4313      	orrs	r3, r2
 80033ae:	4a4d      	ldr	r2, [pc, #308]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033b0:	78d2      	ldrb	r2, [r2, #3]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	061a      	lsls	r2, r3, #24
 80033b6:	4b4b      	ldr	r3, [pc, #300]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	0619      	lsls	r1, r3, #24
 80033bc:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	4319      	orrs	r1, r3
 80033c4:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033c6:	789b      	ldrb	r3, [r3, #2]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	430b      	orrs	r3, r1
 80033cc:	4945      	ldr	r1, [pc, #276]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033ce:	78c9      	ldrb	r1, [r1, #3]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033d8:	431a      	orrs	r2, r3
 80033da:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	0619      	lsls	r1, r3, #24
 80033e0:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	4319      	orrs	r1, r3
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033ea:	789b      	ldrb	r3, [r3, #2]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	430b      	orrs	r3, r1
 80033f0:	493c      	ldr	r1, [pc, #240]	; (80034e4 <MX_LWIP_Init+0x228>)
 80033f2:	78c9      	ldrb	r1, [r1, #3]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033fc:	431a      	orrs	r2, r3
 80033fe:	4b39      	ldr	r3, [pc, #228]	; (80034e4 <MX_LWIP_Init+0x228>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	0619      	lsls	r1, r3, #24
 8003404:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <MX_LWIP_Init+0x228>)
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	4319      	orrs	r1, r3
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <MX_LWIP_Init+0x228>)
 800340e:	789b      	ldrb	r3, [r3, #2]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	430b      	orrs	r3, r1
 8003414:	4933      	ldr	r1, [pc, #204]	; (80034e4 <MX_LWIP_Init+0x228>)
 8003416:	78c9      	ldrb	r1, [r1, #3]
 8003418:	430b      	orrs	r3, r1
 800341a:	0e1b      	lsrs	r3, r3, #24
 800341c:	4313      	orrs	r3, r2
 800341e:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <MX_LWIP_Init+0x234>)
 8003420:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	061a      	lsls	r2, r3, #24
 8003428:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <MX_LWIP_Init+0x22c>)
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	041b      	lsls	r3, r3, #16
 800342e:	431a      	orrs	r2, r3
 8003430:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003432:	789b      	ldrb	r3, [r3, #2]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4313      	orrs	r3, r2
 8003438:	4a2b      	ldr	r2, [pc, #172]	; (80034e8 <MX_LWIP_Init+0x22c>)
 800343a:	78d2      	ldrb	r2, [r2, #3]
 800343c:	4313      	orrs	r3, r2
 800343e:	061a      	lsls	r2, r3, #24
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	0619      	lsls	r1, r3, #24
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003448:	785b      	ldrb	r3, [r3, #1]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	4319      	orrs	r1, r3
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003450:	789b      	ldrb	r3, [r3, #2]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	430b      	orrs	r3, r1
 8003456:	4924      	ldr	r1, [pc, #144]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003458:	78c9      	ldrb	r1, [r1, #3]
 800345a:	430b      	orrs	r3, r1
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003462:	431a      	orrs	r2, r3
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	0619      	lsls	r1, r3, #24
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <MX_LWIP_Init+0x22c>)
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	4319      	orrs	r1, r3
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003474:	789b      	ldrb	r3, [r3, #2]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	430b      	orrs	r3, r1
 800347a:	491b      	ldr	r1, [pc, #108]	; (80034e8 <MX_LWIP_Init+0x22c>)
 800347c:	78c9      	ldrb	r1, [r1, #3]
 800347e:	430b      	orrs	r3, r1
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003486:	431a      	orrs	r2, r3
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <MX_LWIP_Init+0x22c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	0619      	lsls	r1, r3, #24
 800348e:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	4319      	orrs	r1, r3
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <MX_LWIP_Init+0x22c>)
 8003498:	789b      	ldrb	r3, [r3, #2]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	430b      	orrs	r3, r1
 800349e:	4912      	ldr	r1, [pc, #72]	; (80034e8 <MX_LWIP_Init+0x22c>)
 80034a0:	78c9      	ldrb	r1, [r1, #3]
 80034a2:	430b      	orrs	r3, r1
 80034a4:	0e1b      	lsrs	r3, r3, #24
 80034a6:	4313      	orrs	r3, r2
 80034a8:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <MX_LWIP_Init+0x238>)
 80034aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <MX_LWIP_Init+0x23c>)
 80034ae:	9302      	str	r3, [sp, #8]
 80034b0:	4b12      	ldr	r3, [pc, #72]	; (80034fc <MX_LWIP_Init+0x240>)
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <MX_LWIP_Init+0x238>)
 80034ba:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <MX_LWIP_Init+0x234>)
 80034bc:	490b      	ldr	r1, [pc, #44]	; (80034ec <MX_LWIP_Init+0x230>)
 80034be:	4810      	ldr	r0, [pc, #64]	; (8003500 <MX_LWIP_Init+0x244>)
 80034c0:	f001 f96a 	bl	8004798 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80034c4:	480e      	ldr	r0, [pc, #56]	; (8003500 <MX_LWIP_Init+0x244>)
 80034c6:	f001 fb19 	bl	8004afc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80034ca:	480d      	ldr	r0, [pc, #52]	; (8003500 <MX_LWIP_Init+0x244>)
 80034cc:	f001 fb26 	bl	8004b1c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <MX_LWIP_Init+0x248>)
 80034d2:	480b      	ldr	r0, [pc, #44]	; (8003500 <MX_LWIP_Init+0x244>)
 80034d4:	f001 fc24 	bl	8004d20 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000134 	.word	0x20000134
 80034e4:	20000138 	.word	0x20000138
 80034e8:	2000013c 	.word	0x2000013c
 80034ec:	20000128 	.word	0x20000128
 80034f0:	2000012c 	.word	0x2000012c
 80034f4:	20000130 	.word	0x20000130
 80034f8:	0800de45 	.word	0x0800de45
 80034fc:	08003811 	.word	0x08003811
 8003500:	200000f4 	.word	0x200000f4
 8003504:	08003559 	.word	0x08003559

08003508 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003510:	f7fd fd70 	bl	8000ff4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <Ethernet_Link_Periodic_Handle+0x30>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b63      	cmp	r3, #99	; 0x63
 800351e:	d907      	bls.n	8003530 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003520:	f7fd fd68 	bl	8000ff4 <HAL_GetTick>
 8003524:	4603      	mov	r3, r0
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <Ethernet_Link_Periodic_Handle+0x30>)
 8003528:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb1e 	bl	8003b6c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200000f0 	.word	0x200000f0

0800353c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003540:	4804      	ldr	r0, [pc, #16]	; (8003554 <MX_LWIP_Process+0x18>)
 8003542:	f000 f945 	bl	80037d0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003546:	f007 fcff 	bl	800af48 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800354a:	4802      	ldr	r0, [pc, #8]	; (8003554 <MX_LWIP_Process+0x18>)
 800354c:	f7ff ffdc 	bl	8003508 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200000f4 	.word	0x200000f4

08003558 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003578:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <low_level_init+0x10c>)
 800357a:	4a40      	ldr	r2, [pc, #256]	; (800367c <low_level_init+0x110>)
 800357c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800357e:	2300      	movs	r3, #0
 8003580:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003586:	23e1      	movs	r3, #225	; 0xe1
 8003588:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800358a:	2300      	movs	r3, #0
 800358c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003592:	2300      	movs	r3, #0
 8003594:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003596:	4a38      	ldr	r2, [pc, #224]	; (8003678 <low_level_init+0x10c>)
 8003598:	f107 0308 	add.w	r3, r7, #8
 800359c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <low_level_init+0x10c>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80035a4:	4b34      	ldr	r3, [pc, #208]	; (8003678 <low_level_init+0x10c>)
 80035a6:	4a36      	ldr	r2, [pc, #216]	; (8003680 <low_level_init+0x114>)
 80035a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <low_level_init+0x10c>)
 80035ac:	4a35      	ldr	r2, [pc, #212]	; (8003684 <low_level_init+0x118>)
 80035ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80035b0:	4b31      	ldr	r3, [pc, #196]	; (8003678 <low_level_init+0x10c>)
 80035b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80035b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80035b8:	482f      	ldr	r0, [pc, #188]	; (8003678 <low_level_init+0x10c>)
 80035ba:	f7fd fe5d 	bl	8001278 <HAL_ETH_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80035c2:	2238      	movs	r2, #56	; 0x38
 80035c4:	2100      	movs	r1, #0
 80035c6:	4830      	ldr	r0, [pc, #192]	; (8003688 <low_level_init+0x11c>)
 80035c8:	f00a fe77 	bl	800e2ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80035cc:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <low_level_init+0x11c>)
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80035d2:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <low_level_init+0x11c>)
 80035d4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80035d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80035da:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <low_level_init+0x11c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80035e0:	482a      	ldr	r0, [pc, #168]	; (800368c <low_level_init+0x120>)
 80035e2:	f000 ffa1 	bl	8004528 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2206      	movs	r2, #6
 80035ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <low_level_init+0x10c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <low_level_init+0x10c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	785a      	ldrb	r2, [r3, #1]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <low_level_init+0x10c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	789a      	ldrb	r2, [r3, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003612:	4b19      	ldr	r3, [pc, #100]	; (8003678 <low_level_init+0x10c>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	78da      	ldrb	r2, [r3, #3]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800361e:	4b16      	ldr	r3, [pc, #88]	; (8003678 <low_level_init+0x10c>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	791a      	ldrb	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <low_level_init+0x10c>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	795a      	ldrb	r2, [r3, #5]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800363c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003644:	f043 030a 	orr.w	r3, r3, #10
 8003648:	b2da      	uxtb	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8003650:	490f      	ldr	r1, [pc, #60]	; (8003690 <low_level_init+0x124>)
 8003652:	4810      	ldr	r0, [pc, #64]	; (8003694 <low_level_init+0x128>)
 8003654:	f7fd fb07 	bl	8000c66 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8003658:	480e      	ldr	r0, [pc, #56]	; (8003694 <low_level_init+0x128>)
 800365a:	f7fd fb36 	bl	8000cca <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fa81 	bl	8003b6c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800366a:	e001      	b.n	8003670 <low_level_init+0x104>
    Error_Handler();
 800366c:	f7fd f88e 	bl	800078c <Error_Handler>
}
 8003670:	bf00      	nop
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20004c0c 	.word	0x20004c0c
 800367c:	40028000 	.word	0x40028000
 8003680:	20004b6c 	.word	0x20004b6c
 8003684:	20004acc 	.word	0x20004acc
 8003688:	20004cbc 	.word	0x20004cbc
 800368c:	08011a68 	.word	0x08011a68
 8003690:	2000000c 	.word	0x2000000c
 8003694:	20004cf4 	.word	0x20004cf4

08003698 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b092      	sub	sp, #72	; 0x48
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	2230      	movs	r2, #48	; 0x30
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00a fdfe 	bl	800e2ba <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	2230      	movs	r2, #48	; 0x30
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f00a fdf7 	bl	800e2ba <memset>

  for(q = p; q != NULL; q = q->next)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	643b      	str	r3, [r7, #64]	; 0x40
 80036d0:	e045      	b.n	800375e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80036d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d902      	bls.n	80036de <low_level_output+0x46>
      return ERR_IF;
 80036d8:	f06f 030b 	mvn.w	r3, #11
 80036dc:	e055      	b.n	800378a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	3348      	adds	r3, #72	; 0x48
 80036ee:	443b      	add	r3, r7
 80036f0:	3b3c      	subs	r3, #60	; 0x3c
 80036f2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80036f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f6:	895b      	ldrh	r3, [r3, #10]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	3348      	adds	r3, #72	; 0x48
 8003706:	443b      	add	r3, r7
 8003708:	3b38      	subs	r3, #56	; 0x38
 800370a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003714:	1e5a      	subs	r2, r3, #1
 8003716:	f107 000c 	add.w	r0, r7, #12
 800371a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800371c:	460b      	mov	r3, r1
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	440b      	add	r3, r1
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	18c1      	adds	r1, r0, r3
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	3348      	adds	r3, #72	; 0x48
 8003730:	443b      	add	r3, r7
 8003732:	3b34      	subs	r3, #52	; 0x34
 8003734:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800373e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3348      	adds	r3, #72	; 0x48
 800374a:	443b      	add	r3, r7
 800374c:	3b34      	subs	r3, #52	; 0x34
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003754:	3301      	adds	r3, #1
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	643b      	str	r3, [r7, #64]	; 0x40
 800375e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1b6      	bne.n	80036d2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	891b      	ldrh	r3, [r3, #8]
 8003768:	461a      	mov	r2, r3
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <low_level_output+0xfc>)
 800376c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <low_level_output+0xfc>)
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003776:	4a07      	ldr	r2, [pc, #28]	; (8003794 <low_level_output+0xfc>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800377c:	2214      	movs	r2, #20
 800377e:	4905      	ldr	r1, [pc, #20]	; (8003794 <low_level_output+0xfc>)
 8003780:	4805      	ldr	r0, [pc, #20]	; (8003798 <low_level_output+0x100>)
 8003782:	f7fd feaf 	bl	80014e4 <HAL_ETH_Transmit>

  return errval;
 8003786:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800378a:	4618      	mov	r0, r3
 800378c:	3748      	adds	r7, #72	; 0x48
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20004cbc 	.word	0x20004cbc
 8003798:	20004c0c 	.word	0x20004c0c

0800379c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <low_level_input+0x2c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	4619      	mov	r1, r3
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <low_level_input+0x30>)
 80037b8:	f7fd ff28 	bl	800160c <HAL_ETH_ReadData>
  }

  return p;
 80037bc:	68fb      	ldr	r3, [r7, #12]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20004ac8 	.word	0x20004ac8
 80037cc:	20004c0c 	.word	0x20004c0c

080037d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ffdd 	bl	800379c <low_level_input>
 80037e2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	4798      	blx	r3
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f001 fe10 	bl	8005420 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ea      	bne.n	80037dc <ethernetif_input+0xc>
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <ethernetif_init+0x1c>
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <ethernetif_init+0x48>)
 8003820:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8003824:	490d      	ldr	r1, [pc, #52]	; (800385c <ethernetif_init+0x4c>)
 8003826:	480e      	ldr	r0, [pc, #56]	; (8003860 <ethernetif_init+0x50>)
 8003828:	f00a fce2 	bl	800e1f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2273      	movs	r2, #115	; 0x73
 8003830:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2274      	movs	r2, #116	; 0x74
 8003838:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <ethernetif_init+0x54>)
 8003840:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a08      	ldr	r2, [pc, #32]	; (8003868 <ethernetif_init+0x58>)
 8003846:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fe8f 	bl	800356c <low_level_init>

  return ERR_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	0800f078 	.word	0x0800f078
 800385c:	0800f094 	.word	0x0800f094
 8003860:	0800f0a4 	.word	0x0800f0a4
 8003864:	0800c2fd 	.word	0x0800c2fd
 8003868:	08003699 	.word	0x08003699

0800386c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	4807      	ldr	r0, [pc, #28]	; (8003898 <pbuf_free_custom+0x2c>)
 800387c:	f000 ff36 	bl	80046ec <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <pbuf_free_custom+0x30>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d102      	bne.n	800388e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <pbuf_free_custom+0x30>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
  }
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	08011a68 	.word	0x08011a68
 800389c:	20004ac8 	.word	0x20004ac8

080038a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038a4:	f7fd fba6 	bl	8000ff4 <HAL_GetTick>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b090      	sub	sp, #64	; 0x40
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a78      	ldr	r2, [pc, #480]	; (8003ab0 <HAL_ETH_MspInit+0x200>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	f040 80e9 	bne.w	8003aa6 <HAL_ETH_MspInit+0x1f6>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80038d4:	2300      	movs	r3, #0
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d8:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	4a75      	ldr	r2, [pc, #468]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80038de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038e2:	6313      	str	r3, [r2, #48]	; 0x30
 80038e4:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	4a6e      	ldr	r2, [pc, #440]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80038fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003900:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2300      	movs	r3, #0
 800390e:	623b      	str	r3, [r7, #32]
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	4a67      	ldr	r2, [pc, #412]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003916:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800391a:	6313      	str	r3, [r2, #48]	; 0x30
 800391c:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003924:	623b      	str	r3, [r7, #32]
 8003926:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	4b61      	ldr	r3, [pc, #388]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	4a60      	ldr	r2, [pc, #384]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6313      	str	r3, [r2, #48]	; 0x30
 8003938:	4b5e      	ldr	r3, [pc, #376]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	4b5a      	ldr	r3, [pc, #360]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a59      	ldr	r2, [pc, #356]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6313      	str	r3, [r2, #48]	; 0x30
 8003970:	4b50      	ldr	r3, [pc, #320]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	4b4c      	ldr	r3, [pc, #304]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4a4b      	ldr	r2, [pc, #300]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	6313      	str	r3, [r2, #48]	; 0x30
 800398c:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	4a44      	ldr	r2, [pc, #272]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80039a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a6:	6313      	str	r3, [r2, #48]	; 0x30
 80039a8:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	4a3d      	ldr	r2, [pc, #244]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	6313      	str	r3, [r2, #48]	; 0x30
 80039c4:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <HAL_ETH_MspInit+0x204>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PB8     ------> ETH_TXD3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80039d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039e2:	230b      	movs	r3, #11
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80039e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ea:	4619      	mov	r1, r3
 80039ec:	4832      	ldr	r0, [pc, #200]	; (8003ab8 <HAL_ETH_MspInit+0x208>)
 80039ee:	f7fe fe39 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80039f2:	233e      	movs	r3, #62	; 0x3e
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f6:	2302      	movs	r3, #2
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fe:	2303      	movs	r3, #3
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a02:	230b      	movs	r3, #11
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	482b      	ldr	r0, [pc, #172]	; (8003abc <HAL_ETH_MspInit+0x20c>)
 8003a0e:	f7fe fe29 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003a12:	2386      	movs	r3, #134	; 0x86
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2302      	movs	r3, #2
 8003a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a22:	230b      	movs	r3, #11
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4824      	ldr	r0, [pc, #144]	; (8003ac0 <HAL_ETH_MspInit+0x210>)
 8003a2e:	f7fe fe19 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 8003a32:	23cc      	movs	r3, #204	; 0xcc
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a42:	230b      	movs	r3, #11
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	481d      	ldr	r0, [pc, #116]	; (8003ac4 <HAL_ETH_MspInit+0x214>)
 8003a4e:	f7fe fe09 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003a52:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a60:	2303      	movs	r3, #3
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a64:	230b      	movs	r3, #11
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4816      	ldr	r0, [pc, #88]	; (8003ac8 <HAL_ETH_MspInit+0x218>)
 8003a70:	f7fe fdf8 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a86:	230b      	movs	r3, #11
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a8e:	4619      	mov	r1, r3
 8003a90:	480e      	ldr	r0, [pc, #56]	; (8003acc <HAL_ETH_MspInit+0x21c>)
 8003a92:	f7fe fde7 	bl	8002664 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	203d      	movs	r0, #61	; 0x3d
 8003a9c:	f7fd fbb5 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003aa0:	203d      	movs	r0, #61	; 0x3d
 8003aa2:	f7fd fbce 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3740      	adds	r7, #64	; 0x40
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40028000 	.word	0x40028000
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40022000 	.word	0x40022000
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40021c00 	.word	0x40021c00
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	40020400 	.word	0x40020400

08003ad0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <ETH_PHY_IO_Init+0x10>)
 8003ad6:	f7fe f969 	bl	8001dac <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20004c0c 	.word	0x20004c0c

08003ae4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	68f9      	ldr	r1, [r7, #12]
 8003b06:	4807      	ldr	r0, [pc, #28]	; (8003b24 <ETH_PHY_IO_ReadReg+0x30>)
 8003b08:	f7fd ffb8 	bl	8001a7c <HAL_ETH_ReadPHYRegister>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
 8003b16:	e000      	b.n	8003b1a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20004c0c 	.word	0x20004c0c

08003b28 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	4807      	ldr	r0, [pc, #28]	; (8003b58 <ETH_PHY_IO_WriteReg+0x30>)
 8003b3c:	f7fd ffe9 	bl	8001b12 <HAL_ETH_WritePHYRegister>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	e000      	b.n	8003b4e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20004c0c 	.word	0x20004c0c

08003b5c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b60:	f7fd fa48 	bl	8000ff4 <HAL_GetTick>
 8003b64:	4603      	mov	r3, r0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b0a0      	sub	sp, #128	; 0x80
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	2264      	movs	r2, #100	; 0x64
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f00a fb9c 	bl	800e2ba <memset>
  int32_t PHYLinkState = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b8e:	2300      	movs	r3, #0
 8003b90:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8003b92:	483a      	ldr	r0, [pc, #232]	; (8003c7c <ethernet_link_check_state+0x110>)
 8003b94:	f7fd f941 	bl	8000e1a <DP83848_GetLinkState>
 8003b98:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <ethernet_link_check_state+0x5a>
 8003bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	dc09      	bgt.n	8003bc6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003bb2:	4833      	ldr	r0, [pc, #204]	; (8003c80 <ethernet_link_check_state+0x114>)
 8003bb4:	f7fd fc3d 	bl	8001432 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 f81b 	bl	8004bf4 <netif_set_down>
    netif_set_link_down(netif);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f001 f87e 	bl	8004cc0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003bc4:	e055      	b.n	8003c72 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d14e      	bne.n	8003c72 <ethernet_link_check_state+0x106>
 8003bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	dd4b      	ble.n	8003c72 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bdc:	3b02      	subs	r3, #2
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d82a      	bhi.n	8003c38 <ethernet_link_check_state+0xcc>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <ethernet_link_check_state+0x7c>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003bf9 	.word	0x08003bf9
 8003bec:	08003c0b 	.word	0x08003c0b
 8003bf0:	08003c1b 	.word	0x08003c1b
 8003bf4:	08003c2b 	.word	0x08003c2b
      duplex = ETH_FULLDUPLEX_MODE;
 8003bf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bfc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003bfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c02:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003c04:	2301      	movs	r3, #1
 8003c06:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003c08:	e017      	b.n	8003c3a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003c0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c12:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003c14:	2301      	movs	r3, #1
 8003c16:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003c18:	e00f      	b.n	8003c3a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c1e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003c20:	2300      	movs	r3, #0
 8003c22:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003c24:	2301      	movs	r3, #1
 8003c26:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003c28:	e007      	b.n	8003c3a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003c36:	e000      	b.n	8003c3a <ethernet_link_check_state+0xce>
      break;
 8003c38:	bf00      	nop
    if(linkchanged)
 8003c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	4619      	mov	r1, r3
 8003c46:	480e      	ldr	r0, [pc, #56]	; (8003c80 <ethernet_link_check_state+0x114>)
 8003c48:	f7fd ffac 	bl	8001ba4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c52:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4809      	ldr	r0, [pc, #36]	; (8003c80 <ethernet_link_check_state+0x114>)
 8003c5c:	f7fe f88c 	bl	8001d78 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003c60:	4807      	ldr	r0, [pc, #28]	; (8003c80 <ethernet_link_check_state+0x114>)
 8003c62:	f7fd fb87 	bl	8001374 <HAL_ETH_Start>
      netif_set_up(netif);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 ff58 	bl	8004b1c <netif_set_up>
      netif_set_link_up(netif);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fff3 	bl	8004c58 <netif_set_link_up>
}
 8003c72:	bf00      	nop
 8003c74:	3780      	adds	r7, #128	; 0x80
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20004cf4 	.word	0x20004cf4
 8003c80:	20004c0c 	.word	0x20004c0c

08003c84 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003c8c:	4812      	ldr	r0, [pc, #72]	; (8003cd8 <HAL_ETH_RxAllocateCallback+0x54>)
 8003c8e:	f000 fcbf 	bl	8004610 <memp_malloc_pool>
 8003c92:	60f8      	str	r0, [r7, #12]
  if (p)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d014      	beq.n	8003cc4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f103 0220 	add.w	r2, r3, #32
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a0d      	ldr	r2, [pc, #52]	; (8003cdc <HAL_ETH_RxAllocateCallback+0x58>)
 8003ca8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003cb2:	9201      	str	r2, [sp, #4]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2241      	movs	r2, #65	; 0x41
 8003cba:	2100      	movs	r1, #0
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f001 f9f5 	bl	80050ac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003cc2:	e005      	b.n	8003cd0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	08011a68 	.word	0x08011a68
 8003cdc:	0800386d 	.word	0x0800386d
 8003ce0:	20004ac8 	.word	0x20004ac8

08003ce4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3b20      	subs	r3, #32
 8003d02:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e003      	b.n	8003d2e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e009      	b.n	8003d50 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	891a      	ldrh	r2, [r3, #8]
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	4413      	add	r3, r2
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f2      	bne.n	8003d3c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	3724      	adds	r7, #36	; 0x24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	b21a      	sxth	r2, r3
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	b21b      	sxth	r3, r3
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	b21b      	sxth	r3, r3
 8003d80:	b29b      	uxth	r3, r3
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	061a      	lsls	r2, r3, #24
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	0e1b      	lsrs	r3, r3, #24
 8003db2:	4313      	orrs	r3, r2
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003dca:	f000 f8d5 	bl	8003f78 <mem_init>
  memp_init();
 8003dce:	f000 fbdb 	bl	8004588 <memp_init>
  pbuf_init();
  netif_init();
 8003dd2:	f000 fcd9 	bl	8004788 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003dd6:	f007 f8f9 	bl	800afcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003dda:	f001 fe51 	bl	8005a80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003dde:	f007 f86b 	bl	800aeb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <ptr_to_mem+0x20>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	4413      	add	r3, r2
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20007540 	.word	0x20007540

08003e10 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <mem_to_ptr+0x20>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	b29b      	uxth	r3, r3
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20007540 	.word	0x20007540

08003e34 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003e3c:	4b45      	ldr	r3, [pc, #276]	; (8003f54 <plug_holes+0x120>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d206      	bcs.n	8003e54 <plug_holes+0x20>
 8003e46:	4b44      	ldr	r3, [pc, #272]	; (8003f58 <plug_holes+0x124>)
 8003e48:	f240 12df 	movw	r2, #479	; 0x1df
 8003e4c:	4943      	ldr	r1, [pc, #268]	; (8003f5c <plug_holes+0x128>)
 8003e4e:	4844      	ldr	r0, [pc, #272]	; (8003f60 <plug_holes+0x12c>)
 8003e50:	f00a f9ce 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003e54:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <plug_holes+0x130>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d306      	bcc.n	8003e6c <plug_holes+0x38>
 8003e5e:	4b3e      	ldr	r3, [pc, #248]	; (8003f58 <plug_holes+0x124>)
 8003e60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e64:	4940      	ldr	r1, [pc, #256]	; (8003f68 <plug_holes+0x134>)
 8003e66:	483e      	ldr	r0, [pc, #248]	; (8003f60 <plug_holes+0x12c>)
 8003e68:	f00a f9c2 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	791b      	ldrb	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d006      	beq.n	8003e82 <plug_holes+0x4e>
 8003e74:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <plug_holes+0x124>)
 8003e76:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003e7a:	493c      	ldr	r1, [pc, #240]	; (8003f6c <plug_holes+0x138>)
 8003e7c:	4838      	ldr	r0, [pc, #224]	; (8003f60 <plug_holes+0x12c>)
 8003e7e:	f00a f9b7 	bl	800e1f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e8a:	d906      	bls.n	8003e9a <plug_holes+0x66>
 8003e8c:	4b32      	ldr	r3, [pc, #200]	; (8003f58 <plug_holes+0x124>)
 8003e8e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003e92:	4937      	ldr	r1, [pc, #220]	; (8003f70 <plug_holes+0x13c>)
 8003e94:	4832      	ldr	r0, [pc, #200]	; (8003f60 <plug_holes+0x12c>)
 8003e96:	f00a f9ab 	bl	800e1f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff ffa4 	bl	8003dec <ptr_to_mem>
 8003ea4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d024      	beq.n	8003ef8 <plug_holes+0xc4>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	791b      	ldrb	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d120      	bne.n	8003ef8 <plug_holes+0xc4>
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <plug_holes+0x130>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d01b      	beq.n	8003ef8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003ec0:	4b2c      	ldr	r3, [pc, #176]	; (8003f74 <plug_holes+0x140>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d102      	bne.n	8003ed0 <plug_holes+0x9c>
      lfree = mem;
 8003eca:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <plug_holes+0x140>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	881a      	ldrh	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003ee0:	d00a      	beq.n	8003ef8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff80 	bl	8003dec <ptr_to_mem>
 8003eec:	4604      	mov	r4, r0
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ff8e 	bl	8003e10 <mem_to_ptr>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	885b      	ldrh	r3, [r3, #2]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ff75 	bl	8003dec <ptr_to_mem>
 8003f02:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d01f      	beq.n	8003f4c <plug_holes+0x118>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	791b      	ldrb	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d11b      	bne.n	8003f4c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <plug_holes+0x140>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d102      	bne.n	8003f24 <plug_holes+0xf0>
      lfree = pmem;
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <plug_holes+0x140>)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f34:	d00a      	beq.n	8003f4c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff56 	bl	8003dec <ptr_to_mem>
 8003f40:	4604      	mov	r4, r0
 8003f42:	68b8      	ldr	r0, [r7, #8]
 8003f44:	f7ff ff64 	bl	8003e10 <mem_to_ptr>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}
 8003f54:	20007540 	.word	0x20007540
 8003f58:	0800f0cc 	.word	0x0800f0cc
 8003f5c:	0800f0fc 	.word	0x0800f0fc
 8003f60:	0800f114 	.word	0x0800f114
 8003f64:	20007544 	.word	0x20007544
 8003f68:	0800f13c 	.word	0x0800f13c
 8003f6c:	0800f158 	.word	0x0800f158
 8003f70:	0800f174 	.word	0x0800f174
 8003f74:	20007548 	.word	0x20007548

08003f78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <mem_init+0x68>)
 8003f80:	3303      	adds	r3, #3
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <mem_init+0x6c>)
 8003f8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <mem_init+0x6c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003fa6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8003faa:	f7ff ff1f 	bl	8003dec <ptr_to_mem>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <mem_init+0x70>)
 8003fb2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <mem_init+0x70>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <mem_init+0x70>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003fc4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <mem_init+0x70>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003fce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <mem_init+0x6c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a05      	ldr	r2, [pc, #20]	; (8003fec <mem_init+0x74>)
 8003fd6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20004d2c 	.word	0x20004d2c
 8003fe4:	20007540 	.word	0x20007540
 8003fe8:	20007544 	.word	0x20007544
 8003fec:	20007548 	.word	0x20007548

08003ff0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff ff09 	bl	8003e10 <mem_to_ptr>
 8003ffe:	4603      	mov	r3, r0
 8004000:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fef0 	bl	8003dec <ptr_to_mem>
 800400c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	885b      	ldrh	r3, [r3, #2]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff feea 	bl	8003dec <ptr_to_mem>
 8004018:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004022:	d818      	bhi.n	8004056 <mem_link_valid+0x66>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	885b      	ldrh	r3, [r3, #2]
 8004028:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800402c:	d813      	bhi.n	8004056 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004032:	8afa      	ldrh	r2, [r7, #22]
 8004034:	429a      	cmp	r2, r3
 8004036:	d004      	beq.n	8004042 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	8afa      	ldrh	r2, [r7, #22]
 800403e:	429a      	cmp	r2, r3
 8004040:	d109      	bne.n	8004056 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <mem_link_valid+0x74>)
 8004044:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d006      	beq.n	800405a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	885b      	ldrh	r3, [r3, #2]
 8004050:	8afa      	ldrh	r2, [r7, #22]
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <mem_link_valid+0x6a>
    return 0;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <mem_link_valid+0x6c>
  }
  return 1;
 800405a:	2301      	movs	r3, #1
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20007544 	.word	0x20007544

08004068 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d04c      	beq.n	8004110 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <mem_free+0xb0>)
 8004082:	f240 2273 	movw	r2, #627	; 0x273
 8004086:	4925      	ldr	r1, [pc, #148]	; (800411c <mem_free+0xb4>)
 8004088:	4825      	ldr	r0, [pc, #148]	; (8004120 <mem_free+0xb8>)
 800408a:	f00a f8b1 	bl	800e1f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800408e:	e040      	b.n	8004112 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3b08      	subs	r3, #8
 8004094:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <mem_free+0xbc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d306      	bcc.n	80040ae <mem_free+0x46>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f103 020c 	add.w	r2, r3, #12
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <mem_free+0xc0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d907      	bls.n	80040be <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80040ae:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <mem_free+0xb0>)
 80040b0:	f240 227f 	movw	r2, #639	; 0x27f
 80040b4:	491d      	ldr	r1, [pc, #116]	; (800412c <mem_free+0xc4>)
 80040b6:	481a      	ldr	r0, [pc, #104]	; (8004120 <mem_free+0xb8>)
 80040b8:	f00a f89a 	bl	800e1f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040bc:	e029      	b.n	8004112 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	791b      	ldrb	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <mem_free+0xb0>)
 80040c8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80040cc:	4918      	ldr	r1, [pc, #96]	; (8004130 <mem_free+0xc8>)
 80040ce:	4814      	ldr	r0, [pc, #80]	; (8004120 <mem_free+0xb8>)
 80040d0:	f00a f88e 	bl	800e1f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040d4:	e01d      	b.n	8004112 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7ff ff8a 	bl	8003ff0 <mem_link_valid>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <mem_free+0xb0>)
 80040e4:	f240 2295 	movw	r2, #661	; 0x295
 80040e8:	4912      	ldr	r1, [pc, #72]	; (8004134 <mem_free+0xcc>)
 80040ea:	480d      	ldr	r0, [pc, #52]	; (8004120 <mem_free+0xb8>)
 80040ec:	f00a f880 	bl	800e1f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040f0:	e00f      	b.n	8004112 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <mem_free+0xd0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d202      	bcs.n	8004108 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004102:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <mem_free+0xd0>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f7ff fe93 	bl	8003e34 <plug_holes>
 800410e:	e000      	b.n	8004112 <mem_free+0xaa>
    return;
 8004110:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	0800f0cc 	.word	0x0800f0cc
 800411c:	0800f1a0 	.word	0x0800f1a0
 8004120:	0800f114 	.word	0x0800f114
 8004124:	20007540 	.word	0x20007540
 8004128:	20007544 	.word	0x20007544
 800412c:	0800f1c4 	.word	0x0800f1c4
 8004130:	0800f1e0 	.word	0x0800f1e0
 8004134:	0800f208 	.word	0x0800f208
 8004138:	20007548 	.word	0x20007548

0800413c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	3303      	adds	r3, #3
 800414c:	b29b      	uxth	r3, r3
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004154:	8bfb      	ldrh	r3, [r7, #30]
 8004156:	2b0b      	cmp	r3, #11
 8004158:	d801      	bhi.n	800415e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800415a:	230c      	movs	r3, #12
 800415c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800415e:	8bfb      	ldrh	r3, [r7, #30]
 8004160:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004164:	d803      	bhi.n	800416e <mem_trim+0x32>
 8004166:	8bfa      	ldrh	r2, [r7, #30]
 8004168:	887b      	ldrh	r3, [r7, #2]
 800416a:	429a      	cmp	r2, r3
 800416c:	d201      	bcs.n	8004172 <mem_trim+0x36>
    return NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	e0cc      	b.n	800430c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004172:	4b68      	ldr	r3, [pc, #416]	; (8004314 <mem_trim+0x1d8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d304      	bcc.n	8004186 <mem_trim+0x4a>
 800417c:	4b66      	ldr	r3, [pc, #408]	; (8004318 <mem_trim+0x1dc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d306      	bcc.n	8004194 <mem_trim+0x58>
 8004186:	4b65      	ldr	r3, [pc, #404]	; (800431c <mem_trim+0x1e0>)
 8004188:	f240 22d1 	movw	r2, #721	; 0x2d1
 800418c:	4964      	ldr	r1, [pc, #400]	; (8004320 <mem_trim+0x1e4>)
 800418e:	4865      	ldr	r0, [pc, #404]	; (8004324 <mem_trim+0x1e8>)
 8004190:	f00a f82e 	bl	800e1f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004194:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <mem_trim+0x1d8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	d304      	bcc.n	80041a8 <mem_trim+0x6c>
 800419e:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <mem_trim+0x1dc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d301      	bcc.n	80041ac <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	e0af      	b.n	800430c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b08      	subs	r3, #8
 80041b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80041b2:	69b8      	ldr	r0, [r7, #24]
 80041b4:	f7ff fe2c 	bl	8003e10 <mem_to_ptr>
 80041b8:	4603      	mov	r3, r0
 80041ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	881a      	ldrh	r2, [r3, #0]
 80041c0:	8afb      	ldrh	r3, [r7, #22]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b08      	subs	r3, #8
 80041c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80041ca:	8bfa      	ldrh	r2, [r7, #30]
 80041cc:	8abb      	ldrh	r3, [r7, #20]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d906      	bls.n	80041e0 <mem_trim+0xa4>
 80041d2:	4b52      	ldr	r3, [pc, #328]	; (800431c <mem_trim+0x1e0>)
 80041d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80041d8:	4953      	ldr	r1, [pc, #332]	; (8004328 <mem_trim+0x1ec>)
 80041da:	4852      	ldr	r0, [pc, #328]	; (8004324 <mem_trim+0x1e8>)
 80041dc:	f00a f808 	bl	800e1f0 <iprintf>
  if (newsize > size) {
 80041e0:	8bfa      	ldrh	r2, [r7, #30]
 80041e2:	8abb      	ldrh	r3, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d901      	bls.n	80041ec <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e08f      	b.n	800430c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80041ec:	8bfa      	ldrh	r2, [r7, #30]
 80041ee:	8abb      	ldrh	r3, [r7, #20]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d101      	bne.n	80041f8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	e089      	b.n	800430c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fdf5 	bl	8003dec <ptr_to_mem>
 8004202:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	791b      	ldrb	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d13f      	bne.n	800428c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004214:	d106      	bne.n	8004224 <mem_trim+0xe8>
 8004216:	4b41      	ldr	r3, [pc, #260]	; (800431c <mem_trim+0x1e0>)
 8004218:	f240 22f5 	movw	r2, #757	; 0x2f5
 800421c:	4943      	ldr	r1, [pc, #268]	; (800432c <mem_trim+0x1f0>)
 800421e:	4841      	ldr	r0, [pc, #260]	; (8004324 <mem_trim+0x1e8>)
 8004220:	f009 ffe6 	bl	800e1f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800422a:	8afa      	ldrh	r2, [r7, #22]
 800422c:	8bfb      	ldrh	r3, [r7, #30]
 800422e:	4413      	add	r3, r2
 8004230:	b29b      	uxth	r3, r3
 8004232:	3308      	adds	r3, #8
 8004234:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004236:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <mem_trim+0x1f4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d106      	bne.n	800424e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fdd2 	bl	8003dec <ptr_to_mem>
 8004248:	4603      	mov	r3, r0
 800424a:	4a39      	ldr	r2, [pc, #228]	; (8004330 <mem_trim+0x1f4>)
 800424c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800424e:	89fb      	ldrh	r3, [r7, #14]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fdcb 	bl	8003dec <ptr_to_mem>
 8004256:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2200      	movs	r2, #0
 800425c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	89ba      	ldrh	r2, [r7, #12]
 8004262:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	8afa      	ldrh	r2, [r7, #22]
 8004268:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	89fa      	ldrh	r2, [r7, #14]
 800426e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004278:	d047      	beq.n	800430a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fdb4 	bl	8003dec <ptr_to_mem>
 8004284:	4602      	mov	r2, r0
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	8053      	strh	r3, [r2, #2]
 800428a:	e03e      	b.n	800430a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800428c:	8bfb      	ldrh	r3, [r7, #30]
 800428e:	f103 0214 	add.w	r2, r3, #20
 8004292:	8abb      	ldrh	r3, [r7, #20]
 8004294:	429a      	cmp	r2, r3
 8004296:	d838      	bhi.n	800430a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004298:	8afa      	ldrh	r2, [r7, #22]
 800429a:	8bfb      	ldrh	r3, [r7, #30]
 800429c:	4413      	add	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3308      	adds	r3, #8
 80042a2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042ac:	d106      	bne.n	80042bc <mem_trim+0x180>
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <mem_trim+0x1e0>)
 80042b0:	f240 3216 	movw	r2, #790	; 0x316
 80042b4:	491d      	ldr	r1, [pc, #116]	; (800432c <mem_trim+0x1f0>)
 80042b6:	481b      	ldr	r0, [pc, #108]	; (8004324 <mem_trim+0x1e8>)
 80042b8:	f009 ff9a 	bl	800e1f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80042bc:	89fb      	ldrh	r3, [r7, #14]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fd94 	bl	8003dec <ptr_to_mem>
 80042c4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <mem_trim+0x1f4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d202      	bcs.n	80042d6 <mem_trim+0x19a>
      lfree = mem2;
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <mem_trim+0x1f4>)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2200      	movs	r2, #0
 80042da:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	881a      	ldrh	r2, [r3, #0]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	8afa      	ldrh	r2, [r7, #22]
 80042e8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	89fa      	ldrh	r2, [r7, #14]
 80042ee:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042f8:	d007      	beq.n	800430a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fd74 	bl	8003dec <ptr_to_mem>
 8004304:	4602      	mov	r2, r0
 8004306:	89fb      	ldrh	r3, [r7, #14]
 8004308:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800430a:	687b      	ldr	r3, [r7, #4]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20007540 	.word	0x20007540
 8004318:	20007544 	.word	0x20007544
 800431c:	0800f0cc 	.word	0x0800f0cc
 8004320:	0800f23c 	.word	0x0800f23c
 8004324:	0800f114 	.word	0x0800f114
 8004328:	0800f254 	.word	0x0800f254
 800432c:	0800f274 	.word	0x0800f274
 8004330:	20007548 	.word	0x20007548

08004334 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <mem_malloc+0x14>
    return NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	e0d9      	b.n	80044fc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	3303      	adds	r3, #3
 800434c:	b29b      	uxth	r3, r3
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004354:	8bbb      	ldrh	r3, [r7, #28]
 8004356:	2b0b      	cmp	r3, #11
 8004358:	d801      	bhi.n	800435e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800435a:	230c      	movs	r3, #12
 800435c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800435e:	8bbb      	ldrh	r3, [r7, #28]
 8004360:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004364:	d803      	bhi.n	800436e <mem_malloc+0x3a>
 8004366:	8bba      	ldrh	r2, [r7, #28]
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	429a      	cmp	r2, r3
 800436c:	d201      	bcs.n	8004372 <mem_malloc+0x3e>
    return NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	e0c4      	b.n	80044fc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004372:	4b64      	ldr	r3, [pc, #400]	; (8004504 <mem_malloc+0x1d0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fd4a 	bl	8003e10 <mem_to_ptr>
 800437c:	4603      	mov	r3, r0
 800437e:	83fb      	strh	r3, [r7, #30]
 8004380:	e0b4      	b.n	80044ec <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004382:	8bfb      	ldrh	r3, [r7, #30]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fd31 	bl	8003dec <ptr_to_mem>
 800438a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	791b      	ldrb	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 80a4 	bne.w	80044de <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	8bfb      	ldrh	r3, [r7, #30]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f1a3 0208 	sub.w	r2, r3, #8
 80043a4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80043a6:	429a      	cmp	r2, r3
 80043a8:	f0c0 8099 	bcc.w	80044de <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	8bfb      	ldrh	r3, [r7, #30]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f1a3 0208 	sub.w	r2, r3, #8
 80043ba:	8bbb      	ldrh	r3, [r7, #28]
 80043bc:	3314      	adds	r3, #20
 80043be:	429a      	cmp	r2, r3
 80043c0:	d333      	bcc.n	800442a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80043c2:	8bfa      	ldrh	r2, [r7, #30]
 80043c4:	8bbb      	ldrh	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3308      	adds	r3, #8
 80043cc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80043ce:	8a7b      	ldrh	r3, [r7, #18]
 80043d0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043d4:	d106      	bne.n	80043e4 <mem_malloc+0xb0>
 80043d6:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <mem_malloc+0x1d4>)
 80043d8:	f240 3287 	movw	r2, #903	; 0x387
 80043dc:	494b      	ldr	r1, [pc, #300]	; (800450c <mem_malloc+0x1d8>)
 80043de:	484c      	ldr	r0, [pc, #304]	; (8004510 <mem_malloc+0x1dc>)
 80043e0:	f009 ff06 	bl	800e1f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80043e4:	8a7b      	ldrh	r3, [r7, #18]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fd00 	bl	8003dec <ptr_to_mem>
 80043ec:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	881a      	ldrh	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8bfa      	ldrh	r2, [r7, #30]
 8004400:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	8a7a      	ldrh	r2, [r7, #18]
 8004406:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2201      	movs	r2, #1
 800440c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004416:	d00b      	beq.n	8004430 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fce5 	bl	8003dec <ptr_to_mem>
 8004422:	4602      	mov	r2, r0
 8004424:	8a7b      	ldrh	r3, [r7, #18]
 8004426:	8053      	strh	r3, [r2, #2]
 8004428:	e002      	b.n	8004430 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2201      	movs	r2, #1
 800442e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <mem_malloc+0x1d0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	429a      	cmp	r2, r3
 8004438:	d127      	bne.n	800448a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800443a:	4b32      	ldr	r3, [pc, #200]	; (8004504 <mem_malloc+0x1d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004440:	e005      	b.n	800444e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fcd0 	bl	8003dec <ptr_to_mem>
 800444c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <mem_malloc+0x12c>
 8004456:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <mem_malloc+0x1e0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	429a      	cmp	r2, r3
 800445e:	d1f0      	bne.n	8004442 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004460:	4a28      	ldr	r2, [pc, #160]	; (8004504 <mem_malloc+0x1d0>)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004466:	4b27      	ldr	r3, [pc, #156]	; (8004504 <mem_malloc+0x1d0>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <mem_malloc+0x1e0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d00b      	beq.n	800448a <mem_malloc+0x156>
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <mem_malloc+0x1d0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	791b      	ldrb	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d006      	beq.n	800448a <mem_malloc+0x156>
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <mem_malloc+0x1d4>)
 800447e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004482:	4925      	ldr	r1, [pc, #148]	; (8004518 <mem_malloc+0x1e4>)
 8004484:	4822      	ldr	r0, [pc, #136]	; (8004510 <mem_malloc+0x1dc>)
 8004486:	f009 feb3 	bl	800e1f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800448a:	8bba      	ldrh	r2, [r7, #28]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	3308      	adds	r3, #8
 8004492:	4a20      	ldr	r2, [pc, #128]	; (8004514 <mem_malloc+0x1e0>)
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	4293      	cmp	r3, r2
 8004498:	d906      	bls.n	80044a8 <mem_malloc+0x174>
 800449a:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <mem_malloc+0x1d4>)
 800449c:	f240 32b9 	movw	r2, #953	; 0x3b9
 80044a0:	491e      	ldr	r1, [pc, #120]	; (800451c <mem_malloc+0x1e8>)
 80044a2:	481b      	ldr	r0, [pc, #108]	; (8004510 <mem_malloc+0x1dc>)
 80044a4:	f009 fea4 	bl	800e1f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d006      	beq.n	80044c0 <mem_malloc+0x18c>
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <mem_malloc+0x1d4>)
 80044b4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80044b8:	4919      	ldr	r1, [pc, #100]	; (8004520 <mem_malloc+0x1ec>)
 80044ba:	4815      	ldr	r0, [pc, #84]	; (8004510 <mem_malloc+0x1dc>)
 80044bc:	f009 fe98 	bl	800e1f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <mem_malloc+0x1a4>
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <mem_malloc+0x1d4>)
 80044cc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80044d0:	4914      	ldr	r1, [pc, #80]	; (8004524 <mem_malloc+0x1f0>)
 80044d2:	480f      	ldr	r0, [pc, #60]	; (8004510 <mem_malloc+0x1dc>)
 80044d4:	f009 fe8c 	bl	800e1f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	3308      	adds	r3, #8
 80044dc:	e00e      	b.n	80044fc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80044de:	8bfb      	ldrh	r3, [r7, #30]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fc83 	bl	8003dec <ptr_to_mem>
 80044e6:	4603      	mov	r3, r0
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80044ec:	8bfa      	ldrh	r2, [r7, #30]
 80044ee:	8bbb      	ldrh	r3, [r7, #28]
 80044f0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80044f4:	429a      	cmp	r2, r3
 80044f6:	f4ff af44 	bcc.w	8004382 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20007548 	.word	0x20007548
 8004508:	0800f0cc 	.word	0x0800f0cc
 800450c:	0800f274 	.word	0x0800f274
 8004510:	0800f114 	.word	0x0800f114
 8004514:	20007544 	.word	0x20007544
 8004518:	0800f288 	.word	0x0800f288
 800451c:	0800f2a4 	.word	0x0800f2a4
 8004520:	0800f2d4 	.word	0x0800f2d4
 8004524:	0800f304 	.word	0x0800f304

08004528 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	3303      	adds	r3, #3
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e011      	b.n	800456e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4413      	add	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3301      	adds	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	885b      	ldrh	r3, [r3, #2]
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4293      	cmp	r3, r2
 8004578:	dbe7      	blt.n	800454a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800458e:	2300      	movs	r3, #0
 8004590:	80fb      	strh	r3, [r7, #6]
 8004592:	e009      	b.n	80045a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <memp_init+0x30>)
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ffc3 	bl	8004528 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	3301      	adds	r3, #1
 80045a6:	80fb      	strh	r3, [r7, #6]
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d9f2      	bls.n	8004594 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	08011ae0 	.word	0x08011ae0

080045bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <do_memp_malloc_pool+0x38>
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <do_memp_malloc_pool+0x48>)
 80045e8:	f44f 728c 	mov.w	r2, #280	; 0x118
 80045ec:	4906      	ldr	r1, [pc, #24]	; (8004608 <do_memp_malloc_pool+0x4c>)
 80045ee:	4807      	ldr	r0, [pc, #28]	; (800460c <do_memp_malloc_pool+0x50>)
 80045f0:	f009 fdfe 	bl	800e1f0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	e000      	b.n	80045fa <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	0800f328 	.word	0x0800f328
 8004608:	0800f358 	.word	0x0800f358
 800460c:	0800f37c 	.word	0x0800f37c

08004610 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <memp_malloc_pool+0x1c>
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <memp_malloc_pool+0x38>)
 8004620:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004624:	4909      	ldr	r1, [pc, #36]	; (800464c <memp_malloc_pool+0x3c>)
 8004626:	480a      	ldr	r0, [pc, #40]	; (8004650 <memp_malloc_pool+0x40>)
 8004628:	f009 fde2 	bl	800e1f0 <iprintf>
  if (desc == NULL) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <memp_malloc_pool+0x26>
    return NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	e003      	b.n	800463e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ffc0 	bl	80045bc <do_memp_malloc_pool>
 800463c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	0800f328 	.word	0x0800f328
 800464c:	0800f3a4 	.word	0x0800f3a4
 8004650:	0800f37c 	.word	0x0800f37c

08004654 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d908      	bls.n	8004676 <memp_malloc+0x22>
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <memp_malloc+0x3c>)
 8004666:	f240 1257 	movw	r2, #343	; 0x157
 800466a:	490a      	ldr	r1, [pc, #40]	; (8004694 <memp_malloc+0x40>)
 800466c:	480a      	ldr	r0, [pc, #40]	; (8004698 <memp_malloc+0x44>)
 800466e:	f009 fdbf 	bl	800e1f0 <iprintf>
 8004672:	2300      	movs	r3, #0
 8004674:	e008      	b.n	8004688 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	4a08      	ldr	r2, [pc, #32]	; (800469c <memp_malloc+0x48>)
 800467a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff ff9c 	bl	80045bc <do_memp_malloc_pool>
 8004684:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004686:	68fb      	ldr	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	0800f328 	.word	0x0800f328
 8004694:	0800f3b8 	.word	0x0800f3b8
 8004698:	0800f37c 	.word	0x0800f37c
 800469c:	08011ae0 	.word	0x08011ae0

080046a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d006      	beq.n	80046c2 <do_memp_free_pool+0x22>
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <do_memp_free_pool+0x40>)
 80046b6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <do_memp_free_pool+0x44>)
 80046bc:	480a      	ldr	r0, [pc, #40]	; (80046e8 <do_memp_free_pool+0x48>)
 80046be:	f009 fd97 	bl	800e1f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	0800f328 	.word	0x0800f328
 80046e4:	0800f3d8 	.word	0x0800f3d8
 80046e8:	0800f37c 	.word	0x0800f37c

080046ec <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <memp_free_pool+0x1e>
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <memp_free_pool+0x3c>)
 80046fe:	f240 1295 	movw	r2, #405	; 0x195
 8004702:	490a      	ldr	r1, [pc, #40]	; (800472c <memp_free_pool+0x40>)
 8004704:	480a      	ldr	r0, [pc, #40]	; (8004730 <memp_free_pool+0x44>)
 8004706:	f009 fd73 	bl	800e1f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <memp_free_pool+0x34>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004716:	6839      	ldr	r1, [r7, #0]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ffc1 	bl	80046a0 <do_memp_free_pool>
 800471e:	e000      	b.n	8004722 <memp_free_pool+0x36>
    return;
 8004720:	bf00      	nop
}
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	0800f328 	.word	0x0800f328
 800472c:	0800f3a4 	.word	0x0800f3a4
 8004730:	0800f37c 	.word	0x0800f37c

08004734 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	6039      	str	r1, [r7, #0]
 800473e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	2b08      	cmp	r3, #8
 8004744:	d907      	bls.n	8004756 <memp_free+0x22>
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <memp_free+0x44>)
 8004748:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800474c:	490b      	ldr	r1, [pc, #44]	; (800477c <memp_free+0x48>)
 800474e:	480c      	ldr	r0, [pc, #48]	; (8004780 <memp_free+0x4c>)
 8004750:	f009 fd4e 	bl	800e1f0 <iprintf>
 8004754:	e00c      	b.n	8004770 <memp_free+0x3c>

  if (mem == NULL) {
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <memp_free+0x50>)
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff9a 	bl	80046a0 <do_memp_free_pool>
 800476c:	e000      	b.n	8004770 <memp_free+0x3c>
    return;
 800476e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	0800f328 	.word	0x0800f328
 800477c:	0800f3f8 	.word	0x0800f3f8
 8004780:	0800f37c 	.word	0x0800f37c
 8004784:	08011ae0 	.word	0x08011ae0

08004788 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <netif_add+0x26>
 80047ac:	4b57      	ldr	r3, [pc, #348]	; (800490c <netif_add+0x174>)
 80047ae:	f240 1227 	movw	r2, #295	; 0x127
 80047b2:	4957      	ldr	r1, [pc, #348]	; (8004910 <netif_add+0x178>)
 80047b4:	4857      	ldr	r0, [pc, #348]	; (8004914 <netif_add+0x17c>)
 80047b6:	f009 fd1b 	bl	800e1f0 <iprintf>
 80047ba:	2300      	movs	r3, #0
 80047bc:	e0a2      	b.n	8004904 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d108      	bne.n	80047d6 <netif_add+0x3e>
 80047c4:	4b51      	ldr	r3, [pc, #324]	; (800490c <netif_add+0x174>)
 80047c6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80047ca:	4953      	ldr	r1, [pc, #332]	; (8004918 <netif_add+0x180>)
 80047cc:	4851      	ldr	r0, [pc, #324]	; (8004914 <netif_add+0x17c>)
 80047ce:	f009 fd0f 	bl	800e1f0 <iprintf>
 80047d2:	2300      	movs	r3, #0
 80047d4:	e096      	b.n	8004904 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80047dc:	4b4f      	ldr	r3, [pc, #316]	; (800491c <netif_add+0x184>)
 80047de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80047e6:	4b4d      	ldr	r3, [pc, #308]	; (800491c <netif_add+0x184>)
 80047e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80047f0:	4b4a      	ldr	r3, [pc, #296]	; (800491c <netif_add+0x184>)
 80047f2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a45      	ldr	r2, [pc, #276]	; (8004920 <netif_add+0x188>)
 800480a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004826:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <netif_add+0x18c>)
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004834:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f913 	bl	8004a68 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	4798      	blx	r3
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <netif_add+0xba>
    return NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	e058      	b.n	8004904 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004858:	2bff      	cmp	r3, #255	; 0xff
 800485a:	d103      	bne.n	8004864 <netif_add+0xcc>
        netif->num = 0;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004868:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <netif_add+0x190>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e02b      	b.n	80048c8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d106      	bne.n	8004886 <netif_add+0xee>
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <netif_add+0x174>)
 800487a:	f240 128b 	movw	r2, #395	; 0x18b
 800487e:	492b      	ldr	r1, [pc, #172]	; (800492c <netif_add+0x194>)
 8004880:	4824      	ldr	r0, [pc, #144]	; (8004914 <netif_add+0x17c>)
 8004882:	f009 fcb5 	bl	800e1f0 <iprintf>
        num_netifs++;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3301      	adds	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2bff      	cmp	r3, #255	; 0xff
 8004890:	dd06      	ble.n	80048a0 <netif_add+0x108>
 8004892:	4b1e      	ldr	r3, [pc, #120]	; (800490c <netif_add+0x174>)
 8004894:	f240 128d 	movw	r2, #397	; 0x18d
 8004898:	4925      	ldr	r1, [pc, #148]	; (8004930 <netif_add+0x198>)
 800489a:	481e      	ldr	r0, [pc, #120]	; (8004914 <netif_add+0x17c>)
 800489c:	f009 fca8 	bl	800e1f0 <iprintf>
        if (netif2->num == netif->num) {
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d108      	bne.n	80048c2 <netif_add+0x12a>
          netif->num++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048b6:	3301      	adds	r3, #1
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80048c0:	e005      	b.n	80048ce <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1d0      	bne.n	8004870 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1be      	bne.n	8004852 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048da:	2bfe      	cmp	r3, #254	; 0xfe
 80048dc:	d103      	bne.n	80048e6 <netif_add+0x14e>
    netif_num = 0;
 80048de:	4b11      	ldr	r3, [pc, #68]	; (8004924 <netif_add+0x18c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e006      	b.n	80048f4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ec:	3301      	adds	r3, #1
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <netif_add+0x18c>)
 80048f2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <netif_add+0x190>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80048fc:	4a0a      	ldr	r2, [pc, #40]	; (8004928 <netif_add+0x190>)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	0800f414 	.word	0x0800f414
 8004910:	0800f4a8 	.word	0x0800f4a8
 8004914:	0800f464 	.word	0x0800f464
 8004918:	0800f4c4 	.word	0x0800f4c4
 800491c:	08011b44 	.word	0x08011b44
 8004920:	08004d43 	.word	0x08004d43
 8004924:	2000a440 	.word	0x2000a440
 8004928:	2000a438 	.word	0x2000a438
 800492c:	0800f4e8 	.word	0x0800f4e8
 8004930:	0800f4fc 	.word	0x0800f4fc

08004934 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800493e:	6839      	ldr	r1, [r7, #0]
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f002 fbe5 	bl	8007110 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f007 f85b 	bl	800ba04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <netif_do_set_ipaddr+0x20>
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <netif_do_set_ipaddr+0x88>)
 800496c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004970:	491c      	ldr	r1, [pc, #112]	; (80049e4 <netif_do_set_ipaddr+0x8c>)
 8004972:	481d      	ldr	r0, [pc, #116]	; (80049e8 <netif_do_set_ipaddr+0x90>)
 8004974:	f009 fc3c 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <netif_do_set_ipaddr+0x34>
 800497e:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <netif_do_set_ipaddr+0x88>)
 8004980:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004984:	4917      	ldr	r1, [pc, #92]	; (80049e4 <netif_do_set_ipaddr+0x8c>)
 8004986:	4818      	ldr	r0, [pc, #96]	; (80049e8 <netif_do_set_ipaddr+0x90>)
 8004988:	f009 fc32 	bl	800e1f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3304      	adds	r3, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d01c      	beq.n	80049d4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3304      	adds	r3, #4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ffbf 	bl	8004934 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <netif_do_set_ipaddr+0x6a>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	e000      	b.n	80049c4 <netif_do_set_ipaddr+0x6c>
 80049c2:	2300      	movs	r3, #0
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80049c8:	2101      	movs	r1, #1
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f8d2 	bl	8004b74 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	0800f414 	.word	0x0800f414
 80049e4:	0800f52c 	.word	0x0800f52c
 80049e8:	0800f464 	.word	0x0800f464

080049ec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3308      	adds	r3, #8
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d00a      	beq.n	8004a1c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <netif_do_set_netmask+0x26>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	e000      	b.n	8004a14 <netif_do_set_netmask+0x28>
 8004a12:	2300      	movs	r3, #0
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d00a      	beq.n	8004a5a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <netif_do_set_gw+0x26>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	e000      	b.n	8004a52 <netif_do_set_gw+0x28>
 8004a50:	2300      	movs	r3, #0
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004a84:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <netif_set_addr+0x90>)
 8004a86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004a8e:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <netif_set_addr+0x90>)
 8004a90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004a98:	4b17      	ldr	r3, [pc, #92]	; (8004af8 <netif_set_addr+0x90>)
 8004a9a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <netif_set_addr+0x42>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <netif_set_addr+0x46>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <netif_set_addr+0x48>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d006      	beq.n	8004ac6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004ab8:	f107 0310 	add.w	r3, r7, #16
 8004abc:	461a      	mov	r2, r3
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7ff ff49 	bl	8004958 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ff8e 	bl	80049ec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ffa8 	bl	8004a2a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004ae0:	f107 0310 	add.w	r3, r7, #16
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff ff35 	bl	8004958 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004aee:	bf00      	nop
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	08011b44 	.word	0x08011b44

08004afc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <netif_set_default+0x1c>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	2000a43c 	.word	0x2000a43c

08004b1c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <netif_set_up+0x1e>
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <netif_set_up+0x4c>)
 8004b2c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004b30:	490e      	ldr	r1, [pc, #56]	; (8004b6c <netif_set_up+0x50>)
 8004b32:	480f      	ldr	r0, [pc, #60]	; (8004b70 <netif_set_up+0x54>)
 8004b34:	f009 fb5c 	bl	800e1f0 <iprintf>
 8004b38:	e013      	b.n	8004b62 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10c      	bne.n	8004b62 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b4e:	f043 0301 	orr.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004b5a:	2103      	movs	r1, #3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f809 	bl	8004b74 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	0800f414 	.word	0x0800f414
 8004b6c:	0800f59c 	.word	0x0800f59c
 8004b70:	0800f464 	.word	0x0800f464

08004b74 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <netif_issue_reports+0x20>
 8004b86:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <netif_issue_reports+0x74>)
 8004b88:	f240 326d 	movw	r2, #877	; 0x36d
 8004b8c:	4917      	ldr	r1, [pc, #92]	; (8004bec <netif_issue_reports+0x78>)
 8004b8e:	4818      	ldr	r0, [pc, #96]	; (8004bf0 <netif_issue_reports+0x7c>)
 8004b90:	f009 fb2e 	bl	800e1f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01e      	beq.n	8004be0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ba8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d013      	beq.n	8004be2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00e      	beq.n	8004be2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f007 fe7d 	bl	800c8d8 <etharp_request>
 8004bde:	e000      	b.n	8004be2 <netif_issue_reports+0x6e>
    return;
 8004be0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	0800f414 	.word	0x0800f414
 8004bec:	0800f5b8 	.word	0x0800f5b8
 8004bf0:	0800f464 	.word	0x0800f464

08004bf4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d107      	bne.n	8004c12 <netif_set_down+0x1e>
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <netif_set_down+0x58>)
 8004c04:	f240 329b 	movw	r2, #923	; 0x39b
 8004c08:	4911      	ldr	r1, [pc, #68]	; (8004c50 <netif_set_down+0x5c>)
 8004c0a:	4812      	ldr	r0, [pc, #72]	; (8004c54 <netif_set_down+0x60>)
 8004c0c:	f009 faf0 	bl	800e1f0 <iprintf>
 8004c10:	e019      	b.n	8004c46 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d012      	beq.n	8004c46 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f007 fa07 	bl	800c054 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0800f414 	.word	0x0800f414
 8004c50:	0800f5dc 	.word	0x0800f5dc
 8004c54:	0800f464 	.word	0x0800f464

08004c58 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <netif_set_link_up+0x1e>
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <netif_set_link_up+0x5c>)
 8004c68:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004c6c:	4912      	ldr	r1, [pc, #72]	; (8004cb8 <netif_set_link_up+0x60>)
 8004c6e:	4813      	ldr	r0, [pc, #76]	; (8004cbc <netif_set_link_up+0x64>)
 8004c70:	f009 fabe 	bl	800e1f0 <iprintf>
 8004c74:	e01b      	b.n	8004cae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d114      	bne.n	8004cae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c8a:	f043 0304 	orr.w	r3, r3, #4
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004c96:	2103      	movs	r1, #3
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff6b 	bl	8004b74 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <netif_set_link_up+0x56>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	0800f414 	.word	0x0800f414
 8004cb8:	0800f5fc 	.word	0x0800f5fc
 8004cbc:	0800f464 	.word	0x0800f464

08004cc0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <netif_set_link_down+0x1e>
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <netif_set_link_down+0x54>)
 8004cd0:	f240 4206 	movw	r2, #1030	; 0x406
 8004cd4:	4910      	ldr	r1, [pc, #64]	; (8004d18 <netif_set_link_down+0x58>)
 8004cd6:	4811      	ldr	r0, [pc, #68]	; (8004d1c <netif_set_link_down+0x5c>)
 8004cd8:	f009 fa8a 	bl	800e1f0 <iprintf>
 8004cdc:	e017      	b.n	8004d0e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cf2:	f023 0304 	bic.w	r3, r3, #4
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <netif_set_link_down+0x4e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	0800f414 	.word	0x0800f414
 8004d18:	0800f620 	.word	0x0800f620
 8004d1c:	0800f464 	.word	0x0800f464

08004d20 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	61da      	str	r2, [r3, #28]
  }
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004d4e:	f06f 030b 	mvn.w	r3, #11
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <netif_get_by_index+0x48>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e00c      	b.n	8004d92 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d7e:	3301      	adds	r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	79fa      	ldrb	r2, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d101      	bne.n	8004d8c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	e006      	b.n	8004d9a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1ef      	bne.n	8004d78 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	2000a438 	.word	0x2000a438

08004dac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <pbuf_free_ooseq+0x38>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <pbuf_free_ooseq+0x3c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	e00a      	b.n	8004dd6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f002 f9df 	bl	800718c <tcp_free_ooseq>
      return;
 8004dce:	e005      	b.n	8004ddc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f1      	bne.n	8004dc0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000a441 	.word	0x2000a441
 8004de8:	2000a450 	.word	0x2000a450

08004dec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <pbuf_pool_is_empty+0x14>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004df6:	bf00      	nop
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	2000a441 	.word	0x2000a441

08004e04 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	461a      	mov	r2, r3
 8004e12:	460b      	mov	r3, r1
 8004e14:	80fb      	strh	r3, [r7, #6]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88ba      	ldrh	r2, [r7, #4]
 8004e30:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004e32:	8b3b      	ldrh	r3, [r7, #24]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	7f3a      	ldrb	r2, [r7, #28]
 8004e3e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	73da      	strb	r2, [r3, #15]
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71fb      	strb	r3, [r7, #7]
 8004e62:	460b      	mov	r3, r1
 8004e64:	80bb      	strh	r3, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004e6a:	79fb      	ldrb	r3, [r7, #7]
 8004e6c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004e74:	d07f      	beq.n	8004f76 <pbuf_alloc+0x11e>
 8004e76:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004e7a:	f300 80c8 	bgt.w	800500e <pbuf_alloc+0x1b6>
 8004e7e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004e82:	d010      	beq.n	8004ea6 <pbuf_alloc+0x4e>
 8004e84:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004e88:	f300 80c1 	bgt.w	800500e <pbuf_alloc+0x1b6>
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d002      	beq.n	8004e96 <pbuf_alloc+0x3e>
 8004e90:	2b41      	cmp	r3, #65	; 0x41
 8004e92:	f040 80bc 	bne.w	800500e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	88bb      	ldrh	r3, [r7, #4]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f000 f8d1 	bl	8005044 <pbuf_alloc_reference>
 8004ea2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004ea4:	e0bd      	b.n	8005022 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004eae:	88bb      	ldrh	r3, [r7, #4]
 8004eb0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004eb2:	2008      	movs	r0, #8
 8004eb4:	f7ff fbce 	bl	8004654 <memp_malloc>
 8004eb8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004ec0:	f7ff ff94 	bl	8004dec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ecc:	f000 faa8 	bl	8005420 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e0a7      	b.n	8005024 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ed6:	3303      	adds	r3, #3
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8b7a      	ldrh	r2, [r7, #26]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	bf28      	it	cs
 8004eec:	4613      	movcs	r3, r2
 8004eee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3303      	adds	r3, #3
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	4618      	mov	r0, r3
 8004f00:	89f9      	ldrh	r1, [r7, #14]
 8004f02:	8b7a      	ldrh	r2, [r7, #26]
 8004f04:	2300      	movs	r3, #0
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	887b      	ldrh	r3, [r7, #2]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4601      	mov	r1, r0
 8004f10:	6938      	ldr	r0, [r7, #16]
 8004f12:	f7ff ff77 	bl	8004e04 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d006      	beq.n	8004f30 <pbuf_alloc+0xd8>
 8004f22:	4b42      	ldr	r3, [pc, #264]	; (800502c <pbuf_alloc+0x1d4>)
 8004f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f28:	4941      	ldr	r1, [pc, #260]	; (8005030 <pbuf_alloc+0x1d8>)
 8004f2a:	4842      	ldr	r0, [pc, #264]	; (8005034 <pbuf_alloc+0x1dc>)
 8004f2c:	f009 f960 	bl	800e1f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f32:	3303      	adds	r3, #3
 8004f34:	f023 0303 	bic.w	r3, r3, #3
 8004f38:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004f3c:	d106      	bne.n	8004f4c <pbuf_alloc+0xf4>
 8004f3e:	4b3b      	ldr	r3, [pc, #236]	; (800502c <pbuf_alloc+0x1d4>)
 8004f40:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004f44:	493c      	ldr	r1, [pc, #240]	; (8005038 <pbuf_alloc+0x1e0>)
 8004f46:	483b      	ldr	r0, [pc, #236]	; (8005034 <pbuf_alloc+0x1dc>)
 8004f48:	f009 f952 	bl	800e1f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
 8004f56:	e002      	b.n	8004f5e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004f62:	8b7a      	ldrh	r2, [r7, #26]
 8004f64:	89fb      	ldrh	r3, [r7, #14]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004f6e:	8b7b      	ldrh	r3, [r7, #26]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d19e      	bne.n	8004eb2 <pbuf_alloc+0x5a>
      break;
 8004f74:	e055      	b.n	8005022 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f78:	3303      	adds	r3, #3
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f023 0303 	bic.w	r3, r3, #3
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	88bb      	ldrh	r3, [r7, #4]
 8004f84:	3303      	adds	r3, #3
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f023 0303 	bic.w	r3, r3, #3
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004f92:	8b3b      	ldrh	r3, [r7, #24]
 8004f94:	3310      	adds	r3, #16
 8004f96:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004f98:	8b3a      	ldrh	r2, [r7, #24]
 8004f9a:	88bb      	ldrh	r3, [r7, #4]
 8004f9c:	3303      	adds	r3, #3
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d306      	bcc.n	8004fb4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004fa6:	8afa      	ldrh	r2, [r7, #22]
 8004fa8:	88bb      	ldrh	r3, [r7, #4]
 8004faa:	3303      	adds	r3, #3
 8004fac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d201      	bcs.n	8004fb8 <pbuf_alloc+0x160>
        return NULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e035      	b.n	8005024 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004fb8:	8afb      	ldrh	r3, [r7, #22]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff f9ba 	bl	8004334 <mem_malloc>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <pbuf_alloc+0x174>
        return NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e02b      	b.n	8005024 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fce:	3310      	adds	r3, #16
 8004fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3303      	adds	r3, #3
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	4618      	mov	r0, r3
 8004fdc:	88b9      	ldrh	r1, [r7, #4]
 8004fde:	88ba      	ldrh	r2, [r7, #4]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	887b      	ldrh	r3, [r7, #2]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4601      	mov	r1, r0
 8004fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fee:	f7ff ff09 	bl	8004e04 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d010      	beq.n	8005020 <pbuf_alloc+0x1c8>
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <pbuf_alloc+0x1d4>)
 8005000:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005004:	490d      	ldr	r1, [pc, #52]	; (800503c <pbuf_alloc+0x1e4>)
 8005006:	480b      	ldr	r0, [pc, #44]	; (8005034 <pbuf_alloc+0x1dc>)
 8005008:	f009 f8f2 	bl	800e1f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800500c:	e008      	b.n	8005020 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800500e:	4b07      	ldr	r3, [pc, #28]	; (800502c <pbuf_alloc+0x1d4>)
 8005010:	f240 1227 	movw	r2, #295	; 0x127
 8005014:	490a      	ldr	r1, [pc, #40]	; (8005040 <pbuf_alloc+0x1e8>)
 8005016:	4807      	ldr	r0, [pc, #28]	; (8005034 <pbuf_alloc+0x1dc>)
 8005018:	f009 f8ea 	bl	800e1f0 <iprintf>
      return NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	e001      	b.n	8005024 <pbuf_alloc+0x1cc>
      break;
 8005020:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005024:	4618      	mov	r0, r3
 8005026:	3728      	adds	r7, #40	; 0x28
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	0800f644 	.word	0x0800f644
 8005030:	0800f674 	.word	0x0800f674
 8005034:	0800f6a4 	.word	0x0800f6a4
 8005038:	0800f6cc 	.word	0x0800f6cc
 800503c:	0800f700 	.word	0x0800f700
 8005040:	0800f72c 	.word	0x0800f72c

08005044 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
 8005050:	4613      	mov	r3, r2
 8005052:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005054:	883b      	ldrh	r3, [r7, #0]
 8005056:	2b41      	cmp	r3, #65	; 0x41
 8005058:	d009      	beq.n	800506e <pbuf_alloc_reference+0x2a>
 800505a:	883b      	ldrh	r3, [r7, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d006      	beq.n	800506e <pbuf_alloc_reference+0x2a>
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <pbuf_alloc_reference+0x5c>)
 8005062:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005066:	490f      	ldr	r1, [pc, #60]	; (80050a4 <pbuf_alloc_reference+0x60>)
 8005068:	480f      	ldr	r0, [pc, #60]	; (80050a8 <pbuf_alloc_reference+0x64>)
 800506a:	f009 f8c1 	bl	800e1f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800506e:	2007      	movs	r0, #7
 8005070:	f7ff faf0 	bl	8004654 <memp_malloc>
 8005074:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	e00b      	b.n	8005098 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005080:	8879      	ldrh	r1, [r7, #2]
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	2300      	movs	r3, #0
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	883b      	ldrh	r3, [r7, #0]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	460b      	mov	r3, r1
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7ff feb7 	bl	8004e04 <pbuf_init_alloced_pbuf>
  return p;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	0800f644 	.word	0x0800f644
 80050a4:	0800f748 	.word	0x0800f748
 80050a8:	0800f6a4 	.word	0x0800f6a4

080050ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	460b      	mov	r3, r1
 80050ba:	81bb      	strh	r3, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80050c4:	8a7b      	ldrh	r3, [r7, #18]
 80050c6:	3303      	adds	r3, #3
 80050c8:	f023 0203 	bic.w	r2, r3, #3
 80050cc:	89bb      	ldrh	r3, [r7, #12]
 80050ce:	441a      	add	r2, r3
 80050d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d901      	bls.n	80050da <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e018      	b.n	800510c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80050e0:	8a7b      	ldrh	r3, [r7, #18]
 80050e2:	3303      	adds	r3, #3
 80050e4:	f023 0303 	bic.w	r3, r3, #3
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	4413      	add	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e001      	b.n	80050f4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	89b9      	ldrh	r1, [r7, #12]
 80050f8:	89ba      	ldrh	r2, [r7, #12]
 80050fa:	2302      	movs	r3, #2
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	460b      	mov	r3, r1
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	f7ff fe7d 	bl	8004e04 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800510a:	687b      	ldr	r3, [r7, #4]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <pbuf_realloc+0x20>
 8005126:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <pbuf_realloc+0xfc>)
 8005128:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800512c:	4939      	ldr	r1, [pc, #228]	; (8005214 <pbuf_realloc+0x100>)
 800512e:	483a      	ldr	r0, [pc, #232]	; (8005218 <pbuf_realloc+0x104>)
 8005130:	f009 f85e 	bl	800e1f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	891b      	ldrh	r3, [r3, #8]
 8005138:	887a      	ldrh	r2, [r7, #2]
 800513a:	429a      	cmp	r2, r3
 800513c:	d263      	bcs.n	8005206 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	891a      	ldrh	r2, [r3, #8]
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005148:	887b      	ldrh	r3, [r7, #2]
 800514a:	817b      	strh	r3, [r7, #10]
  q = p;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005150:	e018      	b.n	8005184 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	895b      	ldrh	r3, [r3, #10]
 8005156:	897a      	ldrh	r2, [r7, #10]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	891a      	ldrh	r2, [r3, #8]
 8005160:	893b      	ldrh	r3, [r7, #8]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <pbuf_realloc+0x70>
 8005176:	4b26      	ldr	r3, [pc, #152]	; (8005210 <pbuf_realloc+0xfc>)
 8005178:	f240 12af 	movw	r2, #431	; 0x1af
 800517c:	4927      	ldr	r1, [pc, #156]	; (800521c <pbuf_realloc+0x108>)
 800517e:	4826      	ldr	r0, [pc, #152]	; (8005218 <pbuf_realloc+0x104>)
 8005180:	f009 f836 	bl	800e1f0 <iprintf>
  while (rem_len > q->len) {
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	895b      	ldrh	r3, [r3, #10]
 8005188:	897a      	ldrh	r2, [r7, #10]
 800518a:	429a      	cmp	r2, r3
 800518c:	d8e1      	bhi.n	8005152 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	7b1b      	ldrb	r3, [r3, #12]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	2b00      	cmp	r3, #0
 8005198:	d121      	bne.n	80051de <pbuf_realloc+0xca>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	895b      	ldrh	r3, [r3, #10]
 800519e:	897a      	ldrh	r2, [r7, #10]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d01c      	beq.n	80051de <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	7b5b      	ldrb	r3, [r3, #13]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d116      	bne.n	80051de <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	897b      	ldrh	r3, [r7, #10]
 80051bc:	4413      	add	r3, r2
 80051be:	b29b      	uxth	r3, r3
 80051c0:	4619      	mov	r1, r3
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7fe ffba 	bl	800413c <mem_trim>
 80051c8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <pbuf_realloc+0xca>
 80051d0:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <pbuf_realloc+0xfc>)
 80051d2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80051d6:	4912      	ldr	r1, [pc, #72]	; (8005220 <pbuf_realloc+0x10c>)
 80051d8:	480f      	ldr	r0, [pc, #60]	; (8005218 <pbuf_realloc+0x104>)
 80051da:	f009 f809 	bl	800e1f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	897a      	ldrh	r2, [r7, #10]
 80051e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	895a      	ldrh	r2, [r3, #10]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 f911 	bl	8005420 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e000      	b.n	8005208 <pbuf_realloc+0xf4>
    return;
 8005206:	bf00      	nop

}
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	0800f644 	.word	0x0800f644
 8005214:	0800f75c 	.word	0x0800f75c
 8005218:	0800f6a4 	.word	0x0800f6a4
 800521c:	0800f774 	.word	0x0800f774
 8005220:	0800f78c 	.word	0x0800f78c

08005224 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <pbuf_add_header_impl+0x22>
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <pbuf_add_header_impl+0xc4>)
 800523a:	f240 12df 	movw	r2, #479	; 0x1df
 800523e:	492b      	ldr	r1, [pc, #172]	; (80052ec <pbuf_add_header_impl+0xc8>)
 8005240:	482b      	ldr	r0, [pc, #172]	; (80052f0 <pbuf_add_header_impl+0xcc>)
 8005242:	f008 ffd5 	bl	800e1f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <pbuf_add_header_impl+0x30>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005252:	d301      	bcc.n	8005258 <pbuf_add_header_impl+0x34>
    return 1;
 8005254:	2301      	movs	r3, #1
 8005256:	e043      	b.n	80052e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <pbuf_add_header_impl+0x3e>
    return 0;
 800525e:	2300      	movs	r3, #0
 8005260:	e03e      	b.n	80052e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	891a      	ldrh	r2, [r3, #8]
 800526a:	8a7b      	ldrh	r3, [r7, #18]
 800526c:	4413      	add	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	8a7a      	ldrh	r2, [r7, #18]
 8005272:	429a      	cmp	r2, r3
 8005274:	d901      	bls.n	800527a <pbuf_add_header_impl+0x56>
    return 1;
 8005276:	2301      	movs	r3, #1
 8005278:	e032      	b.n	80052e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	7b1b      	ldrb	r3, [r3, #12]
 800527e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005280:	8a3b      	ldrh	r3, [r7, #16]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	425b      	negs	r3, r3
 8005292:	4413      	add	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3310      	adds	r3, #16
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	429a      	cmp	r2, r3
 800529e:	d20d      	bcs.n	80052bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e01d      	b.n	80052e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d006      	beq.n	80052b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	425b      	negs	r3, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e001      	b.n	80052bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e011      	b.n	80052e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	895a      	ldrh	r2, [r3, #10]
 80052c6:	8a7b      	ldrh	r3, [r7, #18]
 80052c8:	4413      	add	r3, r2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	891a      	ldrh	r2, [r3, #8]
 80052d4:	8a7b      	ldrh	r3, [r7, #18]
 80052d6:	4413      	add	r3, r2
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	811a      	strh	r2, [r3, #8]


  return 0;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	0800f644 	.word	0x0800f644
 80052ec:	0800f7a8 	.word	0x0800f7a8
 80052f0:	0800f6a4 	.word	0x0800f6a4

080052f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80052fe:	2200      	movs	r2, #0
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff ff8e 	bl	8005224 <pbuf_add_header_impl>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <pbuf_remove_header+0x1e>
 8005324:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <pbuf_remove_header+0x94>)
 8005326:	f240 224b 	movw	r2, #587	; 0x24b
 800532a:	4920      	ldr	r1, [pc, #128]	; (80053ac <pbuf_remove_header+0x98>)
 800532c:	4820      	ldr	r0, [pc, #128]	; (80053b0 <pbuf_remove_header+0x9c>)
 800532e:	f008 ff5f 	bl	800e1f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <pbuf_remove_header+0x2c>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533e:	d301      	bcc.n	8005344 <pbuf_remove_header+0x30>
    return 1;
 8005340:	2301      	movs	r3, #1
 8005342:	e02c      	b.n	800539e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <pbuf_remove_header+0x3a>
    return 0;
 800534a:	2300      	movs	r3, #0
 800534c:	e027      	b.n	800539e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	895b      	ldrh	r3, [r3, #10]
 8005356:	89fa      	ldrh	r2, [r7, #14]
 8005358:	429a      	cmp	r2, r3
 800535a:	d908      	bls.n	800536e <pbuf_remove_header+0x5a>
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <pbuf_remove_header+0x94>)
 800535e:	f240 2255 	movw	r2, #597	; 0x255
 8005362:	4914      	ldr	r1, [pc, #80]	; (80053b4 <pbuf_remove_header+0xa0>)
 8005364:	4812      	ldr	r0, [pc, #72]	; (80053b0 <pbuf_remove_header+0x9c>)
 8005366:	f008 ff43 	bl	800e1f0 <iprintf>
 800536a:	2301      	movs	r3, #1
 800536c:	e017      	b.n	800539e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	441a      	add	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	895a      	ldrh	r2, [r3, #10]
 8005384:	89fb      	ldrh	r3, [r7, #14]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	891a      	ldrh	r2, [r3, #8]
 8005392:	89fb      	ldrh	r3, [r7, #14]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b29a      	uxth	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	0800f644 	.word	0x0800f644
 80053ac:	0800f7a8 	.word	0x0800f7a8
 80053b0:	0800f6a4 	.word	0x0800f6a4
 80053b4:	0800f7b4 	.word	0x0800f7b4

080053b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	807b      	strh	r3, [r7, #2]
 80053c4:	4613      	mov	r3, r2
 80053c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80053c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	da08      	bge.n	80053e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80053d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053d4:	425b      	negs	r3, r3
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff9b 	bl	8005314 <pbuf_remove_header>
 80053de:	4603      	mov	r3, r0
 80053e0:	e007      	b.n	80053f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80053e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053e6:	787a      	ldrb	r2, [r7, #1]
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff ff1a 	bl	8005224 <pbuf_add_header_impl>
 80053f0:	4603      	mov	r3, r0
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	460b      	mov	r3, r1
 8005404:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005406:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800540a:	2201      	movs	r2, #1
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ffd2 	bl	80053b8 <pbuf_header_impl>
 8005414:	4603      	mov	r3, r0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d106      	bne.n	8005442 <pbuf_free+0x22>
 8005434:	4b38      	ldr	r3, [pc, #224]	; (8005518 <pbuf_free+0xf8>)
 8005436:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800543a:	4938      	ldr	r1, [pc, #224]	; (800551c <pbuf_free+0xfc>)
 800543c:	4838      	ldr	r0, [pc, #224]	; (8005520 <pbuf_free+0x100>)
 800543e:	f008 fed7 	bl	800e1f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005442:	2300      	movs	r3, #0
 8005444:	e063      	b.n	800550e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800544a:	e05c      	b.n	8005506 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	7b9b      	ldrb	r3, [r3, #14]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <pbuf_free+0x42>
 8005454:	4b30      	ldr	r3, [pc, #192]	; (8005518 <pbuf_free+0xf8>)
 8005456:	f240 22f1 	movw	r2, #753	; 0x2f1
 800545a:	4932      	ldr	r1, [pc, #200]	; (8005524 <pbuf_free+0x104>)
 800545c:	4830      	ldr	r0, [pc, #192]	; (8005520 <pbuf_free+0x100>)
 800545e:	f008 fec7 	bl	800e1f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7b9b      	ldrb	r3, [r3, #14]
 8005466:	3b01      	subs	r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	739a      	strb	r2, [r3, #14]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	7b9b      	ldrb	r3, [r3, #14]
 8005472:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005474:	7dbb      	ldrb	r3, [r7, #22]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d143      	bne.n	8005502 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	7b1b      	ldrb	r3, [r3, #12]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7b5b      	ldrb	r3, [r3, #13]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d011      	beq.n	80054ba <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <pbuf_free+0x90>
 80054a2:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <pbuf_free+0xf8>)
 80054a4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80054a8:	491f      	ldr	r1, [pc, #124]	; (8005528 <pbuf_free+0x108>)
 80054aa:	481d      	ldr	r0, [pc, #116]	; (8005520 <pbuf_free+0x100>)
 80054ac:	f008 fea0 	bl	800e1f0 <iprintf>
        pc->custom_free_function(p);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
 80054b8:	e01d      	b.n	80054f6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d104      	bne.n	80054ca <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	2008      	movs	r0, #8
 80054c4:	f7ff f936 	bl	8004734 <memp_free>
 80054c8:	e015      	b.n	80054f6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d104      	bne.n	80054da <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	2007      	movs	r0, #7
 80054d4:	f7ff f92e 	bl	8004734 <memp_free>
 80054d8:	e00d      	b.n	80054f6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <pbuf_free+0xc8>
          mem_free(p);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fe fdc1 	bl	8004068 <mem_free>
 80054e6:	e006      	b.n	80054f6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <pbuf_free+0xf8>)
 80054ea:	f240 320f 	movw	r2, #783	; 0x30f
 80054ee:	490f      	ldr	r1, [pc, #60]	; (800552c <pbuf_free+0x10c>)
 80054f0:	480b      	ldr	r0, [pc, #44]	; (8005520 <pbuf_free+0x100>)
 80054f2:	f008 fe7d 	bl	800e1f0 <iprintf>
        }
      }
      count++;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	3301      	adds	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	607b      	str	r3, [r7, #4]
 8005500:	e001      	b.n	8005506 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d19f      	bne.n	800544c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	0800f644 	.word	0x0800f644
 800551c:	0800f7a8 	.word	0x0800f7a8
 8005520:	0800f6a4 	.word	0x0800f6a4
 8005524:	0800f7d4 	.word	0x0800f7d4
 8005528:	0800f7ec 	.word	0x0800f7ec
 800552c:	0800f810 	.word	0x0800f810

08005530 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800553c:	e005      	b.n	800554a <pbuf_clen+0x1a>
    ++len;
 800553e:	89fb      	ldrh	r3, [r7, #14]
 8005540:	3301      	adds	r3, #1
 8005542:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f6      	bne.n	800553e <pbuf_clen+0xe>
  }
  return len;
 8005550:	89fb      	ldrh	r3, [r7, #14]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	7b9b      	ldrb	r3, [r3, #14]
 8005572:	3301      	adds	r3, #1
 8005574:	b2da      	uxtb	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	7b9b      	ldrb	r3, [r3, #14]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <pbuf_ref+0x30>
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <pbuf_ref+0x38>)
 8005584:	f240 3242 	movw	r2, #834	; 0x342
 8005588:	4904      	ldr	r1, [pc, #16]	; (800559c <pbuf_ref+0x3c>)
 800558a:	4805      	ldr	r0, [pc, #20]	; (80055a0 <pbuf_ref+0x40>)
 800558c:	f008 fe30 	bl	800e1f0 <iprintf>
  }
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	0800f644 	.word	0x0800f644
 800559c:	0800f824 	.word	0x0800f824
 80055a0:	0800f6a4 	.word	0x0800f6a4

080055a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <pbuf_cat+0x16>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <pbuf_cat+0x26>
 80055ba:	4b20      	ldr	r3, [pc, #128]	; (800563c <pbuf_cat+0x98>)
 80055bc:	f240 3259 	movw	r2, #857	; 0x359
 80055c0:	491f      	ldr	r1, [pc, #124]	; (8005640 <pbuf_cat+0x9c>)
 80055c2:	4820      	ldr	r0, [pc, #128]	; (8005644 <pbuf_cat+0xa0>)
 80055c4:	f008 fe14 	bl	800e1f0 <iprintf>
 80055c8:	e034      	b.n	8005634 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e00a      	b.n	80055e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	891a      	ldrh	r2, [r3, #8]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	891b      	ldrh	r3, [r3, #8]
 80055d8:	4413      	add	r3, r2
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	891a      	ldrh	r2, [r3, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	895b      	ldrh	r3, [r3, #10]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d006      	beq.n	8005608 <pbuf_cat+0x64>
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <pbuf_cat+0x98>)
 80055fc:	f240 3262 	movw	r2, #866	; 0x362
 8005600:	4911      	ldr	r1, [pc, #68]	; (8005648 <pbuf_cat+0xa4>)
 8005602:	4810      	ldr	r0, [pc, #64]	; (8005644 <pbuf_cat+0xa0>)
 8005604:	f008 fdf4 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d006      	beq.n	800561e <pbuf_cat+0x7a>
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <pbuf_cat+0x98>)
 8005612:	f240 3263 	movw	r2, #867	; 0x363
 8005616:	490d      	ldr	r1, [pc, #52]	; (800564c <pbuf_cat+0xa8>)
 8005618:	480a      	ldr	r0, [pc, #40]	; (8005644 <pbuf_cat+0xa0>)
 800561a:	f008 fde9 	bl	800e1f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	891a      	ldrh	r2, [r3, #8]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	891b      	ldrh	r3, [r3, #8]
 8005626:	4413      	add	r3, r2
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	0800f644 	.word	0x0800f644
 8005640:	0800f838 	.word	0x0800f838
 8005644:	0800f6a4 	.word	0x0800f6a4
 8005648:	0800f870 	.word	0x0800f870
 800564c:	0800f8a0 	.word	0x0800f8a0

08005650 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ffa1 	bl	80055a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005662:	6838      	ldr	r0, [r7, #0]
 8005664:	f7ff ff7c 	bl	8005560 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <pbuf_copy+0x2a>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <pbuf_copy+0x2a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	891a      	ldrh	r2, [r3, #8]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	891b      	ldrh	r3, [r3, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	d209      	bcs.n	80056ae <pbuf_copy+0x3e>
 800569a:	4b57      	ldr	r3, [pc, #348]	; (80057f8 <pbuf_copy+0x188>)
 800569c:	f240 32c9 	movw	r2, #969	; 0x3c9
 80056a0:	4956      	ldr	r1, [pc, #344]	; (80057fc <pbuf_copy+0x18c>)
 80056a2:	4857      	ldr	r0, [pc, #348]	; (8005800 <pbuf_copy+0x190>)
 80056a4:	f008 fda4 	bl	800e1f0 <iprintf>
 80056a8:	f06f 030f 	mvn.w	r3, #15
 80056ac:	e09f      	b.n	80057ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	895b      	ldrh	r3, [r3, #10]
 80056b2:	461a      	mov	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	895b      	ldrh	r3, [r3, #10]
 80056bc:	4619      	mov	r1, r3
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1acb      	subs	r3, r1, r3
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d306      	bcc.n	80056d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	895b      	ldrh	r3, [r3, #10]
 80056ca:	461a      	mov	r2, r3
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e005      	b.n	80056e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	895b      	ldrh	r3, [r3, #10]
 80056d8:	461a      	mov	r2, r3
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	18d0      	adds	r0, r2, r3
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4619      	mov	r1, r3
 80056f4:	f008 fe57 	bl	800e3a6 <memcpy>
    offset_to += len;
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	895b      	ldrh	r3, [r3, #10]
 800570c:	461a      	mov	r2, r3
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	4293      	cmp	r3, r2
 8005712:	d906      	bls.n	8005722 <pbuf_copy+0xb2>
 8005714:	4b38      	ldr	r3, [pc, #224]	; (80057f8 <pbuf_copy+0x188>)
 8005716:	f240 32d9 	movw	r2, #985	; 0x3d9
 800571a:	493a      	ldr	r1, [pc, #232]	; (8005804 <pbuf_copy+0x194>)
 800571c:	4838      	ldr	r0, [pc, #224]	; (8005800 <pbuf_copy+0x190>)
 800571e:	f008 fd67 	bl	800e1f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	895b      	ldrh	r3, [r3, #10]
 8005726:	461a      	mov	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4293      	cmp	r3, r2
 800572c:	d906      	bls.n	800573c <pbuf_copy+0xcc>
 800572e:	4b32      	ldr	r3, [pc, #200]	; (80057f8 <pbuf_copy+0x188>)
 8005730:	f240 32da 	movw	r2, #986	; 0x3da
 8005734:	4934      	ldr	r1, [pc, #208]	; (8005808 <pbuf_copy+0x198>)
 8005736:	4832      	ldr	r0, [pc, #200]	; (8005800 <pbuf_copy+0x190>)
 8005738:	f008 fd5a 	bl	800e1f0 <iprintf>
    if (offset_from >= p_from->len) {
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	895b      	ldrh	r3, [r3, #10]
 8005740:	461a      	mov	r2, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4293      	cmp	r3, r2
 8005746:	d304      	bcc.n	8005752 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	895b      	ldrh	r3, [r3, #10]
 8005756:	461a      	mov	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4293      	cmp	r3, r2
 800575c:	d114      	bne.n	8005788 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10c      	bne.n	8005788 <pbuf_copy+0x118>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <pbuf_copy+0x118>
 8005774:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <pbuf_copy+0x188>)
 8005776:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800577a:	4924      	ldr	r1, [pc, #144]	; (800580c <pbuf_copy+0x19c>)
 800577c:	4820      	ldr	r0, [pc, #128]	; (8005800 <pbuf_copy+0x190>)
 800577e:	f008 fd37 	bl	800e1f0 <iprintf>
 8005782:	f06f 030f 	mvn.w	r3, #15
 8005786:	e032      	b.n	80057ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d013      	beq.n	80057b6 <pbuf_copy+0x146>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	895a      	ldrh	r2, [r3, #10]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	891b      	ldrh	r3, [r3, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d10d      	bne.n	80057b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <pbuf_copy+0x146>
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <pbuf_copy+0x188>)
 80057a4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80057a8:	4919      	ldr	r1, [pc, #100]	; (8005810 <pbuf_copy+0x1a0>)
 80057aa:	4815      	ldr	r0, [pc, #84]	; (8005800 <pbuf_copy+0x190>)
 80057ac:	f008 fd20 	bl	800e1f0 <iprintf>
 80057b0:	f06f 0305 	mvn.w	r3, #5
 80057b4:	e01b      	b.n	80057ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d013      	beq.n	80057e4 <pbuf_copy+0x174>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	895a      	ldrh	r2, [r3, #10]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	891b      	ldrh	r3, [r3, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d10d      	bne.n	80057e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <pbuf_copy+0x174>
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <pbuf_copy+0x188>)
 80057d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80057d6:	490e      	ldr	r1, [pc, #56]	; (8005810 <pbuf_copy+0x1a0>)
 80057d8:	4809      	ldr	r0, [pc, #36]	; (8005800 <pbuf_copy+0x190>)
 80057da:	f008 fd09 	bl	800e1f0 <iprintf>
 80057de:	f06f 0305 	mvn.w	r3, #5
 80057e2:	e004      	b.n	80057ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f47f af61 	bne.w	80056ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	0800f644 	.word	0x0800f644
 80057fc:	0800f8ec 	.word	0x0800f8ec
 8005800:	0800f6a4 	.word	0x0800f6a4
 8005804:	0800f91c 	.word	0x0800f91c
 8005808:	0800f934 	.word	0x0800f934
 800580c:	0800f950 	.word	0x0800f950
 8005810:	0800f960 	.word	0x0800f960

08005814 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	4611      	mov	r1, r2
 8005820:	461a      	mov	r2, r3
 8005822:	460b      	mov	r3, r1
 8005824:	80fb      	strh	r3, [r7, #6]
 8005826:	4613      	mov	r3, r2
 8005828:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d108      	bne.n	800584a <pbuf_copy_partial+0x36>
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <pbuf_copy_partial+0xd4>)
 800583a:	f240 420a 	movw	r2, #1034	; 0x40a
 800583e:	492b      	ldr	r1, [pc, #172]	; (80058ec <pbuf_copy_partial+0xd8>)
 8005840:	482b      	ldr	r0, [pc, #172]	; (80058f0 <pbuf_copy_partial+0xdc>)
 8005842:	f008 fcd5 	bl	800e1f0 <iprintf>
 8005846:	2300      	movs	r3, #0
 8005848:	e04a      	b.n	80058e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <pbuf_copy_partial+0x4e>
 8005850:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <pbuf_copy_partial+0xd4>)
 8005852:	f240 420b 	movw	r2, #1035	; 0x40b
 8005856:	4927      	ldr	r1, [pc, #156]	; (80058f4 <pbuf_copy_partial+0xe0>)
 8005858:	4825      	ldr	r0, [pc, #148]	; (80058f0 <pbuf_copy_partial+0xdc>)
 800585a:	f008 fcc9 	bl	800e1f0 <iprintf>
 800585e:	2300      	movs	r3, #0
 8005860:	e03e      	b.n	80058e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e034      	b.n	80058d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005868:	88bb      	ldrh	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <pbuf_copy_partial+0x70>
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	895b      	ldrh	r3, [r3, #10]
 8005872:	88ba      	ldrh	r2, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d305      	bcc.n	8005884 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	895b      	ldrh	r3, [r3, #10]
 800587c:	88ba      	ldrh	r2, [r7, #4]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	80bb      	strh	r3, [r7, #4]
 8005882:	e023      	b.n	80058cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	895a      	ldrh	r2, [r3, #10]
 8005888:	88bb      	ldrh	r3, [r7, #4]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800588e:	8b3a      	ldrh	r2, [r7, #24]
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	429a      	cmp	r2, r3
 8005894:	d901      	bls.n	800589a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005896:	88fb      	ldrh	r3, [r7, #6]
 8005898:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800589a:	8b7b      	ldrh	r3, [r7, #26]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	18d0      	adds	r0, r2, r3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	88bb      	ldrh	r3, [r7, #4]
 80058a6:	4413      	add	r3, r2
 80058a8:	8b3a      	ldrh	r2, [r7, #24]
 80058aa:	4619      	mov	r1, r3
 80058ac:	f008 fd7b 	bl	800e3a6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80058b0:	8afa      	ldrh	r2, [r7, #22]
 80058b2:	8b3b      	ldrh	r3, [r7, #24]
 80058b4:	4413      	add	r3, r2
 80058b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80058b8:	8b7a      	ldrh	r2, [r7, #26]
 80058ba:	8b3b      	ldrh	r3, [r7, #24]
 80058bc:	4413      	add	r3, r2
 80058be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	8b3b      	ldrh	r3, [r7, #24]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <pbuf_copy_partial+0xca>
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1c4      	bne.n	8005868 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80058de:	8afb      	ldrh	r3, [r7, #22]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	0800f644 	.word	0x0800f644
 80058ec:	0800f98c 	.word	0x0800f98c
 80058f0:	0800f6a4 	.word	0x0800f6a4
 80058f4:	0800f9ac 	.word	0x0800f9ac

080058f8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <pbuf_take+0x30>
 8005914:	4b3a      	ldr	r3, [pc, #232]	; (8005a00 <pbuf_take+0x108>)
 8005916:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800591a:	493a      	ldr	r1, [pc, #232]	; (8005a04 <pbuf_take+0x10c>)
 800591c:	483a      	ldr	r0, [pc, #232]	; (8005a08 <pbuf_take+0x110>)
 800591e:	f008 fc67 	bl	800e1f0 <iprintf>
 8005922:	f06f 030f 	mvn.w	r3, #15
 8005926:	e067      	b.n	80059f8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <pbuf_take+0x4a>
 800592e:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <pbuf_take+0x108>)
 8005930:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005934:	4935      	ldr	r1, [pc, #212]	; (8005a0c <pbuf_take+0x114>)
 8005936:	4834      	ldr	r0, [pc, #208]	; (8005a08 <pbuf_take+0x110>)
 8005938:	f008 fc5a 	bl	800e1f0 <iprintf>
 800593c:	f06f 030f 	mvn.w	r3, #15
 8005940:	e05a      	b.n	80059f8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	891b      	ldrh	r3, [r3, #8]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	429a      	cmp	r2, r3
 800594a:	d909      	bls.n	8005960 <pbuf_take+0x68>
 800594c:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <pbuf_take+0x108>)
 800594e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005952:	492f      	ldr	r1, [pc, #188]	; (8005a10 <pbuf_take+0x118>)
 8005954:	482c      	ldr	r0, [pc, #176]	; (8005a08 <pbuf_take+0x110>)
 8005956:	f008 fc4b 	bl	800e1f0 <iprintf>
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	e04b      	b.n	80059f8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <pbuf_take+0x7e>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d004      	beq.n	8005976 <pbuf_take+0x7e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	891b      	ldrh	r3, [r3, #8]
 8005970:	88fa      	ldrh	r2, [r7, #6]
 8005972:	429a      	cmp	r2, r3
 8005974:	d902      	bls.n	800597c <pbuf_take+0x84>
    return ERR_ARG;
 8005976:	f06f 030f 	mvn.w	r3, #15
 800597a:	e03d      	b.n	80059f8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e028      	b.n	80059d4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <pbuf_take+0x9e>
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <pbuf_take+0x108>)
 800598a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800598e:	4921      	ldr	r1, [pc, #132]	; (8005a14 <pbuf_take+0x11c>)
 8005990:	481d      	ldr	r0, [pc, #116]	; (8005a08 <pbuf_take+0x110>)
 8005992:	f008 fc2d 	bl	800e1f0 <iprintf>
    buf_copy_len = total_copy_len;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	895b      	ldrh	r3, [r3, #10]
 800599e:	461a      	mov	r2, r3
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d902      	bls.n	80059ac <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	895b      	ldrh	r3, [r3, #10]
 80059aa:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	6858      	ldr	r0, [r3, #4]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4413      	add	r3, r2
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4619      	mov	r1, r3
 80059ba:	f008 fcf4 	bl	800e3a6 <memcpy>
    total_copy_len -= buf_copy_len;
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	4413      	add	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1d3      	bne.n	8005982 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d103      	bne.n	80059e8 <pbuf_take+0xf0>
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d006      	beq.n	80059f6 <pbuf_take+0xfe>
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <pbuf_take+0x108>)
 80059ea:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80059ee:	490a      	ldr	r1, [pc, #40]	; (8005a18 <pbuf_take+0x120>)
 80059f0:	4805      	ldr	r0, [pc, #20]	; (8005a08 <pbuf_take+0x110>)
 80059f2:	f008 fbfd 	bl	800e1f0 <iprintf>
  return ERR_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	0800f644 	.word	0x0800f644
 8005a04:	0800fa1c 	.word	0x0800fa1c
 8005a08:	0800f6a4 	.word	0x0800f6a4
 8005a0c:	0800fa34 	.word	0x0800fa34
 8005a10:	0800fa50 	.word	0x0800fa50
 8005a14:	0800fa70 	.word	0x0800fa70
 8005a18:	0800fa88 	.word	0x0800fa88

08005a1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	603a      	str	r2, [r7, #0]
 8005a26:	71fb      	strb	r3, [r7, #7]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	8919      	ldrh	r1, [r3, #8]
 8005a30:	88ba      	ldrh	r2, [r7, #4]
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fa0f 	bl	8004e58 <pbuf_alloc>
 8005a3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <pbuf_clone+0x2a>
    return NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e011      	b.n	8005a6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fe11 	bl	8005670 <pbuf_copy>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005a52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <pbuf_clone+0x4c>
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <pbuf_clone+0x58>)
 8005a5c:	f240 5224 	movw	r2, #1316	; 0x524
 8005a60:	4905      	ldr	r1, [pc, #20]	; (8005a78 <pbuf_clone+0x5c>)
 8005a62:	4806      	ldr	r0, [pc, #24]	; (8005a7c <pbuf_clone+0x60>)
 8005a64:	f008 fbc4 	bl	800e1f0 <iprintf>
  return q;
 8005a68:	68fb      	ldr	r3, [r7, #12]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	0800f644 	.word	0x0800f644
 8005a78:	0800fab8 	.word	0x0800fab8
 8005a7c:	0800f6a4 	.word	0x0800f6a4

08005a80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005a84:	f008 fab4 	bl	800dff0 <rand>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	4b01      	ldr	r3, [pc, #4]	; (8005aa0 <tcp_init+0x20>)
 8005a9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005a9c:	bf00      	nop
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000020 	.word	0x20000020

08005aa4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7d1b      	ldrb	r3, [r3, #20]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d105      	bne.n	8005ac0 <tcp_free+0x1c>
 8005ab4:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <tcp_free+0x2c>)
 8005ab6:	22d4      	movs	r2, #212	; 0xd4
 8005ab8:	4906      	ldr	r1, [pc, #24]	; (8005ad4 <tcp_free+0x30>)
 8005aba:	4807      	ldr	r0, [pc, #28]	; (8005ad8 <tcp_free+0x34>)
 8005abc:	f008 fb98 	bl	800e1f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f7fe fe36 	bl	8004734 <memp_free>
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	0800fb44 	.word	0x0800fb44
 8005ad4:	0800fb74 	.word	0x0800fb74
 8005ad8:	0800fb88 	.word	0x0800fb88

08005adc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	7d1b      	ldrb	r3, [r3, #20]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <tcp_free_listen+0x1c>
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <tcp_free_listen+0x2c>)
 8005aee:	22df      	movs	r2, #223	; 0xdf
 8005af0:	4906      	ldr	r1, [pc, #24]	; (8005b0c <tcp_free_listen+0x30>)
 8005af2:	4807      	ldr	r0, [pc, #28]	; (8005b10 <tcp_free_listen+0x34>)
 8005af4:	f008 fb7c 	bl	800e1f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	2002      	movs	r0, #2
 8005afc:	f7fe fe1a 	bl	8004734 <memp_free>
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	0800fb44 	.word	0x0800fb44
 8005b0c:	0800fbb0 	.word	0x0800fbb0
 8005b10:	0800fb88 	.word	0x0800fb88

08005b14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005b18:	f000 fea2 	bl	8006860 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005b1c:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <tcp_tmr+0x28>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <tcp_tmr+0x28>)
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	4b04      	ldr	r3, [pc, #16]	; (8005b3c <tcp_tmr+0x28>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005b34:	f000 fb54 	bl	80061e0 <tcp_slowtmr>
  }
}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2000a459 	.word	0x2000a459

08005b40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d105      	bne.n	8005b5c <tcp_remove_listener+0x1c>
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <tcp_remove_listener+0x48>)
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	490d      	ldr	r1, [pc, #52]	; (8005b8c <tcp_remove_listener+0x4c>)
 8005b56:	480e      	ldr	r0, [pc, #56]	; (8005b90 <tcp_remove_listener+0x50>)
 8005b58:	f008 fb4a 	bl	800e1f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e00a      	b.n	8005b78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d102      	bne.n	8005b72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f1      	bne.n	8005b62 <tcp_remove_listener+0x22>
    }
  }
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	0800fb44 	.word	0x0800fb44
 8005b8c:	0800fbcc 	.word	0x0800fbcc
 8005b90:	0800fb88 	.word	0x0800fb88

08005b94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <tcp_listen_closed+0x1c>
 8005ba2:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <tcp_listen_closed+0x60>)
 8005ba4:	f240 1211 	movw	r2, #273	; 0x111
 8005ba8:	4913      	ldr	r1, [pc, #76]	; (8005bf8 <tcp_listen_closed+0x64>)
 8005baa:	4814      	ldr	r0, [pc, #80]	; (8005bfc <tcp_listen_closed+0x68>)
 8005bac:	f008 fb20 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	7d1b      	ldrb	r3, [r3, #20]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d006      	beq.n	8005bc6 <tcp_listen_closed+0x32>
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <tcp_listen_closed+0x60>)
 8005bba:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005bbe:	4910      	ldr	r1, [pc, #64]	; (8005c00 <tcp_listen_closed+0x6c>)
 8005bc0:	480e      	ldr	r0, [pc, #56]	; (8005bfc <tcp_listen_closed+0x68>)
 8005bc2:	f008 fb15 	bl	800e1f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e00b      	b.n	8005be4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005bcc:	4a0d      	ldr	r2, [pc, #52]	; (8005c04 <tcp_listen_closed+0x70>)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff ffb1 	bl	8005b40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d9f0      	bls.n	8005bcc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	0800fb44 	.word	0x0800fb44
 8005bf8:	0800fbf4 	.word	0x0800fbf4
 8005bfc:	0800fb88 	.word	0x0800fb88
 8005c00:	0800fc00 	.word	0x0800fc00
 8005c04:	08011b1c 	.word	0x08011b1c

08005c08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005c08:	b5b0      	push	{r4, r5, r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af04      	add	r7, sp, #16
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <tcp_close_shutdown+0x20>
 8005c1a:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <tcp_close_shutdown+0x1a0>)
 8005c1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005c20:	4962      	ldr	r1, [pc, #392]	; (8005dac <tcp_close_shutdown+0x1a4>)
 8005c22:	4863      	ldr	r0, [pc, #396]	; (8005db0 <tcp_close_shutdown+0x1a8>)
 8005c24:	f008 fae4 	bl	800e1f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d066      	beq.n	8005cfc <tcp_close_shutdown+0xf4>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7d1b      	ldrb	r3, [r3, #20]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d003      	beq.n	8005c3e <tcp_close_shutdown+0x36>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	7d1b      	ldrb	r3, [r3, #20]
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	d15e      	bne.n	8005cfc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d104      	bne.n	8005c50 <tcp_close_shutdown+0x48>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005c4e:	d055      	beq.n	8005cfc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8b5b      	ldrh	r3, [r3, #26]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d106      	bne.n	8005c6a <tcp_close_shutdown+0x62>
 8005c5c:	4b52      	ldr	r3, [pc, #328]	; (8005da8 <tcp_close_shutdown+0x1a0>)
 8005c5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005c62:	4954      	ldr	r1, [pc, #336]	; (8005db4 <tcp_close_shutdown+0x1ac>)
 8005c64:	4852      	ldr	r0, [pc, #328]	; (8005db0 <tcp_close_shutdown+0x1a8>)
 8005c66:	f008 fac3 	bl	800e1f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005c72:	687d      	ldr	r5, [r7, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	8ad2      	ldrh	r2, [r2, #22]
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	8b09      	ldrh	r1, [r1, #24]
 8005c80:	9102      	str	r1, [sp, #8]
 8005c82:	9201      	str	r2, [sp, #4]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	462b      	mov	r3, r5
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f004 fe91 	bl	800a9b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f8c6 	bl	8006e24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005c98:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <tcp_close_shutdown+0x1b0>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d105      	bne.n	8005cae <tcp_close_shutdown+0xa6>
 8005ca2:	4b45      	ldr	r3, [pc, #276]	; (8005db8 <tcp_close_shutdown+0x1b0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4a43      	ldr	r2, [pc, #268]	; (8005db8 <tcp_close_shutdown+0x1b0>)
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e013      	b.n	8005cd6 <tcp_close_shutdown+0xce>
 8005cae:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <tcp_close_shutdown+0x1b0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e00c      	b.n	8005cd0 <tcp_close_shutdown+0xc8>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d104      	bne.n	8005cca <tcp_close_shutdown+0xc2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	60da      	str	r2, [r3, #12]
 8005cc8:	e005      	b.n	8005cd6 <tcp_close_shutdown+0xce>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1ef      	bne.n	8005cb6 <tcp_close_shutdown+0xae>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <tcp_close_shutdown+0x1b4>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005ce2:	4b37      	ldr	r3, [pc, #220]	; (8005dc0 <tcp_close_shutdown+0x1b8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d102      	bne.n	8005cf2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005cec:	f003 fd5e 	bl	80097ac <tcp_trigger_input_pcb_close>
 8005cf0:	e002      	b.n	8005cf8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff fed6 	bl	8005aa4 <tcp_free>
      }
      return ERR_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e050      	b.n	8005d9e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	7d1b      	ldrb	r3, [r3, #20]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d03b      	beq.n	8005d7c <tcp_close_shutdown+0x174>
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	dc44      	bgt.n	8005d92 <tcp_close_shutdown+0x18a>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <tcp_close_shutdown+0x10a>
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d02a      	beq.n	8005d66 <tcp_close_shutdown+0x15e>
 8005d10:	e03f      	b.n	8005d92 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8adb      	ldrh	r3, [r3, #22]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d021      	beq.n	8005d5e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <tcp_close_shutdown+0x1bc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d105      	bne.n	8005d30 <tcp_close_shutdown+0x128>
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <tcp_close_shutdown+0x1bc>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <tcp_close_shutdown+0x1bc>)
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e013      	b.n	8005d58 <tcp_close_shutdown+0x150>
 8005d30:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <tcp_close_shutdown+0x1bc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	e00c      	b.n	8005d52 <tcp_close_shutdown+0x14a>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d104      	bne.n	8005d4c <tcp_close_shutdown+0x144>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e005      	b.n	8005d58 <tcp_close_shutdown+0x150>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ef      	bne.n	8005d38 <tcp_close_shutdown+0x130>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff fea0 	bl	8005aa4 <tcp_free>
      break;
 8005d64:	e01a      	b.n	8005d9c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ff14 	bl	8005b94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4816      	ldr	r0, [pc, #88]	; (8005dc8 <tcp_close_shutdown+0x1c0>)
 8005d70:	f001 f8a8 	bl	8006ec4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff feb1 	bl	8005adc <tcp_free_listen>
      break;
 8005d7a:	e00f      	b.n	8005d9c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	480e      	ldr	r0, [pc, #56]	; (8005db8 <tcp_close_shutdown+0x1b0>)
 8005d80:	f001 f8a0 	bl	8006ec4 <tcp_pcb_remove>
 8005d84:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <tcp_close_shutdown+0x1b4>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff fe8a 	bl	8005aa4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005d90:	e004      	b.n	8005d9c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f81a 	bl	8005dcc <tcp_close_shutdown_fin>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	e000      	b.n	8005d9e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bdb0      	pop	{r4, r5, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	0800fb44 	.word	0x0800fb44
 8005dac:	0800fc18 	.word	0x0800fc18
 8005db0:	0800fb88 	.word	0x0800fb88
 8005db4:	0800fc38 	.word	0x0800fc38
 8005db8:	2000a450 	.word	0x2000a450
 8005dbc:	2000a458 	.word	0x2000a458
 8005dc0:	2000a490 	.word	0x2000a490
 8005dc4:	2000a448 	.word	0x2000a448
 8005dc8:	2000a44c 	.word	0x2000a44c

08005dcc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <tcp_close_shutdown_fin+0x1c>
 8005dda:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <tcp_close_shutdown_fin+0xc8>)
 8005ddc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005de0:	492d      	ldr	r1, [pc, #180]	; (8005e98 <tcp_close_shutdown_fin+0xcc>)
 8005de2:	482e      	ldr	r0, [pc, #184]	; (8005e9c <tcp_close_shutdown_fin+0xd0>)
 8005de4:	f008 fa04 	bl	800e1f0 <iprintf>

  switch (pcb->state) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7d1b      	ldrb	r3, [r3, #20]
 8005dec:	2b07      	cmp	r3, #7
 8005dee:	d020      	beq.n	8005e32 <tcp_close_shutdown_fin+0x66>
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	dc2b      	bgt.n	8005e4c <tcp_close_shutdown_fin+0x80>
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d002      	beq.n	8005dfe <tcp_close_shutdown_fin+0x32>
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d00d      	beq.n	8005e18 <tcp_close_shutdown_fin+0x4c>
 8005dfc:	e026      	b.n	8005e4c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f003 fee6 	bl	8009bd0 <tcp_send_fin>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11f      	bne.n	8005e50 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2205      	movs	r2, #5
 8005e14:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e16:	e01b      	b.n	8005e50 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f003 fed9 	bl	8009bd0 <tcp_send_fin>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d114      	bne.n	8005e54 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2205      	movs	r2, #5
 8005e2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e30:	e010      	b.n	8005e54 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f003 fecc 	bl	8009bd0 <tcp_send_fin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2209      	movs	r2, #9
 8005e48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e4a:	e005      	b.n	8005e58 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e01c      	b.n	8005e8a <tcp_close_shutdown_fin+0xbe>
      break;
 8005e50:	bf00      	nop
 8005e52:	e002      	b.n	8005e5a <tcp_close_shutdown_fin+0x8e>
      break;
 8005e54:	bf00      	nop
 8005e56:	e000      	b.n	8005e5a <tcp_close_shutdown_fin+0x8e>
      break;
 8005e58:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f003 fff2 	bl	8009e4c <tcp_output>
 8005e68:	e00d      	b.n	8005e86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d108      	bne.n	8005e86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8b5b      	ldrh	r3, [r3, #26]
 8005e78:	f043 0308 	orr.w	r3, r3, #8
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e001      	b.n	8005e8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	0800fb44 	.word	0x0800fb44
 8005e98:	0800fbf4 	.word	0x0800fbf4
 8005e9c:	0800fb88 	.word	0x0800fb88

08005ea0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <tcp_close+0x22>
 8005eae:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <tcp_close+0x4c>)
 8005eb0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005eb4:	490e      	ldr	r1, [pc, #56]	; (8005ef0 <tcp_close+0x50>)
 8005eb6:	480f      	ldr	r0, [pc, #60]	; (8005ef4 <tcp_close+0x54>)
 8005eb8:	f008 f99a 	bl	800e1f0 <iprintf>
 8005ebc:	f06f 030f 	mvn.w	r3, #15
 8005ec0:	e00f      	b.n	8005ee2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7d1b      	ldrb	r3, [r3, #20]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d006      	beq.n	8005ed8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	8b5b      	ldrh	r3, [r3, #26]
 8005ece:	f043 0310 	orr.w	r3, r3, #16
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005ed8:	2101      	movs	r1, #1
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff fe94 	bl	8005c08 <tcp_close_shutdown>
 8005ee0:	4603      	mov	r3, r0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	0800fb44 	.word	0x0800fb44
 8005ef0:	0800fc54 	.word	0x0800fc54
 8005ef4:	0800fb88 	.word	0x0800fb88

08005ef8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08e      	sub	sp, #56	; 0x38
 8005efc:	af04      	add	r7, sp, #16
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <tcp_abandon+0x20>
 8005f08:	4b52      	ldr	r3, [pc, #328]	; (8006054 <tcp_abandon+0x15c>)
 8005f0a:	f240 223d 	movw	r2, #573	; 0x23d
 8005f0e:	4952      	ldr	r1, [pc, #328]	; (8006058 <tcp_abandon+0x160>)
 8005f10:	4852      	ldr	r0, [pc, #328]	; (800605c <tcp_abandon+0x164>)
 8005f12:	f008 f96d 	bl	800e1f0 <iprintf>
 8005f16:	e099      	b.n	800604c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7d1b      	ldrb	r3, [r3, #20]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d106      	bne.n	8005f2e <tcp_abandon+0x36>
 8005f20:	4b4c      	ldr	r3, [pc, #304]	; (8006054 <tcp_abandon+0x15c>)
 8005f22:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005f26:	494e      	ldr	r1, [pc, #312]	; (8006060 <tcp_abandon+0x168>)
 8005f28:	484c      	ldr	r0, [pc, #304]	; (800605c <tcp_abandon+0x164>)
 8005f2a:	f008 f961 	bl	800e1f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7d1b      	ldrb	r3, [r3, #20]
 8005f32:	2b0a      	cmp	r3, #10
 8005f34:	d107      	bne.n	8005f46 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	484a      	ldr	r0, [pc, #296]	; (8006064 <tcp_abandon+0x16c>)
 8005f3a:	f000 ffc3 	bl	8006ec4 <tcp_pcb_remove>
    tcp_free(pcb);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fdb0 	bl	8005aa4 <tcp_free>
 8005f44:	e082      	b.n	800604c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f52:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	7d1b      	ldrb	r3, [r3, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d126      	bne.n	8005fbe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8adb      	ldrh	r3, [r3, #22]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02e      	beq.n	8005fd6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f78:	4b3b      	ldr	r3, [pc, #236]	; (8006068 <tcp_abandon+0x170>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d105      	bne.n	8005f8e <tcp_abandon+0x96>
 8005f82:	4b39      	ldr	r3, [pc, #228]	; (8006068 <tcp_abandon+0x170>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4a37      	ldr	r2, [pc, #220]	; (8006068 <tcp_abandon+0x170>)
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	e013      	b.n	8005fb6 <tcp_abandon+0xbe>
 8005f8e:	4b36      	ldr	r3, [pc, #216]	; (8006068 <tcp_abandon+0x170>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	e00c      	b.n	8005fb0 <tcp_abandon+0xb8>
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d104      	bne.n	8005faa <tcp_abandon+0xb2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	60da      	str	r2, [r3, #12]
 8005fa8:	e005      	b.n	8005fb6 <tcp_abandon+0xbe>
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1ef      	bne.n	8005f96 <tcp_abandon+0x9e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	60da      	str	r2, [r3, #12]
 8005fbc:	e00b      	b.n	8005fd6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8adb      	ldrh	r3, [r3, #22]
 8005fc6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	4828      	ldr	r0, [pc, #160]	; (800606c <tcp_abandon+0x174>)
 8005fcc:	f000 ff7a 	bl	8006ec4 <tcp_pcb_remove>
 8005fd0:	4b27      	ldr	r3, [pc, #156]	; (8006070 <tcp_abandon+0x178>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fd1c 	bl	8006a20 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fd13 	bl	8006a20 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fd0a 	bl	8006a20 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00e      	beq.n	8006030 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3304      	adds	r3, #4
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	8b12      	ldrh	r2, [r2, #24]
 800601c:	9202      	str	r2, [sp, #8]
 800601e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006020:	9201      	str	r2, [sp, #4]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	460b      	mov	r3, r1
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	69b9      	ldr	r1, [r7, #24]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f004 fcc2 	bl	800a9b4 <tcp_rst>
    }
    last_state = pcb->state;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7d1b      	ldrb	r3, [r3, #20]
 8006034:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fd34 	bl	8005aa4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d004      	beq.n	800604c <tcp_abandon+0x154>
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f06f 010c 	mvn.w	r1, #12
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	4798      	blx	r3
  }
}
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	0800fb44 	.word	0x0800fb44
 8006058:	0800fc88 	.word	0x0800fc88
 800605c:	0800fb88 	.word	0x0800fb88
 8006060:	0800fca4 	.word	0x0800fca4
 8006064:	2000a454 	.word	0x2000a454
 8006068:	2000a448 	.word	0x2000a448
 800606c:	2000a450 	.word	0x2000a450
 8006070:	2000a458 	.word	0x2000a458

08006074 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800607c:	2101      	movs	r1, #1
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff ff3a 	bl	8005ef8 <tcp_abandon>
}
 8006084:	bf00      	nop
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <tcp_update_rcv_ann_wnd+0x1c>
 800609a:	4b25      	ldr	r3, [pc, #148]	; (8006130 <tcp_update_rcv_ann_wnd+0xa4>)
 800609c:	f240 32a6 	movw	r2, #934	; 0x3a6
 80060a0:	4924      	ldr	r1, [pc, #144]	; (8006134 <tcp_update_rcv_ann_wnd+0xa8>)
 80060a2:	4825      	ldr	r0, [pc, #148]	; (8006138 <tcp_update_rcv_ann_wnd+0xac>)
 80060a4:	f008 f8a4 	bl	800e1f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80060b0:	4413      	add	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80060bc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80060c0:	bf28      	it	cs
 80060c2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80060c6:	b292      	uxth	r2, r2
 80060c8:	4413      	add	r3, r2
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	db08      	blt.n	80060e4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	e020      	b.n	8006126 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dd03      	ble.n	80060fa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060f8:	e014      	b.n	8006124 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610c:	d306      	bcc.n	800611c <tcp_update_rcv_ann_wnd+0x90>
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <tcp_update_rcv_ann_wnd+0xa4>)
 8006110:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006114:	4909      	ldr	r1, [pc, #36]	; (800613c <tcp_update_rcv_ann_wnd+0xb0>)
 8006116:	4808      	ldr	r0, [pc, #32]	; (8006138 <tcp_update_rcv_ann_wnd+0xac>)
 8006118:	f008 f86a 	bl	800e1f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006124:	2300      	movs	r3, #0
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	0800fb44 	.word	0x0800fb44
 8006134:	0800fda0 	.word	0x0800fda0
 8006138:	0800fb88 	.word	0x0800fb88
 800613c:	0800fdc4 	.word	0x0800fdc4

08006140 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d107      	bne.n	8006162 <tcp_recved+0x22>
 8006152:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <tcp_recved+0x90>)
 8006154:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006158:	491e      	ldr	r1, [pc, #120]	; (80061d4 <tcp_recved+0x94>)
 800615a:	481f      	ldr	r0, [pc, #124]	; (80061d8 <tcp_recved+0x98>)
 800615c:	f008 f848 	bl	800e1f0 <iprintf>
 8006160:	e032      	b.n	80061c8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7d1b      	ldrb	r3, [r3, #20]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d106      	bne.n	8006178 <tcp_recved+0x38>
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <tcp_recved+0x90>)
 800616c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006170:	491a      	ldr	r1, [pc, #104]	; (80061dc <tcp_recved+0x9c>)
 8006172:	4819      	ldr	r0, [pc, #100]	; (80061d8 <tcp_recved+0x98>)
 8006174:	f008 f83c 	bl	800e1f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800617c:	887b      	ldrh	r3, [r7, #2]
 800617e:	4413      	add	r3, r2
 8006180:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006188:	d804      	bhi.n	8006194 <tcp_recved+0x54>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618e:	89fa      	ldrh	r2, [r7, #14]
 8006190:	429a      	cmp	r2, r3
 8006192:	d204      	bcs.n	800619e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
 800619c:	e002      	b.n	80061a4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	89fa      	ldrh	r2, [r7, #14]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff ff71 	bl	800608c <tcp_update_rcv_ann_wnd>
 80061aa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80061b2:	d309      	bcc.n	80061c8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8b5b      	ldrh	r3, [r3, #26]
 80061b8:	f043 0302 	orr.w	r3, r3, #2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f003 fe42 	bl	8009e4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	0800fb44 	.word	0x0800fb44
 80061d4:	0800fde0 	.word	0x0800fde0
 80061d8:	0800fb88 	.word	0x0800fb88
 80061dc:	0800fdf8 	.word	0x0800fdf8

080061e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80061e0:	b5b0      	push	{r4, r5, r7, lr}
 80061e2:	b090      	sub	sp, #64	; 0x40
 80061e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80061ec:	4b94      	ldr	r3, [pc, #592]	; (8006440 <tcp_slowtmr+0x260>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3301      	adds	r3, #1
 80061f2:	4a93      	ldr	r2, [pc, #588]	; (8006440 <tcp_slowtmr+0x260>)
 80061f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80061f6:	4b93      	ldr	r3, [pc, #588]	; (8006444 <tcp_slowtmr+0x264>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4b91      	ldr	r3, [pc, #580]	; (8006444 <tcp_slowtmr+0x264>)
 8006200:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006206:	4b90      	ldr	r3, [pc, #576]	; (8006448 <tcp_slowtmr+0x268>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800620c:	e29f      	b.n	800674e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	7d1b      	ldrb	r3, [r3, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <tcp_slowtmr+0x44>
 8006216:	4b8d      	ldr	r3, [pc, #564]	; (800644c <tcp_slowtmr+0x26c>)
 8006218:	f240 42be 	movw	r2, #1214	; 0x4be
 800621c:	498c      	ldr	r1, [pc, #560]	; (8006450 <tcp_slowtmr+0x270>)
 800621e:	488d      	ldr	r0, [pc, #564]	; (8006454 <tcp_slowtmr+0x274>)
 8006220:	f007 ffe6 	bl	800e1f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	7d1b      	ldrb	r3, [r3, #20]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d106      	bne.n	800623a <tcp_slowtmr+0x5a>
 800622c:	4b87      	ldr	r3, [pc, #540]	; (800644c <tcp_slowtmr+0x26c>)
 800622e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006232:	4989      	ldr	r1, [pc, #548]	; (8006458 <tcp_slowtmr+0x278>)
 8006234:	4887      	ldr	r0, [pc, #540]	; (8006454 <tcp_slowtmr+0x274>)
 8006236:	f007 ffdb 	bl	800e1f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	7d1b      	ldrb	r3, [r3, #20]
 800623e:	2b0a      	cmp	r3, #10
 8006240:	d106      	bne.n	8006250 <tcp_slowtmr+0x70>
 8006242:	4b82      	ldr	r3, [pc, #520]	; (800644c <tcp_slowtmr+0x26c>)
 8006244:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006248:	4984      	ldr	r1, [pc, #528]	; (800645c <tcp_slowtmr+0x27c>)
 800624a:	4882      	ldr	r0, [pc, #520]	; (8006454 <tcp_slowtmr+0x274>)
 800624c:	f007 ffd0 	bl	800e1f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	7f9a      	ldrb	r2, [r3, #30]
 8006254:	4b7b      	ldr	r3, [pc, #492]	; (8006444 <tcp_slowtmr+0x264>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d105      	bne.n	8006268 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006266:	e272      	b.n	800674e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006268:	4b76      	ldr	r3, [pc, #472]	; (8006444 <tcp_slowtmr+0x264>)
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	7d1b      	ldrb	r3, [r3, #20]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d10a      	bne.n	800629a <tcp_slowtmr+0xba>
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800628a:	2b05      	cmp	r3, #5
 800628c:	d905      	bls.n	800629a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800628e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006292:	3301      	adds	r3, #1
 8006294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006298:	e11e      	b.n	80064d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062a0:	2b0b      	cmp	r3, #11
 80062a2:	d905      	bls.n	80062b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80062a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062a8:	3301      	adds	r3, #1
 80062aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062ae:	e113      	b.n	80064d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d075      	beq.n	80063a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d006      	beq.n	80062d0 <tcp_slowtmr+0xf0>
 80062c2:	4b62      	ldr	r3, [pc, #392]	; (800644c <tcp_slowtmr+0x26c>)
 80062c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80062c8:	4965      	ldr	r1, [pc, #404]	; (8006460 <tcp_slowtmr+0x280>)
 80062ca:	4862      	ldr	r0, [pc, #392]	; (8006454 <tcp_slowtmr+0x274>)
 80062cc:	f007 ff90 	bl	800e1f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <tcp_slowtmr+0x106>
 80062d8:	4b5c      	ldr	r3, [pc, #368]	; (800644c <tcp_slowtmr+0x26c>)
 80062da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80062de:	4961      	ldr	r1, [pc, #388]	; (8006464 <tcp_slowtmr+0x284>)
 80062e0:	485c      	ldr	r0, [pc, #368]	; (8006454 <tcp_slowtmr+0x274>)
 80062e2:	f007 ff85 	bl	800e1f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80062ec:	2b0b      	cmp	r3, #11
 80062ee:	d905      	bls.n	80062fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80062f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f4:	3301      	adds	r3, #1
 80062f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062fa:	e0ed      	b.n	80064d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006302:	3b01      	subs	r3, #1
 8006304:	4a58      	ldr	r2, [pc, #352]	; (8006468 <tcp_slowtmr+0x288>)
 8006306:	5cd3      	ldrb	r3, [r2, r3]
 8006308:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006310:	7c7a      	ldrb	r2, [r7, #17]
 8006312:	429a      	cmp	r2, r3
 8006314:	d907      	bls.n	8006326 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800631c:	3301      	adds	r3, #1
 800631e:	b2da      	uxtb	r2, r3
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800632c:	7c7a      	ldrb	r2, [r7, #17]
 800632e:	429a      	cmp	r2, r3
 8006330:	f200 80d2 	bhi.w	80064d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006334:	2301      	movs	r3, #1
 8006336:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800633e:	2b00      	cmp	r3, #0
 8006340:	d108      	bne.n	8006354 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006344:	f004 fc2a 	bl	800ab9c <tcp_zero_window_probe>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d014      	beq.n	8006378 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800634e:	2300      	movs	r3, #0
 8006350:	623b      	str	r3, [r7, #32]
 8006352:	e011      	b.n	8006378 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800635a:	4619      	mov	r1, r3
 800635c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800635e:	f003 faef 	bl	8009940 <tcp_split_unsent_seg>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800636a:	f003 fd6f 	bl	8009e4c <tcp_output>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006374:	2300      	movs	r3, #0
 8006376:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80ac 	beq.w	80064d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800638e:	2b06      	cmp	r3, #6
 8006390:	f200 80a2 	bhi.w	80064d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800639a:	3301      	adds	r3, #1
 800639c:	b2da      	uxtb	r2, r3
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80063a4:	e098      	b.n	80064d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	db0f      	blt.n	80063d0 <tcp_slowtmr+0x1f0>
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80063b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d008      	beq.n	80063d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3301      	adds	r3, #1
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	b21a      	sxth	r2, r3
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80063dc:	429a      	cmp	r2, r3
 80063de:	db7b      	blt.n	80064d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80063e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e2:	f004 f827 	bl	800a434 <tcp_rexmit_rto_prepare>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <tcp_slowtmr+0x21c>
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d171      	bne.n	80064d8 <tcp_slowtmr+0x2f8>
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d06d      	beq.n	80064d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	7d1b      	ldrb	r3, [r3, #20]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d03a      	beq.n	800647a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800640a:	2b0c      	cmp	r3, #12
 800640c:	bf28      	it	cs
 800640e:	230c      	movcs	r3, #12
 8006410:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006418:	10db      	asrs	r3, r3, #3
 800641a:	b21b      	sxth	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006424:	4413      	add	r3, r2
 8006426:	7efa      	ldrb	r2, [r7, #27]
 8006428:	4910      	ldr	r1, [pc, #64]	; (800646c <tcp_slowtmr+0x28c>)
 800642a:	5c8a      	ldrb	r2, [r1, r2]
 800642c:	4093      	lsls	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006436:	4293      	cmp	r3, r2
 8006438:	dc1a      	bgt.n	8006470 <tcp_slowtmr+0x290>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	b21a      	sxth	r2, r3
 800643e:	e019      	b.n	8006474 <tcp_slowtmr+0x294>
 8006440:	2000a444 	.word	0x2000a444
 8006444:	2000a45a 	.word	0x2000a45a
 8006448:	2000a450 	.word	0x2000a450
 800644c:	0800fb44 	.word	0x0800fb44
 8006450:	0800fe88 	.word	0x0800fe88
 8006454:	0800fb88 	.word	0x0800fb88
 8006458:	0800feb4 	.word	0x0800feb4
 800645c:	0800fee0 	.word	0x0800fee0
 8006460:	0800ff10 	.word	0x0800ff10
 8006464:	0800ff44 	.word	0x0800ff44
 8006468:	08011b14 	.word	0x08011b14
 800646c:	08011b04 	.word	0x08011b04
 8006470:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	2200      	movs	r2, #0
 800647e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800648c:	4293      	cmp	r3, r2
 800648e:	bf28      	it	cs
 8006490:	4613      	movcs	r3, r2
 8006492:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006494:	8a7b      	ldrh	r3, [r7, #18]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d206      	bcs.n	80064c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80064d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d4:	f004 f81e 	bl	800a514 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	7d1b      	ldrb	r3, [r3, #20]
 80064dc:	2b06      	cmp	r3, #6
 80064de:	d111      	bne.n	8006504 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	8b5b      	ldrh	r3, [r3, #26]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80064ec:	4b9d      	ldr	r3, [pc, #628]	; (8006764 <tcp_slowtmr+0x584>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b28      	cmp	r3, #40	; 0x28
 80064f8:	d904      	bls.n	8006504 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80064fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064fe:	3301      	adds	r3, #1
 8006500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	7a5b      	ldrb	r3, [r3, #9]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d04c      	beq.n	80065aa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006514:	2b04      	cmp	r3, #4
 8006516:	d003      	beq.n	8006520 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800651c:	2b07      	cmp	r3, #7
 800651e:	d144      	bne.n	80065aa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006520:	4b90      	ldr	r3, [pc, #576]	; (8006764 <tcp_slowtmr+0x584>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006530:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006534:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006538:	498b      	ldr	r1, [pc, #556]	; (8006768 <tcp_slowtmr+0x588>)
 800653a:	fba1 1303 	umull	r1, r3, r1, r3
 800653e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006540:	429a      	cmp	r2, r3
 8006542:	d90a      	bls.n	800655a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006548:	3301      	adds	r3, #1
 800654a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800654e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006552:	3301      	adds	r3, #1
 8006554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006558:	e027      	b.n	80065aa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800655a:	4b82      	ldr	r3, [pc, #520]	; (8006764 <tcp_slowtmr+0x584>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006570:	4618      	mov	r0, r3
 8006572:	4b7e      	ldr	r3, [pc, #504]	; (800676c <tcp_slowtmr+0x58c>)
 8006574:	fb00 f303 	mul.w	r3, r0, r3
 8006578:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800657a:	497b      	ldr	r1, [pc, #492]	; (8006768 <tcp_slowtmr+0x588>)
 800657c:	fba1 1303 	umull	r1, r3, r1, r3
 8006580:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006582:	429a      	cmp	r2, r3
 8006584:	d911      	bls.n	80065aa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006588:	f004 fac8 	bl	800ab1c <tcp_keepalive>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006592:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006596:	2b00      	cmp	r3, #0
 8006598:	d107      	bne.n	80065aa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80065a0:	3301      	adds	r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d011      	beq.n	80065d6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80065b2:	4b6c      	ldr	r3, [pc, #432]	; (8006764 <tcp_slowtmr+0x584>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80065c2:	4619      	mov	r1, r3
 80065c4:	460b      	mov	r3, r1
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	440b      	add	r3, r1
 80065ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d302      	bcc.n	80065d6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80065d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065d2:	f000 fddb 	bl	800718c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	7d1b      	ldrb	r3, [r3, #20]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d10b      	bne.n	80065f6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065de:	4b61      	ldr	r3, [pc, #388]	; (8006764 <tcp_slowtmr+0x584>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b28      	cmp	r3, #40	; 0x28
 80065ea:	d904      	bls.n	80065f6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80065ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f0:	3301      	adds	r3, #1
 80065f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	7d1b      	ldrb	r3, [r3, #20]
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	d10b      	bne.n	8006616 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80065fe:	4b59      	ldr	r3, [pc, #356]	; (8006764 <tcp_slowtmr+0x584>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2bf0      	cmp	r3, #240	; 0xf0
 800660a:	d904      	bls.n	8006616 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800660c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006610:	3301      	adds	r3, #1
 8006612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800661a:	2b00      	cmp	r3, #0
 800661c:	d060      	beq.n	80066e0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006624:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006628:	f000 fbfc 	bl	8006e24 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	2b00      	cmp	r3, #0
 8006630:	d010      	beq.n	8006654 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006632:	4b4f      	ldr	r3, [pc, #316]	; (8006770 <tcp_slowtmr+0x590>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006638:	429a      	cmp	r2, r3
 800663a:	d106      	bne.n	800664a <tcp_slowtmr+0x46a>
 800663c:	4b4d      	ldr	r3, [pc, #308]	; (8006774 <tcp_slowtmr+0x594>)
 800663e:	f240 526d 	movw	r2, #1389	; 0x56d
 8006642:	494d      	ldr	r1, [pc, #308]	; (8006778 <tcp_slowtmr+0x598>)
 8006644:	484d      	ldr	r0, [pc, #308]	; (800677c <tcp_slowtmr+0x59c>)
 8006646:	f007 fdd3 	bl	800e1f0 <iprintf>
        prev->next = pcb->next;
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e00f      	b.n	8006674 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006654:	4b46      	ldr	r3, [pc, #280]	; (8006770 <tcp_slowtmr+0x590>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800665a:	429a      	cmp	r2, r3
 800665c:	d006      	beq.n	800666c <tcp_slowtmr+0x48c>
 800665e:	4b45      	ldr	r3, [pc, #276]	; (8006774 <tcp_slowtmr+0x594>)
 8006660:	f240 5271 	movw	r2, #1393	; 0x571
 8006664:	4946      	ldr	r1, [pc, #280]	; (8006780 <tcp_slowtmr+0x5a0>)
 8006666:	4845      	ldr	r0, [pc, #276]	; (800677c <tcp_slowtmr+0x59c>)
 8006668:	f007 fdc2 	bl	800e1f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a3f      	ldr	r2, [pc, #252]	; (8006770 <tcp_slowtmr+0x590>)
 8006672:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006678:	2b00      	cmp	r3, #0
 800667a:	d013      	beq.n	80066a4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006684:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	3304      	adds	r3, #4
 800668a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668c:	8ad2      	ldrh	r2, [r2, #22]
 800668e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006690:	8b09      	ldrh	r1, [r1, #24]
 8006692:	9102      	str	r1, [sp, #8]
 8006694:	9201      	str	r2, [sp, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	462b      	mov	r3, r5
 800669a:	4622      	mov	r2, r4
 800669c:	4601      	mov	r1, r0
 800669e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066a0:	f004 f988 	bl	800a9b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	7d1b      	ldrb	r3, [r3, #20]
 80066ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80066ba:	6838      	ldr	r0, [r7, #0]
 80066bc:	f7ff f9f2 	bl	8005aa4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80066c0:	4b30      	ldr	r3, [pc, #192]	; (8006784 <tcp_slowtmr+0x5a4>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <tcp_slowtmr+0x4f6>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f06f 010c 	mvn.w	r1, #12
 80066d2:	68b8      	ldr	r0, [r7, #8]
 80066d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80066d6:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <tcp_slowtmr+0x5a4>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d037      	beq.n	800674e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80066de:	e590      	b.n	8006202 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	7f1b      	ldrb	r3, [r3, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	7f1a      	ldrb	r2, [r3, #28]
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	7f5b      	ldrb	r3, [r3, #29]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d325      	bcc.n	800674e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006708:	4b1e      	ldr	r3, [pc, #120]	; (8006784 <tcp_slowtmr+0x5a4>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <tcp_slowtmr+0x550>
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006720:	6912      	ldr	r2, [r2, #16]
 8006722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800672e:	e002      	b.n	8006736 <tcp_slowtmr+0x556>
 8006730:	2300      	movs	r3, #0
 8006732:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006736:	4b13      	ldr	r3, [pc, #76]	; (8006784 <tcp_slowtmr+0x5a4>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d000      	beq.n	8006740 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800673e:	e560      	b.n	8006202 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006740:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674a:	f003 fb7f 	bl	8009e4c <tcp_output>
  while (pcb != NULL) {
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	f47f ad5c 	bne.w	800620e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006756:	2300      	movs	r3, #0
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <tcp_slowtmr+0x5a8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006760:	e067      	b.n	8006832 <tcp_slowtmr+0x652>
 8006762:	bf00      	nop
 8006764:	2000a444 	.word	0x2000a444
 8006768:	10624dd3 	.word	0x10624dd3
 800676c:	000124f8 	.word	0x000124f8
 8006770:	2000a450 	.word	0x2000a450
 8006774:	0800fb44 	.word	0x0800fb44
 8006778:	0800ff7c 	.word	0x0800ff7c
 800677c:	0800fb88 	.word	0x0800fb88
 8006780:	0800ffa8 	.word	0x0800ffa8
 8006784:	2000a458 	.word	0x2000a458
 8006788:	2000a454 	.word	0x2000a454
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	7d1b      	ldrb	r3, [r3, #20]
 8006790:	2b0a      	cmp	r3, #10
 8006792:	d006      	beq.n	80067a2 <tcp_slowtmr+0x5c2>
 8006794:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <tcp_slowtmr+0x664>)
 8006796:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800679a:	492b      	ldr	r1, [pc, #172]	; (8006848 <tcp_slowtmr+0x668>)
 800679c:	482b      	ldr	r0, [pc, #172]	; (800684c <tcp_slowtmr+0x66c>)
 800679e:	f007 fd27 	bl	800e1f0 <iprintf>
    pcb_remove = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80067a8:	4b29      	ldr	r3, [pc, #164]	; (8006850 <tcp_slowtmr+0x670>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2bf0      	cmp	r3, #240	; 0xf0
 80067b4:	d904      	bls.n	80067c0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80067b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ba:	3301      	adds	r3, #1
 80067bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80067c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d02f      	beq.n	8006828 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80067c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ca:	f000 fb2b 	bl	8006e24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d010      	beq.n	80067f6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80067d4:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <tcp_slowtmr+0x674>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067da:	429a      	cmp	r2, r3
 80067dc:	d106      	bne.n	80067ec <tcp_slowtmr+0x60c>
 80067de:	4b19      	ldr	r3, [pc, #100]	; (8006844 <tcp_slowtmr+0x664>)
 80067e0:	f240 52af 	movw	r2, #1455	; 0x5af
 80067e4:	491c      	ldr	r1, [pc, #112]	; (8006858 <tcp_slowtmr+0x678>)
 80067e6:	4819      	ldr	r0, [pc, #100]	; (800684c <tcp_slowtmr+0x66c>)
 80067e8:	f007 fd02 	bl	800e1f0 <iprintf>
        prev->next = pcb->next;
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	60da      	str	r2, [r3, #12]
 80067f4:	e00f      	b.n	8006816 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80067f6:	4b17      	ldr	r3, [pc, #92]	; (8006854 <tcp_slowtmr+0x674>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d006      	beq.n	800680e <tcp_slowtmr+0x62e>
 8006800:	4b10      	ldr	r3, [pc, #64]	; (8006844 <tcp_slowtmr+0x664>)
 8006802:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006806:	4915      	ldr	r1, [pc, #84]	; (800685c <tcp_slowtmr+0x67c>)
 8006808:	4810      	ldr	r0, [pc, #64]	; (800684c <tcp_slowtmr+0x66c>)
 800680a:	f007 fcf1 	bl	800e1f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4a10      	ldr	r2, [pc, #64]	; (8006854 <tcp_slowtmr+0x674>)
 8006814:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006820:	69f8      	ldr	r0, [r7, #28]
 8006822:	f7ff f93f 	bl	8005aa4 <tcp_free>
 8006826:	e004      	b.n	8006832 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1a9      	bne.n	800678c <tcp_slowtmr+0x5ac>
    }
  }
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	3730      	adds	r7, #48	; 0x30
 800683e:	46bd      	mov	sp, r7
 8006840:	bdb0      	pop	{r4, r5, r7, pc}
 8006842:	bf00      	nop
 8006844:	0800fb44 	.word	0x0800fb44
 8006848:	0800ffd4 	.word	0x0800ffd4
 800684c:	0800fb88 	.word	0x0800fb88
 8006850:	2000a444 	.word	0x2000a444
 8006854:	2000a454 	.word	0x2000a454
 8006858:	08010004 	.word	0x08010004
 800685c:	0801002c 	.word	0x0801002c

08006860 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006866:	4b2d      	ldr	r3, [pc, #180]	; (800691c <tcp_fasttmr+0xbc>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	b2da      	uxtb	r2, r3
 800686e:	4b2b      	ldr	r3, [pc, #172]	; (800691c <tcp_fasttmr+0xbc>)
 8006870:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006872:	4b2b      	ldr	r3, [pc, #172]	; (8006920 <tcp_fasttmr+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006878:	e048      	b.n	800690c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7f9a      	ldrb	r2, [r3, #30]
 800687e:	4b27      	ldr	r3, [pc, #156]	; (800691c <tcp_fasttmr+0xbc>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d03f      	beq.n	8006906 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006886:	4b25      	ldr	r3, [pc, #148]	; (800691c <tcp_fasttmr+0xbc>)
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	8b5b      	ldrh	r3, [r3, #26]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d010      	beq.n	80068bc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8b5b      	ldrh	r3, [r3, #26]
 800689e:	f043 0302 	orr.w	r3, r3, #2
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f003 facf 	bl	8009e4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8b5b      	ldrh	r3, [r3, #26]
 80068b2:	f023 0303 	bic.w	r3, r3, #3
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8b5b      	ldrh	r3, [r3, #26]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8b5b      	ldrh	r3, [r3, #26]
 80068cc:	f023 0308 	bic.w	r3, r3, #8
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fa78 	bl	8005dcc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80068ea:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <tcp_fasttmr+0xc4>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f819 	bl	8006928 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <tcp_fasttmr+0xc4>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d000      	beq.n	8006900 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80068fe:	e7b8      	b.n	8006872 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	e002      	b.n	800690c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1b3      	bne.n	800687a <tcp_fasttmr+0x1a>
    }
  }
}
 8006912:	bf00      	nop
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	2000a45a 	.word	0x2000a45a
 8006920:	2000a450 	.word	0x2000a450
 8006924:	2000a458 	.word	0x2000a458

08006928 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <tcp_process_refused_data+0x22>
 8006936:	4b37      	ldr	r3, [pc, #220]	; (8006a14 <tcp_process_refused_data+0xec>)
 8006938:	f240 6209 	movw	r2, #1545	; 0x609
 800693c:	4936      	ldr	r1, [pc, #216]	; (8006a18 <tcp_process_refused_data+0xf0>)
 800693e:	4837      	ldr	r0, [pc, #220]	; (8006a1c <tcp_process_refused_data+0xf4>)
 8006940:	f007 fc56 	bl	800e1f0 <iprintf>
 8006944:	f06f 030f 	mvn.w	r3, #15
 8006948:	e060      	b.n	8006a0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800694e:	7b5b      	ldrb	r3, [r3, #13]
 8006950:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006956:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <tcp_process_refused_data+0x58>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6918      	ldr	r0, [r3, #16]
 8006972:	2300      	movs	r3, #0
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	47a0      	blx	r4
 800697a:	4603      	mov	r3, r0
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e007      	b.n	8006990 <tcp_process_refused_data+0x68>
 8006980:	2300      	movs	r3, #0
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	2000      	movs	r0, #0
 8006988:	f000 f8a4 	bl	8006ad4 <tcp_recv_null>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d12a      	bne.n	80069ee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d033      	beq.n	8006a0a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80069aa:	d005      	beq.n	80069b8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	3301      	adds	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00b      	beq.n	80069da <tcp_process_refused_data+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6918      	ldr	r0, [r3, #16]
 80069cc:	2300      	movs	r3, #0
 80069ce:	2200      	movs	r2, #0
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	47a0      	blx	r4
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	e001      	b.n	80069de <tcp_process_refused_data+0xb6>
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80069de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069e2:	f113 0f0d 	cmn.w	r3, #13
 80069e6:	d110      	bne.n	8006a0a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80069e8:	f06f 030c 	mvn.w	r3, #12
 80069ec:	e00e      	b.n	8006a0c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80069ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f2:	f113 0f0d 	cmn.w	r3, #13
 80069f6:	d102      	bne.n	80069fe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80069f8:	f06f 030c 	mvn.w	r3, #12
 80069fc:	e006      	b.n	8006a0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006a04:	f06f 0304 	mvn.w	r3, #4
 8006a08:	e000      	b.n	8006a0c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd90      	pop	{r4, r7, pc}
 8006a14:	0800fb44 	.word	0x0800fb44
 8006a18:	08010054 	.word	0x08010054
 8006a1c:	0800fb88 	.word	0x0800fb88

08006a20 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006a28:	e007      	b.n	8006a3a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f80a 	bl	8006a4a <tcp_seg_free>
    seg = next;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f4      	bne.n	8006a2a <tcp_segs_free+0xa>
  }
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00c      	beq.n	8006a72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe fcdb 	bl	8005420 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	2003      	movs	r0, #3
 8006a6e:	f7fd fe61 	bl	8004734 <memp_free>
  }
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <tcp_seg_copy+0x1c>
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <tcp_seg_copy+0x4c>)
 8006a8c:	f240 6282 	movw	r2, #1666	; 0x682
 8006a90:	490e      	ldr	r1, [pc, #56]	; (8006acc <tcp_seg_copy+0x50>)
 8006a92:	480f      	ldr	r0, [pc, #60]	; (8006ad0 <tcp_seg_copy+0x54>)
 8006a94:	f007 fbac 	bl	800e1f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006a98:	2003      	movs	r0, #3
 8006a9a:	f7fd fddb 	bl	8004654 <memp_malloc>
 8006a9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <tcp_seg_copy+0x2e>
    return NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e00a      	b.n	8006ac0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006aaa:	2210      	movs	r2, #16
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f007 fc79 	bl	800e3a6 <memcpy>
  pbuf_ref(cseg->p);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe fd51 	bl	8005560 <pbuf_ref>
  return cseg;
 8006abe:	68fb      	ldr	r3, [r7, #12]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	0800fb44 	.word	0x0800fb44
 8006acc:	08010098 	.word	0x08010098
 8006ad0:	0800fb88 	.word	0x0800fb88

08006ad4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <tcp_recv_null+0x28>
 8006ae8:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <tcp_recv_null+0x60>)
 8006aea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006aee:	4912      	ldr	r1, [pc, #72]	; (8006b38 <tcp_recv_null+0x64>)
 8006af0:	4812      	ldr	r0, [pc, #72]	; (8006b3c <tcp_recv_null+0x68>)
 8006af2:	f007 fb7d 	bl	800e1f0 <iprintf>
 8006af6:	f06f 030f 	mvn.w	r3, #15
 8006afa:	e016      	b.n	8006b2a <tcp_recv_null+0x56>

  if (p != NULL) {
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	891b      	ldrh	r3, [r3, #8]
 8006b06:	4619      	mov	r1, r3
 8006b08:	68b8      	ldr	r0, [r7, #8]
 8006b0a:	f7ff fb19 	bl	8006140 <tcp_recved>
    pbuf_free(p);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fe fc86 	bl	8005420 <pbuf_free>
 8006b14:	e008      	b.n	8006b28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006b1e:	68b8      	ldr	r0, [r7, #8]
 8006b20:	f7ff f9be 	bl	8005ea0 <tcp_close>
 8006b24:	4603      	mov	r3, r0
 8006b26:	e000      	b.n	8006b2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	0800fb44 	.word	0x0800fb44
 8006b38:	080100b4 	.word	0x080100b4
 8006b3c:	0800fb88 	.word	0x0800fb88

08006b40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	4603      	mov	r3, r0
 8006b48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	db01      	blt.n	8006b56 <tcp_kill_prio+0x16>
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	e000      	b.n	8006b58 <tcp_kill_prio+0x18>
 8006b56:	237f      	movs	r3, #127	; 0x7f
 8006b58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d034      	beq.n	8006bca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b6e:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <tcp_kill_prio+0x94>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e01f      	b.n	8006bb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	7d5b      	ldrb	r3, [r3, #21]
 8006b7a:	7afa      	ldrb	r2, [r7, #11]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d80c      	bhi.n	8006b9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006b84:	7afa      	ldrb	r2, [r7, #11]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d112      	bne.n	8006bb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006b8a:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <tcp_kill_prio+0x98>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d80a      	bhi.n	8006bb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <tcp_kill_prio+0x98>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	7d5b      	ldrb	r3, [r3, #21]
 8006bae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1dc      	bne.n	8006b76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006bc2:	6938      	ldr	r0, [r7, #16]
 8006bc4:	f7ff fa56 	bl	8006074 <tcp_abort>
 8006bc8:	e000      	b.n	8006bcc <tcp_kill_prio+0x8c>
    return;
 8006bca:	bf00      	nop
  }
}
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	2000a450 	.word	0x2000a450
 8006bd8:	2000a444 	.word	0x2000a444

08006bdc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d009      	beq.n	8006c00 <tcp_kill_state+0x24>
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b09      	cmp	r3, #9
 8006bf0:	d006      	beq.n	8006c00 <tcp_kill_state+0x24>
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <tcp_kill_state+0x80>)
 8006bf4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006bf8:	4919      	ldr	r1, [pc, #100]	; (8006c60 <tcp_kill_state+0x84>)
 8006bfa:	481a      	ldr	r0, [pc, #104]	; (8006c64 <tcp_kill_state+0x88>)
 8006bfc:	f007 faf8 	bl	800e1f0 <iprintf>

  inactivity = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c08:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <tcp_kill_state+0x8c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e017      	b.n	8006c40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	7d1b      	ldrb	r3, [r3, #20]
 8006c14:	79fa      	ldrb	r2, [r7, #7]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d10f      	bne.n	8006c3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006c1a:	4b14      	ldr	r3, [pc, #80]	; (8006c6c <tcp_kill_state+0x90>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d807      	bhi.n	8006c3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <tcp_kill_state+0x90>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e4      	bne.n	8006c10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	6938      	ldr	r0, [r7, #16]
 8006c50:	f7ff f952 	bl	8005ef8 <tcp_abandon>
  }
}
 8006c54:	bf00      	nop
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	0800fb44 	.word	0x0800fb44
 8006c60:	080100d0 	.word	0x080100d0
 8006c64:	0800fb88 	.word	0x0800fb88
 8006c68:	2000a450 	.word	0x2000a450
 8006c6c:	2000a444 	.word	0x2000a444

08006c70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <tcp_kill_timewait+0x58>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e012      	b.n	8006cac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006c86:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <tcp_kill_timewait+0x5c>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d807      	bhi.n	8006ca6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006c96:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <tcp_kill_timewait+0x5c>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e9      	bne.n	8006c86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006cb8:	68b8      	ldr	r0, [r7, #8]
 8006cba:	f7ff f9db 	bl	8006074 <tcp_abort>
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	2000a454 	.word	0x2000a454
 8006ccc:	2000a444 	.word	0x2000a444

08006cd0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <tcp_handle_closepend+0x48>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006cdc:	e014      	b.n	8006d08 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	8b5b      	ldrh	r3, [r3, #26]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d009      	beq.n	8006d04 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8b5b      	ldrh	r3, [r3, #26]
 8006cf4:	f023 0308 	bic.w	r3, r3, #8
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff f864 	bl	8005dcc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e7      	bne.n	8006cde <tcp_handle_closepend+0xe>
  }
}
 8006d0e:	bf00      	nop
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	2000a450 	.word	0x2000a450

08006d1c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d26:	2001      	movs	r0, #1
 8006d28:	f7fd fc94 	bl	8004654 <memp_malloc>
 8006d2c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d126      	bne.n	8006d82 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006d34:	f7ff ffcc 	bl	8006cd0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006d38:	f7ff ff9a 	bl	8006c70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f7fd fc89 	bl	8004654 <memp_malloc>
 8006d42:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d11b      	bne.n	8006d82 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006d4a:	2009      	movs	r0, #9
 8006d4c:	f7ff ff46 	bl	8006bdc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d50:	2001      	movs	r0, #1
 8006d52:	f7fd fc7f 	bl	8004654 <memp_malloc>
 8006d56:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d111      	bne.n	8006d82 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006d5e:	2008      	movs	r0, #8
 8006d60:	f7ff ff3c 	bl	8006bdc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d64:	2001      	movs	r0, #1
 8006d66:	f7fd fc75 	bl	8004654 <memp_malloc>
 8006d6a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fee3 	bl	8006b40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	f7fd fc6a 	bl	8004654 <memp_malloc>
 8006d80:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d03f      	beq.n	8006e08 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006d88:	229c      	movs	r2, #156	; 0x9c
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f007 fa94 	bl	800e2ba <memset>
    pcb->prio = prio;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006d9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006da8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006dbe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2206      	movs	r2, #6
 8006dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2206      	movs	r2, #6
 8006dcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dd4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <tcp_alloc+0xf8>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006de6:	4b0c      	ldr	r3, [pc, #48]	; (8006e18 <tcp_alloc+0xfc>)
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006df4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a08      	ldr	r2, [pc, #32]	; (8006e1c <tcp_alloc+0x100>)
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a07      	ldr	r2, [pc, #28]	; (8006e20 <tcp_alloc+0x104>)
 8006e04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006e08:	68fb      	ldr	r3, [r7, #12]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	2000a444 	.word	0x2000a444
 8006e18:	2000a45a 	.word	0x2000a45a
 8006e1c:	08006ad5 	.word	0x08006ad5
 8006e20:	006ddd00 	.word	0x006ddd00

08006e24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d107      	bne.n	8006e42 <tcp_pcb_purge+0x1e>
 8006e32:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <tcp_pcb_purge+0x94>)
 8006e34:	f640 0251 	movw	r2, #2129	; 0x851
 8006e38:	4920      	ldr	r1, [pc, #128]	; (8006ebc <tcp_pcb_purge+0x98>)
 8006e3a:	4821      	ldr	r0, [pc, #132]	; (8006ec0 <tcp_pcb_purge+0x9c>)
 8006e3c:	f007 f9d8 	bl	800e1f0 <iprintf>
 8006e40:	e037      	b.n	8006eb2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7d1b      	ldrb	r3, [r3, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d033      	beq.n	8006eb2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006e4e:	2b0a      	cmp	r3, #10
 8006e50:	d02f      	beq.n	8006eb2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d02b      	beq.n	8006eb2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fada 	bl	8005420 <pbuf_free>
      pcb->refused_data = NULL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f986 	bl	800718c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e86:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fdc7 	bl	8006a20 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fdc2 	bl	8006a20 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	66da      	str	r2, [r3, #108]	; 0x6c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	0800fb44 	.word	0x0800fb44
 8006ebc:	08010190 	.word	0x08010190
 8006ec0:	0800fb88 	.word	0x0800fb88

08006ec4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <tcp_pcb_remove+0x1e>
 8006ed4:	4b3e      	ldr	r3, [pc, #248]	; (8006fd0 <tcp_pcb_remove+0x10c>)
 8006ed6:	f640 0283 	movw	r2, #2179	; 0x883
 8006eda:	493e      	ldr	r1, [pc, #248]	; (8006fd4 <tcp_pcb_remove+0x110>)
 8006edc:	483e      	ldr	r0, [pc, #248]	; (8006fd8 <tcp_pcb_remove+0x114>)
 8006ede:	f007 f987 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d106      	bne.n	8006ef6 <tcp_pcb_remove+0x32>
 8006ee8:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <tcp_pcb_remove+0x10c>)
 8006eea:	f640 0284 	movw	r2, #2180	; 0x884
 8006eee:	493b      	ldr	r1, [pc, #236]	; (8006fdc <tcp_pcb_remove+0x118>)
 8006ef0:	4839      	ldr	r0, [pc, #228]	; (8006fd8 <tcp_pcb_remove+0x114>)
 8006ef2:	f007 f97d 	bl	800e1f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d105      	bne.n	8006f0c <tcp_pcb_remove+0x48>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	e013      	b.n	8006f34 <tcp_pcb_remove+0x70>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e00c      	b.n	8006f2e <tcp_pcb_remove+0x6a>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d104      	bne.n	8006f28 <tcp_pcb_remove+0x64>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	60da      	str	r2, [r3, #12]
 8006f26:	e005      	b.n	8006f34 <tcp_pcb_remove+0x70>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1ef      	bne.n	8006f14 <tcp_pcb_remove+0x50>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2200      	movs	r2, #0
 8006f38:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006f3a:	6838      	ldr	r0, [r7, #0]
 8006f3c:	f7ff ff72 	bl	8006e24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	7d1b      	ldrb	r3, [r3, #20]
 8006f44:	2b0a      	cmp	r3, #10
 8006f46:	d013      	beq.n	8006f70 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d00f      	beq.n	8006f70 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	8b5b      	ldrh	r3, [r3, #26]
 8006f54:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	8b5b      	ldrh	r3, [r3, #26]
 8006f60:	f043 0302 	orr.w	r3, r3, #2
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006f6a:	6838      	ldr	r0, [r7, #0]
 8006f6c:	f002 ff6e 	bl	8009e4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	7d1b      	ldrb	r3, [r3, #20]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d020      	beq.n	8006fba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d006      	beq.n	8006f8e <tcp_pcb_remove+0xca>
 8006f80:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <tcp_pcb_remove+0x10c>)
 8006f82:	f640 0293 	movw	r2, #2195	; 0x893
 8006f86:	4916      	ldr	r1, [pc, #88]	; (8006fe0 <tcp_pcb_remove+0x11c>)
 8006f88:	4813      	ldr	r0, [pc, #76]	; (8006fd8 <tcp_pcb_remove+0x114>)
 8006f8a:	f007 f931 	bl	800e1f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d006      	beq.n	8006fa4 <tcp_pcb_remove+0xe0>
 8006f96:	4b0e      	ldr	r3, [pc, #56]	; (8006fd0 <tcp_pcb_remove+0x10c>)
 8006f98:	f640 0294 	movw	r2, #2196	; 0x894
 8006f9c:	4911      	ldr	r1, [pc, #68]	; (8006fe4 <tcp_pcb_remove+0x120>)
 8006f9e:	480e      	ldr	r0, [pc, #56]	; (8006fd8 <tcp_pcb_remove+0x114>)
 8006fa0:	f007 f926 	bl	800e1f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d006      	beq.n	8006fba <tcp_pcb_remove+0xf6>
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <tcp_pcb_remove+0x10c>)
 8006fae:	f640 0296 	movw	r2, #2198	; 0x896
 8006fb2:	490d      	ldr	r1, [pc, #52]	; (8006fe8 <tcp_pcb_remove+0x124>)
 8006fb4:	4808      	ldr	r0, [pc, #32]	; (8006fd8 <tcp_pcb_remove+0x114>)
 8006fb6:	f007 f91b 	bl	800e1f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	0800fb44 	.word	0x0800fb44
 8006fd4:	080101ac 	.word	0x080101ac
 8006fd8:	0800fb88 	.word	0x0800fb88
 8006fdc:	080101c8 	.word	0x080101c8
 8006fe0:	080101e8 	.word	0x080101e8
 8006fe4:	08010200 	.word	0x08010200
 8006fe8:	0801021c 	.word	0x0801021c

08006fec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <tcp_next_iss+0x1c>
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <tcp_next_iss+0x38>)
 8006ffc:	f640 02af 	movw	r2, #2223	; 0x8af
 8007000:	4909      	ldr	r1, [pc, #36]	; (8007028 <tcp_next_iss+0x3c>)
 8007002:	480a      	ldr	r0, [pc, #40]	; (800702c <tcp_next_iss+0x40>)
 8007004:	f007 f8f4 	bl	800e1f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <tcp_next_iss+0x44>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	4b09      	ldr	r3, [pc, #36]	; (8007034 <tcp_next_iss+0x48>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	4a07      	ldr	r2, [pc, #28]	; (8007030 <tcp_next_iss+0x44>)
 8007014:	6013      	str	r3, [r2, #0]
  return iss;
 8007016:	4b06      	ldr	r3, [pc, #24]	; (8007030 <tcp_next_iss+0x44>)
 8007018:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	0800fb44 	.word	0x0800fb44
 8007028:	08010234 	.word	0x08010234
 800702c:	0800fb88 	.word	0x0800fb88
 8007030:	20000024 	.word	0x20000024
 8007034:	2000a444 	.word	0x2000a444

08007038 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <tcp_eff_send_mss_netif+0x22>
 800704c:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <tcp_eff_send_mss_netif+0x68>)
 800704e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007052:	4914      	ldr	r1, [pc, #80]	; (80070a4 <tcp_eff_send_mss_netif+0x6c>)
 8007054:	4814      	ldr	r0, [pc, #80]	; (80070a8 <tcp_eff_send_mss_netif+0x70>)
 8007056:	f007 f8cb 	bl	800e1f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007060:	89fb      	ldrh	r3, [r7, #14]
 8007062:	e019      	b.n	8007098 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007068:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800706a:	8afb      	ldrh	r3, [r7, #22]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007070:	2328      	movs	r3, #40	; 0x28
 8007072:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007074:	8afa      	ldrh	r2, [r7, #22]
 8007076:	8abb      	ldrh	r3, [r7, #20]
 8007078:	429a      	cmp	r2, r3
 800707a:	d904      	bls.n	8007086 <tcp_eff_send_mss_netif+0x4e>
 800707c:	8afa      	ldrh	r2, [r7, #22]
 800707e:	8abb      	ldrh	r3, [r7, #20]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	b29b      	uxth	r3, r3
 8007084:	e000      	b.n	8007088 <tcp_eff_send_mss_netif+0x50>
 8007086:	2300      	movs	r3, #0
 8007088:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800708a:	8a7a      	ldrh	r2, [r7, #18]
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	4293      	cmp	r3, r2
 8007090:	bf28      	it	cs
 8007092:	4613      	movcs	r3, r2
 8007094:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007096:	89fb      	ldrh	r3, [r7, #14]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	0800fb44 	.word	0x0800fb44
 80070a4:	08010250 	.word	0x08010250
 80070a8:	0800fb88 	.word	0x0800fb88

080070ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d119      	bne.n	80070f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80070c2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80070c6:	4910      	ldr	r1, [pc, #64]	; (8007108 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80070c8:	4810      	ldr	r0, [pc, #64]	; (800710c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80070ca:	f007 f891 	bl	800e1f0 <iprintf>

  while (pcb != NULL) {
 80070ce:	e011      	b.n	80070f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d108      	bne.n	80070ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7fe ffc6 	bl	8006074 <tcp_abort>
      pcb = next;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e002      	b.n	80070f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1ea      	bne.n	80070d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	0800fb44 	.word	0x0800fb44
 8007108:	08010278 	.word	0x08010278
 800710c:	0800fb88 	.word	0x0800fb88

08007110 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02a      	beq.n	8007176 <tcp_netif_ip_addr_changed+0x66>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d026      	beq.n	8007176 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007128:	4b15      	ldr	r3, [pc, #84]	; (8007180 <tcp_netif_ip_addr_changed+0x70>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ffbc 	bl	80070ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007134:	4b13      	ldr	r3, [pc, #76]	; (8007184 <tcp_netif_ip_addr_changed+0x74>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff ffb6 	bl	80070ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d017      	beq.n	8007176 <tcp_netif_ip_addr_changed+0x66>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d013      	beq.n	8007176 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <tcp_netif_ip_addr_changed+0x78>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e00c      	b.n	8007170 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d103      	bne.n	800716a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1ef      	bne.n	8007156 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	2000a450 	.word	0x2000a450
 8007184:	2000a448 	.word	0x2000a448
 8007188:	2000a44c 	.word	0x2000a44c

0800718c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff fc3d 	bl	8006a20 <tcp_segs_free>
    pcb->ooseq = NULL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b08d      	sub	sp, #52	; 0x34
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <tcp_input+0x1c>
 80071c4:	4b9b      	ldr	r3, [pc, #620]	; (8007434 <tcp_input+0x280>)
 80071c6:	2283      	movs	r2, #131	; 0x83
 80071c8:	499b      	ldr	r1, [pc, #620]	; (8007438 <tcp_input+0x284>)
 80071ca:	489c      	ldr	r0, [pc, #624]	; (800743c <tcp_input+0x288>)
 80071cc:	f007 f810 	bl	800e1f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	4a9a      	ldr	r2, [pc, #616]	; (8007440 <tcp_input+0x28c>)
 80071d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	895b      	ldrh	r3, [r3, #10]
 80071dc:	2b13      	cmp	r3, #19
 80071de:	f240 83d1 	bls.w	8007984 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80071e2:	4b98      	ldr	r3, [pc, #608]	; (8007444 <tcp_input+0x290>)
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	4a97      	ldr	r2, [pc, #604]	; (8007444 <tcp_input+0x290>)
 80071e8:	6812      	ldr	r2, [r2, #0]
 80071ea:	4611      	mov	r1, r2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f005 ffa9 	bl	800d144 <ip4_addr_isbroadcast_u32>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f040 83c7 	bne.w	8007988 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80071fa:	4b92      	ldr	r3, [pc, #584]	; (8007444 <tcp_input+0x290>)
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007202:	2be0      	cmp	r3, #224	; 0xe0
 8007204:	f000 83c0 	beq.w	8007988 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007208:	4b8d      	ldr	r3, [pc, #564]	; (8007440 <tcp_input+0x28c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	899b      	ldrh	r3, [r3, #12]
 800720e:	b29b      	uxth	r3, r3
 8007210:	4618      	mov	r0, r3
 8007212:	f7fc fda7 	bl	8003d64 <lwip_htons>
 8007216:	4603      	mov	r3, r0
 8007218:	0b1b      	lsrs	r3, r3, #12
 800721a:	b29b      	uxth	r3, r3
 800721c:	b2db      	uxtb	r3, r3
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007222:	7cbb      	ldrb	r3, [r7, #18]
 8007224:	2b13      	cmp	r3, #19
 8007226:	f240 83b1 	bls.w	800798c <tcp_input+0x7d8>
 800722a:	7cbb      	ldrb	r3, [r7, #18]
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	891b      	ldrh	r3, [r3, #8]
 8007232:	429a      	cmp	r2, r3
 8007234:	f200 83aa 	bhi.w	800798c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007238:	7cbb      	ldrb	r3, [r7, #18]
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b14      	subs	r3, #20
 800723e:	b29a      	uxth	r2, r3
 8007240:	4b81      	ldr	r3, [pc, #516]	; (8007448 <tcp_input+0x294>)
 8007242:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007244:	4b81      	ldr	r3, [pc, #516]	; (800744c <tcp_input+0x298>)
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	895a      	ldrh	r2, [r3, #10]
 800724e:	7cbb      	ldrb	r3, [r7, #18]
 8007250:	b29b      	uxth	r3, r3
 8007252:	429a      	cmp	r2, r3
 8007254:	d309      	bcc.n	800726a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007256:	4b7c      	ldr	r3, [pc, #496]	; (8007448 <tcp_input+0x294>)
 8007258:	881a      	ldrh	r2, [r3, #0]
 800725a:	4b7d      	ldr	r3, [pc, #500]	; (8007450 <tcp_input+0x29c>)
 800725c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800725e:	7cbb      	ldrb	r3, [r7, #18]
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fe f856 	bl	8005314 <pbuf_remove_header>
 8007268:	e04e      	b.n	8007308 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d105      	bne.n	800727e <tcp_input+0xca>
 8007272:	4b70      	ldr	r3, [pc, #448]	; (8007434 <tcp_input+0x280>)
 8007274:	22c2      	movs	r2, #194	; 0xc2
 8007276:	4977      	ldr	r1, [pc, #476]	; (8007454 <tcp_input+0x2a0>)
 8007278:	4870      	ldr	r0, [pc, #448]	; (800743c <tcp_input+0x288>)
 800727a:	f006 ffb9 	bl	800e1f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800727e:	2114      	movs	r1, #20
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fe f847 	bl	8005314 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	895a      	ldrh	r2, [r3, #10]
 800728a:	4b71      	ldr	r3, [pc, #452]	; (8007450 <tcp_input+0x29c>)
 800728c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800728e:	4b6e      	ldr	r3, [pc, #440]	; (8007448 <tcp_input+0x294>)
 8007290:	881a      	ldrh	r2, [r3, #0]
 8007292:	4b6f      	ldr	r3, [pc, #444]	; (8007450 <tcp_input+0x29c>)
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800729a:	4b6d      	ldr	r3, [pc, #436]	; (8007450 <tcp_input+0x29c>)
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7fe f837 	bl	8005314 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	895b      	ldrh	r3, [r3, #10]
 80072ac:	8a3a      	ldrh	r2, [r7, #16]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	f200 836e 	bhi.w	8007990 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4a64      	ldr	r2, [pc, #400]	; (800744c <tcp_input+0x298>)
 80072bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	8a3a      	ldrh	r2, [r7, #16]
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f824 	bl	8005314 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	891a      	ldrh	r2, [r3, #8]
 80072d0:	8a3b      	ldrh	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	895b      	ldrh	r3, [r3, #10]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <tcp_input+0x13a>
 80072e2:	4b54      	ldr	r3, [pc, #336]	; (8007434 <tcp_input+0x280>)
 80072e4:	22df      	movs	r2, #223	; 0xdf
 80072e6:	495c      	ldr	r1, [pc, #368]	; (8007458 <tcp_input+0x2a4>)
 80072e8:	4854      	ldr	r0, [pc, #336]	; (800743c <tcp_input+0x288>)
 80072ea:	f006 ff81 	bl	800e1f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	891a      	ldrh	r2, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	891b      	ldrh	r3, [r3, #8]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d005      	beq.n	8007308 <tcp_input+0x154>
 80072fc:	4b4d      	ldr	r3, [pc, #308]	; (8007434 <tcp_input+0x280>)
 80072fe:	22e0      	movs	r2, #224	; 0xe0
 8007300:	4956      	ldr	r1, [pc, #344]	; (800745c <tcp_input+0x2a8>)
 8007302:	484e      	ldr	r0, [pc, #312]	; (800743c <tcp_input+0x288>)
 8007304:	f006 ff74 	bl	800e1f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007308:	4b4d      	ldr	r3, [pc, #308]	; (8007440 <tcp_input+0x28c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	4a4b      	ldr	r2, [pc, #300]	; (8007440 <tcp_input+0x28c>)
 8007312:	6814      	ldr	r4, [r2, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f7fc fd25 	bl	8003d64 <lwip_htons>
 800731a:	4603      	mov	r3, r0
 800731c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800731e:	4b48      	ldr	r3, [pc, #288]	; (8007440 <tcp_input+0x28c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	885b      	ldrh	r3, [r3, #2]
 8007324:	b29b      	uxth	r3, r3
 8007326:	4a46      	ldr	r2, [pc, #280]	; (8007440 <tcp_input+0x28c>)
 8007328:	6814      	ldr	r4, [r2, #0]
 800732a:	4618      	mov	r0, r3
 800732c:	f7fc fd1a 	bl	8003d64 <lwip_htons>
 8007330:	4603      	mov	r3, r0
 8007332:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007334:	4b42      	ldr	r3, [pc, #264]	; (8007440 <tcp_input+0x28c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	4a41      	ldr	r2, [pc, #260]	; (8007440 <tcp_input+0x28c>)
 800733c:	6814      	ldr	r4, [r2, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f7fc fd25 	bl	8003d8e <lwip_htonl>
 8007344:	4603      	mov	r3, r0
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	4a45      	ldr	r2, [pc, #276]	; (8007460 <tcp_input+0x2ac>)
 800734c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800734e:	4b3c      	ldr	r3, [pc, #240]	; (8007440 <tcp_input+0x28c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	4a3a      	ldr	r2, [pc, #232]	; (8007440 <tcp_input+0x28c>)
 8007356:	6814      	ldr	r4, [r2, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f7fc fd18 	bl	8003d8e <lwip_htonl>
 800735e:	4603      	mov	r3, r0
 8007360:	60a3      	str	r3, [r4, #8]
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	4a3f      	ldr	r2, [pc, #252]	; (8007464 <tcp_input+0x2b0>)
 8007366:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007368:	4b35      	ldr	r3, [pc, #212]	; (8007440 <tcp_input+0x28c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	89db      	ldrh	r3, [r3, #14]
 800736e:	b29b      	uxth	r3, r3
 8007370:	4a33      	ldr	r2, [pc, #204]	; (8007440 <tcp_input+0x28c>)
 8007372:	6814      	ldr	r4, [r2, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f7fc fcf5 	bl	8003d64 <lwip_htons>
 800737a:	4603      	mov	r3, r0
 800737c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800737e:	4b30      	ldr	r3, [pc, #192]	; (8007440 <tcp_input+0x28c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	899b      	ldrh	r3, [r3, #12]
 8007384:	b29b      	uxth	r3, r3
 8007386:	4618      	mov	r0, r3
 8007388:	f7fc fcec 	bl	8003d64 <lwip_htons>
 800738c:	4603      	mov	r3, r0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007394:	b2da      	uxtb	r2, r3
 8007396:	4b34      	ldr	r3, [pc, #208]	; (8007468 <tcp_input+0x2b4>)
 8007398:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	891a      	ldrh	r2, [r3, #8]
 800739e:	4b33      	ldr	r3, [pc, #204]	; (800746c <tcp_input+0x2b8>)
 80073a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80073a2:	4b31      	ldr	r3, [pc, #196]	; (8007468 <tcp_input+0x2b4>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <tcp_input+0x214>
    tcplen++;
 80073ae:	4b2f      	ldr	r3, [pc, #188]	; (800746c <tcp_input+0x2b8>)
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	4b2d      	ldr	r3, [pc, #180]	; (800746c <tcp_input+0x2b8>)
 80073b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	891a      	ldrh	r2, [r3, #8]
 80073be:	4b2b      	ldr	r3, [pc, #172]	; (800746c <tcp_input+0x2b8>)
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f200 82e6 	bhi.w	8007994 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073cc:	4b28      	ldr	r3, [pc, #160]	; (8007470 <tcp_input+0x2bc>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	e09d      	b.n	8007510 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	7d1b      	ldrb	r3, [r3, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <tcp_input+0x234>
 80073dc:	4b15      	ldr	r3, [pc, #84]	; (8007434 <tcp_input+0x280>)
 80073de:	22fb      	movs	r2, #251	; 0xfb
 80073e0:	4924      	ldr	r1, [pc, #144]	; (8007474 <tcp_input+0x2c0>)
 80073e2:	4816      	ldr	r0, [pc, #88]	; (800743c <tcp_input+0x288>)
 80073e4:	f006 ff04 	bl	800e1f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	7d1b      	ldrb	r3, [r3, #20]
 80073ec:	2b0a      	cmp	r3, #10
 80073ee:	d105      	bne.n	80073fc <tcp_input+0x248>
 80073f0:	4b10      	ldr	r3, [pc, #64]	; (8007434 <tcp_input+0x280>)
 80073f2:	22fc      	movs	r2, #252	; 0xfc
 80073f4:	4920      	ldr	r1, [pc, #128]	; (8007478 <tcp_input+0x2c4>)
 80073f6:	4811      	ldr	r0, [pc, #68]	; (800743c <tcp_input+0x288>)
 80073f8:	f006 fefa 	bl	800e1f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	7d1b      	ldrb	r3, [r3, #20]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d105      	bne.n	8007410 <tcp_input+0x25c>
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <tcp_input+0x280>)
 8007406:	22fd      	movs	r2, #253	; 0xfd
 8007408:	491c      	ldr	r1, [pc, #112]	; (800747c <tcp_input+0x2c8>)
 800740a:	480c      	ldr	r0, [pc, #48]	; (800743c <tcp_input+0x288>)
 800740c:	f006 fef0 	bl	800e1f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	7a1b      	ldrb	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d033      	beq.n	8007480 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	7a1a      	ldrb	r2, [r3, #8]
 800741c:	4b09      	ldr	r3, [pc, #36]	; (8007444 <tcp_input+0x290>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007424:	3301      	adds	r3, #1
 8007426:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007428:	429a      	cmp	r2, r3
 800742a:	d029      	beq.n	8007480 <tcp_input+0x2cc>
      prev = pcb;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	61bb      	str	r3, [r7, #24]
      continue;
 8007430:	e06b      	b.n	800750a <tcp_input+0x356>
 8007432:	bf00      	nop
 8007434:	080102ac 	.word	0x080102ac
 8007438:	080102e0 	.word	0x080102e0
 800743c:	080102f8 	.word	0x080102f8
 8007440:	2000a46c 	.word	0x2000a46c
 8007444:	20004d14 	.word	0x20004d14
 8007448:	2000a470 	.word	0x2000a470
 800744c:	2000a474 	.word	0x2000a474
 8007450:	2000a472 	.word	0x2000a472
 8007454:	08010320 	.word	0x08010320
 8007458:	08010330 	.word	0x08010330
 800745c:	0801033c 	.word	0x0801033c
 8007460:	2000a47c 	.word	0x2000a47c
 8007464:	2000a480 	.word	0x2000a480
 8007468:	2000a488 	.word	0x2000a488
 800746c:	2000a486 	.word	0x2000a486
 8007470:	2000a450 	.word	0x2000a450
 8007474:	0801035c 	.word	0x0801035c
 8007478:	08010384 	.word	0x08010384
 800747c:	080103b0 	.word	0x080103b0
    }

    if (pcb->remote_port == tcphdr->src &&
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	8b1a      	ldrh	r2, [r3, #24]
 8007484:	4b72      	ldr	r3, [pc, #456]	; (8007650 <tcp_input+0x49c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	429a      	cmp	r2, r3
 800748e:	d13a      	bne.n	8007506 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	8ada      	ldrh	r2, [r3, #22]
 8007494:	4b6e      	ldr	r3, [pc, #440]	; (8007650 <tcp_input+0x49c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	885b      	ldrh	r3, [r3, #2]
 800749a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800749c:	429a      	cmp	r2, r3
 800749e:	d132      	bne.n	8007506 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	4b6b      	ldr	r3, [pc, #428]	; (8007654 <tcp_input+0x4a0>)
 80074a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d12c      	bne.n	8007506 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4b68      	ldr	r3, [pc, #416]	; (8007654 <tcp_input+0x4a0>)
 80074b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d126      	bne.n	8007506 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d106      	bne.n	80074d0 <tcp_input+0x31c>
 80074c2:	4b65      	ldr	r3, [pc, #404]	; (8007658 <tcp_input+0x4a4>)
 80074c4:	f240 120d 	movw	r2, #269	; 0x10d
 80074c8:	4964      	ldr	r1, [pc, #400]	; (800765c <tcp_input+0x4a8>)
 80074ca:	4865      	ldr	r0, [pc, #404]	; (8007660 <tcp_input+0x4ac>)
 80074cc:	f006 fe90 	bl	800e1f0 <iprintf>
      if (prev != NULL) {
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <tcp_input+0x338>
        prev->next = pcb->next;
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80074de:	4b61      	ldr	r3, [pc, #388]	; (8007664 <tcp_input+0x4b0>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80074e6:	4a5f      	ldr	r2, [pc, #380]	; (8007664 <tcp_input+0x4b0>)
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d111      	bne.n	800751a <tcp_input+0x366>
 80074f6:	4b58      	ldr	r3, [pc, #352]	; (8007658 <tcp_input+0x4a4>)
 80074f8:	f240 1215 	movw	r2, #277	; 0x115
 80074fc:	495a      	ldr	r1, [pc, #360]	; (8007668 <tcp_input+0x4b4>)
 80074fe:	4858      	ldr	r0, [pc, #352]	; (8007660 <tcp_input+0x4ac>)
 8007500:	f006 fe76 	bl	800e1f0 <iprintf>
      break;
 8007504:	e009      	b.n	800751a <tcp_input+0x366>
    }
    prev = pcb;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f47f af5e 	bne.w	80073d4 <tcp_input+0x220>
 8007518:	e000      	b.n	800751c <tcp_input+0x368>
      break;
 800751a:	bf00      	nop
  }

  if (pcb == NULL) {
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f040 80aa 	bne.w	8007678 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007524:	4b51      	ldr	r3, [pc, #324]	; (800766c <tcp_input+0x4b8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	e03f      	b.n	80075ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	7d1b      	ldrb	r3, [r3, #20]
 8007530:	2b0a      	cmp	r3, #10
 8007532:	d006      	beq.n	8007542 <tcp_input+0x38e>
 8007534:	4b48      	ldr	r3, [pc, #288]	; (8007658 <tcp_input+0x4a4>)
 8007536:	f240 121f 	movw	r2, #287	; 0x11f
 800753a:	494d      	ldr	r1, [pc, #308]	; (8007670 <tcp_input+0x4bc>)
 800753c:	4848      	ldr	r0, [pc, #288]	; (8007660 <tcp_input+0x4ac>)
 800753e:	f006 fe57 	bl	800e1f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	7a1b      	ldrb	r3, [r3, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d009      	beq.n	800755e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	7a1a      	ldrb	r2, [r3, #8]
 800754e:	4b41      	ldr	r3, [pc, #260]	; (8007654 <tcp_input+0x4a0>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007556:	3301      	adds	r3, #1
 8007558:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800755a:	429a      	cmp	r2, r3
 800755c:	d122      	bne.n	80075a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	8b1a      	ldrh	r2, [r3, #24]
 8007562:	4b3b      	ldr	r3, [pc, #236]	; (8007650 <tcp_input+0x49c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	429a      	cmp	r2, r3
 800756c:	d11b      	bne.n	80075a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	8ada      	ldrh	r2, [r3, #22]
 8007572:	4b37      	ldr	r3, [pc, #220]	; (8007650 <tcp_input+0x49c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800757a:	429a      	cmp	r2, r3
 800757c:	d113      	bne.n	80075a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	4b34      	ldr	r3, [pc, #208]	; (8007654 <tcp_input+0x4a0>)
 8007584:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007586:	429a      	cmp	r2, r3
 8007588:	d10d      	bne.n	80075a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b31      	ldr	r3, [pc, #196]	; (8007654 <tcp_input+0x4a0>)
 8007590:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007592:	429a      	cmp	r2, r3
 8007594:	d107      	bne.n	80075a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007596:	69f8      	ldr	r0, [r7, #28]
 8007598:	f000 fb56 	bl	8007c48 <tcp_timewait_input>
        }
        pbuf_free(p);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7fd ff3f 	bl	8005420 <pbuf_free>
        return;
 80075a2:	e1fd      	b.n	80079a0 <tcp_input+0x7ec>
        continue;
 80075a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1bc      	bne.n	800752c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80075b6:	4b2f      	ldr	r3, [pc, #188]	; (8007674 <tcp_input+0x4c0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e02a      	b.n	8007614 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	7a1b      	ldrb	r3, [r3, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00c      	beq.n	80075e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	7a1a      	ldrb	r2, [r3, #8]
 80075ca:	4b22      	ldr	r3, [pc, #136]	; (8007654 <tcp_input+0x4a0>)
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d2:	3301      	adds	r3, #1
 80075d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d002      	beq.n	80075e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	61bb      	str	r3, [r7, #24]
        continue;
 80075de:	e016      	b.n	800760e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	8ada      	ldrh	r2, [r3, #22]
 80075e4:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <tcp_input+0x49c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d10c      	bne.n	800760a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	4b17      	ldr	r3, [pc, #92]	; (8007654 <tcp_input+0x4a0>)
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d00f      	beq.n	800761c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00d      	beq.n	800761e <tcp_input+0x46a>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1d1      	bne.n	80075be <tcp_input+0x40a>
 800761a:	e000      	b.n	800761e <tcp_input+0x46a>
            break;
 800761c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d029      	beq.n	8007678 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <tcp_input+0x4c0>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800763a:	4a0e      	ldr	r2, [pc, #56]	; (8007674 <tcp_input+0x4c0>)
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007640:	6978      	ldr	r0, [r7, #20]
 8007642:	f000 fa03 	bl	8007a4c <tcp_listen_input>
      }
      pbuf_free(p);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fd feea 	bl	8005420 <pbuf_free>
      return;
 800764c:	e1a8      	b.n	80079a0 <tcp_input+0x7ec>
 800764e:	bf00      	nop
 8007650:	2000a46c 	.word	0x2000a46c
 8007654:	20004d14 	.word	0x20004d14
 8007658:	080102ac 	.word	0x080102ac
 800765c:	080103d8 	.word	0x080103d8
 8007660:	080102f8 	.word	0x080102f8
 8007664:	2000a450 	.word	0x2000a450
 8007668:	08010404 	.word	0x08010404
 800766c:	2000a454 	.word	0x2000a454
 8007670:	08010430 	.word	0x08010430
 8007674:	2000a44c 	.word	0x2000a44c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 8158 	beq.w	8007930 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007680:	4b95      	ldr	r3, [pc, #596]	; (80078d8 <tcp_input+0x724>)
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	891a      	ldrh	r2, [r3, #8]
 800768a:	4b93      	ldr	r3, [pc, #588]	; (80078d8 <tcp_input+0x724>)
 800768c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800768e:	4a92      	ldr	r2, [pc, #584]	; (80078d8 <tcp_input+0x724>)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007694:	4b91      	ldr	r3, [pc, #580]	; (80078dc <tcp_input+0x728>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a8f      	ldr	r2, [pc, #572]	; (80078d8 <tcp_input+0x724>)
 800769a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800769c:	4b90      	ldr	r3, [pc, #576]	; (80078e0 <tcp_input+0x72c>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80076a2:	4b90      	ldr	r3, [pc, #576]	; (80078e4 <tcp_input+0x730>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80076a8:	4b8f      	ldr	r3, [pc, #572]	; (80078e8 <tcp_input+0x734>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80076ae:	4b8f      	ldr	r3, [pc, #572]	; (80078ec <tcp_input+0x738>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	7b5b      	ldrb	r3, [r3, #13]
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80076d0:	69f8      	ldr	r0, [r7, #28]
 80076d2:	f7ff f929 	bl	8006928 <tcp_process_refused_data>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f113 0f0d 	cmn.w	r3, #13
 80076dc:	d007      	beq.n	80076ee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00c      	beq.n	8007700 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80076e6:	4b82      	ldr	r3, [pc, #520]	; (80078f0 <tcp_input+0x73c>)
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d008      	beq.n	8007700 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f040 80e3 	bne.w	80078be <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80076f8:	69f8      	ldr	r0, [r7, #28]
 80076fa:	f003 f9ad 	bl	800aa58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80076fe:	e0de      	b.n	80078be <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007700:	4a7c      	ldr	r2, [pc, #496]	; (80078f4 <tcp_input+0x740>)
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007706:	69f8      	ldr	r0, [r7, #28]
 8007708:	f000 fb18 	bl	8007d3c <tcp_process>
 800770c:	4603      	mov	r3, r0
 800770e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007710:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007714:	f113 0f0d 	cmn.w	r3, #13
 8007718:	f000 80d3 	beq.w	80078c2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800771c:	4b71      	ldr	r3, [pc, #452]	; (80078e4 <tcp_input+0x730>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b00      	cmp	r3, #0
 8007726:	d015      	beq.n	8007754 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <tcp_input+0x590>
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	6912      	ldr	r2, [r2, #16]
 800773c:	f06f 010d 	mvn.w	r1, #13
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007744:	69f9      	ldr	r1, [r7, #28]
 8007746:	486c      	ldr	r0, [pc, #432]	; (80078f8 <tcp_input+0x744>)
 8007748:	f7ff fbbc 	bl	8006ec4 <tcp_pcb_remove>
        tcp_free(pcb);
 800774c:	69f8      	ldr	r0, [r7, #28]
 800774e:	f7fe f9a9 	bl	8005aa4 <tcp_free>
 8007752:	e0da      	b.n	800790a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007758:	4b63      	ldr	r3, [pc, #396]	; (80078e8 <tcp_input+0x734>)
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01d      	beq.n	800779c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007760:	4b61      	ldr	r3, [pc, #388]	; (80078e8 <tcp_input+0x734>)
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <tcp_input+0x5d2>
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	6910      	ldr	r0, [r2, #16]
 800777a:	89fa      	ldrh	r2, [r7, #14]
 800777c:	69f9      	ldr	r1, [r7, #28]
 800777e:	4798      	blx	r3
 8007780:	4603      	mov	r3, r0
 8007782:	74fb      	strb	r3, [r7, #19]
 8007784:	e001      	b.n	800778a <tcp_input+0x5d6>
 8007786:	2300      	movs	r3, #0
 8007788:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800778a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800778e:	f113 0f0d 	cmn.w	r3, #13
 8007792:	f000 8098 	beq.w	80078c6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007796:	4b54      	ldr	r3, [pc, #336]	; (80078e8 <tcp_input+0x734>)
 8007798:	2200      	movs	r2, #0
 800779a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800779c:	69f8      	ldr	r0, [r7, #28]
 800779e:	f000 f915 	bl	80079cc <tcp_input_delayed_close>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 8090 	bne.w	80078ca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80077aa:	4b4d      	ldr	r3, [pc, #308]	; (80078e0 <tcp_input+0x72c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d041      	beq.n	8007836 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d006      	beq.n	80077c8 <tcp_input+0x614>
 80077ba:	4b50      	ldr	r3, [pc, #320]	; (80078fc <tcp_input+0x748>)
 80077bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80077c0:	494f      	ldr	r1, [pc, #316]	; (8007900 <tcp_input+0x74c>)
 80077c2:	4850      	ldr	r0, [pc, #320]	; (8007904 <tcp_input+0x750>)
 80077c4:	f006 fd14 	bl	800e1f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	8b5b      	ldrh	r3, [r3, #26]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d008      	beq.n	80077e6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80077d4:	4b42      	ldr	r3, [pc, #264]	; (80078e0 <tcp_input+0x72c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fd fe21 	bl	8005420 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80077de:	69f8      	ldr	r0, [r7, #28]
 80077e0:	f7fe fc48 	bl	8006074 <tcp_abort>
            goto aborted;
 80077e4:	e091      	b.n	800790a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00c      	beq.n	800780a <tcp_input+0x656>
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	6918      	ldr	r0, [r3, #16]
 80077fa:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <tcp_input+0x72c>)
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	2300      	movs	r3, #0
 8007800:	69f9      	ldr	r1, [r7, #28]
 8007802:	47a0      	blx	r4
 8007804:	4603      	mov	r3, r0
 8007806:	74fb      	strb	r3, [r7, #19]
 8007808:	e008      	b.n	800781c <tcp_input+0x668>
 800780a:	4b35      	ldr	r3, [pc, #212]	; (80078e0 <tcp_input+0x72c>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	2300      	movs	r3, #0
 8007810:	69f9      	ldr	r1, [r7, #28]
 8007812:	2000      	movs	r0, #0
 8007814:	f7ff f95e 	bl	8006ad4 <tcp_recv_null>
 8007818:	4603      	mov	r3, r0
 800781a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800781c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007820:	f113 0f0d 	cmn.w	r3, #13
 8007824:	d053      	beq.n	80078ce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007826:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800782e:	4b2c      	ldr	r3, [pc, #176]	; (80078e0 <tcp_input+0x72c>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007836:	4b2b      	ldr	r3, [pc, #172]	; (80078e4 <tcp_input+0x730>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 0320 	and.w	r3, r3, #32
 800783e:	2b00      	cmp	r3, #0
 8007840:	d030      	beq.n	80078a4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784e:	7b5a      	ldrb	r2, [r3, #13]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007854:	f042 0220 	orr.w	r2, r2, #32
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	735a      	strb	r2, [r3, #13]
 800785c:	e022      	b.n	80078a4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007862:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007866:	d005      	beq.n	8007874 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786c:	3301      	adds	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <tcp_input+0x6e2>
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	6918      	ldr	r0, [r3, #16]
 8007888:	2300      	movs	r3, #0
 800788a:	2200      	movs	r2, #0
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	47a0      	blx	r4
 8007890:	4603      	mov	r3, r0
 8007892:	74fb      	strb	r3, [r7, #19]
 8007894:	e001      	b.n	800789a <tcp_input+0x6e6>
 8007896:	2300      	movs	r3, #0
 8007898:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800789a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800789e:	f113 0f0d 	cmn.w	r3, #13
 80078a2:	d016      	beq.n	80078d2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <tcp_input+0x740>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80078aa:	69f8      	ldr	r0, [r7, #28]
 80078ac:	f000 f88e 	bl	80079cc <tcp_input_delayed_close>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d128      	bne.n	8007908 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80078b6:	69f8      	ldr	r0, [r7, #28]
 80078b8:	f002 fac8 	bl	8009e4c <tcp_output>
 80078bc:	e025      	b.n	800790a <tcp_input+0x756>
        goto aborted;
 80078be:	bf00      	nop
 80078c0:	e023      	b.n	800790a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80078c2:	bf00      	nop
 80078c4:	e021      	b.n	800790a <tcp_input+0x756>
              goto aborted;
 80078c6:	bf00      	nop
 80078c8:	e01f      	b.n	800790a <tcp_input+0x756>
          goto aborted;
 80078ca:	bf00      	nop
 80078cc:	e01d      	b.n	800790a <tcp_input+0x756>
            goto aborted;
 80078ce:	bf00      	nop
 80078d0:	e01b      	b.n	800790a <tcp_input+0x756>
              goto aborted;
 80078d2:	bf00      	nop
 80078d4:	e019      	b.n	800790a <tcp_input+0x756>
 80078d6:	bf00      	nop
 80078d8:	2000a45c 	.word	0x2000a45c
 80078dc:	2000a46c 	.word	0x2000a46c
 80078e0:	2000a48c 	.word	0x2000a48c
 80078e4:	2000a489 	.word	0x2000a489
 80078e8:	2000a484 	.word	0x2000a484
 80078ec:	2000a488 	.word	0x2000a488
 80078f0:	2000a486 	.word	0x2000a486
 80078f4:	2000a490 	.word	0x2000a490
 80078f8:	2000a450 	.word	0x2000a450
 80078fc:	080102ac 	.word	0x080102ac
 8007900:	08010460 	.word	0x08010460
 8007904:	080102f8 	.word	0x080102f8
          goto aborted;
 8007908:	bf00      	nop
    tcp_input_pcb = NULL;
 800790a:	4b27      	ldr	r3, [pc, #156]	; (80079a8 <tcp_input+0x7f4>)
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007910:	4b26      	ldr	r3, [pc, #152]	; (80079ac <tcp_input+0x7f8>)
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007916:	4b26      	ldr	r3, [pc, #152]	; (80079b0 <tcp_input+0x7fc>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d03f      	beq.n	800799e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800791e:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <tcp_input+0x7fc>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	4618      	mov	r0, r3
 8007924:	f7fd fd7c 	bl	8005420 <pbuf_free>
      inseg.p = NULL;
 8007928:	4b21      	ldr	r3, [pc, #132]	; (80079b0 <tcp_input+0x7fc>)
 800792a:	2200      	movs	r2, #0
 800792c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800792e:	e036      	b.n	800799e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007930:	4b20      	ldr	r3, [pc, #128]	; (80079b4 <tcp_input+0x800>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	899b      	ldrh	r3, [r3, #12]
 8007936:	b29b      	uxth	r3, r3
 8007938:	4618      	mov	r0, r3
 800793a:	f7fc fa13 	bl	8003d64 <lwip_htons>
 800793e:	4603      	mov	r3, r0
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d118      	bne.n	800797c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800794a:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <tcp_input+0x804>)
 800794c:	6819      	ldr	r1, [r3, #0]
 800794e:	4b1b      	ldr	r3, [pc, #108]	; (80079bc <tcp_input+0x808>)
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <tcp_input+0x80c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800795a:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <tcp_input+0x800>)
 800795c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800795e:	885b      	ldrh	r3, [r3, #2]
 8007960:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007962:	4a14      	ldr	r2, [pc, #80]	; (80079b4 <tcp_input+0x800>)
 8007964:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007966:	8812      	ldrh	r2, [r2, #0]
 8007968:	b292      	uxth	r2, r2
 800796a:	9202      	str	r2, [sp, #8]
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <tcp_input+0x810>)
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <tcp_input+0x814>)
 8007974:	4602      	mov	r2, r0
 8007976:	2000      	movs	r0, #0
 8007978:	f003 f81c 	bl	800a9b4 <tcp_rst>
    pbuf_free(p);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fd fd4f 	bl	8005420 <pbuf_free>
  return;
 8007982:	e00c      	b.n	800799e <tcp_input+0x7ea>
    goto dropped;
 8007984:	bf00      	nop
 8007986:	e006      	b.n	8007996 <tcp_input+0x7e2>
    goto dropped;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <tcp_input+0x7e2>
    goto dropped;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <tcp_input+0x7e2>
      goto dropped;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <tcp_input+0x7e2>
      goto dropped;
 8007994:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fd fd42 	bl	8005420 <pbuf_free>
 800799c:	e000      	b.n	80079a0 <tcp_input+0x7ec>
  return;
 800799e:	bf00      	nop
}
 80079a0:	3724      	adds	r7, #36	; 0x24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd90      	pop	{r4, r7, pc}
 80079a6:	bf00      	nop
 80079a8:	2000a490 	.word	0x2000a490
 80079ac:	2000a48c 	.word	0x2000a48c
 80079b0:	2000a45c 	.word	0x2000a45c
 80079b4:	2000a46c 	.word	0x2000a46c
 80079b8:	2000a480 	.word	0x2000a480
 80079bc:	2000a486 	.word	0x2000a486
 80079c0:	2000a47c 	.word	0x2000a47c
 80079c4:	20004d24 	.word	0x20004d24
 80079c8:	20004d28 	.word	0x20004d28

080079cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <tcp_input_delayed_close+0x1c>
 80079da:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <tcp_input_delayed_close+0x6c>)
 80079dc:	f240 225a 	movw	r2, #602	; 0x25a
 80079e0:	4916      	ldr	r1, [pc, #88]	; (8007a3c <tcp_input_delayed_close+0x70>)
 80079e2:	4817      	ldr	r0, [pc, #92]	; (8007a40 <tcp_input_delayed_close+0x74>)
 80079e4:	f006 fc04 	bl	800e1f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80079e8:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <tcp_input_delayed_close+0x78>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01c      	beq.n	8007a2e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8b5b      	ldrh	r3, [r3, #26]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10d      	bne.n	8007a1c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <tcp_input_delayed_close+0x50>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6912      	ldr	r2, [r2, #16]
 8007a14:	f06f 010e 	mvn.w	r1, #14
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	480a      	ldr	r0, [pc, #40]	; (8007a48 <tcp_input_delayed_close+0x7c>)
 8007a20:	f7ff fa50 	bl	8006ec4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe f83d 	bl	8005aa4 <tcp_free>
    return 1;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	080102ac 	.word	0x080102ac
 8007a3c:	0801047c 	.word	0x0801047c
 8007a40:	080102f8 	.word	0x080102f8
 8007a44:	2000a489 	.word	0x2000a489
 8007a48:	2000a450 	.word	0x2000a450

08007a4c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007a4c:	b590      	push	{r4, r7, lr}
 8007a4e:	b08b      	sub	sp, #44	; 0x2c
 8007a50:	af04      	add	r7, sp, #16
 8007a52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007a54:	4b6f      	ldr	r3, [pc, #444]	; (8007c14 <tcp_listen_input+0x1c8>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f040 80d2 	bne.w	8007c06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <tcp_listen_input+0x2a>
 8007a68:	4b6b      	ldr	r3, [pc, #428]	; (8007c18 <tcp_listen_input+0x1cc>)
 8007a6a:	f240 2281 	movw	r2, #641	; 0x281
 8007a6e:	496b      	ldr	r1, [pc, #428]	; (8007c1c <tcp_listen_input+0x1d0>)
 8007a70:	486b      	ldr	r0, [pc, #428]	; (8007c20 <tcp_listen_input+0x1d4>)
 8007a72:	f006 fbbd 	bl	800e1f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007a76:	4b67      	ldr	r3, [pc, #412]	; (8007c14 <tcp_listen_input+0x1c8>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f003 0310 	and.w	r3, r3, #16
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d019      	beq.n	8007ab6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a82:	4b68      	ldr	r3, [pc, #416]	; (8007c24 <tcp_listen_input+0x1d8>)
 8007a84:	6819      	ldr	r1, [r3, #0]
 8007a86:	4b68      	ldr	r3, [pc, #416]	; (8007c28 <tcp_listen_input+0x1dc>)
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4b67      	ldr	r3, [pc, #412]	; (8007c2c <tcp_listen_input+0x1e0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a92:	4b67      	ldr	r3, [pc, #412]	; (8007c30 <tcp_listen_input+0x1e4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a96:	885b      	ldrh	r3, [r3, #2]
 8007a98:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a9a:	4a65      	ldr	r2, [pc, #404]	; (8007c30 <tcp_listen_input+0x1e4>)
 8007a9c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a9e:	8812      	ldrh	r2, [r2, #0]
 8007aa0:	b292      	uxth	r2, r2
 8007aa2:	9202      	str	r2, [sp, #8]
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	4b63      	ldr	r3, [pc, #396]	; (8007c34 <tcp_listen_input+0x1e8>)
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4b63      	ldr	r3, [pc, #396]	; (8007c38 <tcp_listen_input+0x1ec>)
 8007aac:	4602      	mov	r2, r0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f002 ff80 	bl	800a9b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007ab4:	e0a9      	b.n	8007c0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007ab6:	4b57      	ldr	r3, [pc, #348]	; (8007c14 <tcp_listen_input+0x1c8>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80a3 	beq.w	8007c0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7d5b      	ldrb	r3, [r3, #21]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff f927 	bl	8006d1c <tcp_alloc>
 8007ace:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d111      	bne.n	8007afa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <tcp_listen_input+0xa8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	6910      	ldr	r0, [r2, #16]
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	2100      	movs	r1, #0
 8007aec:	4798      	blx	r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	73bb      	strb	r3, [r7, #14]
      return;
 8007af2:	e08b      	b.n	8007c0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007af4:	23f0      	movs	r3, #240	; 0xf0
 8007af6:	73bb      	strb	r3, [r7, #14]
      return;
 8007af8:	e088      	b.n	8007c0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007afa:	4b50      	ldr	r3, [pc, #320]	; (8007c3c <tcp_listen_input+0x1f0>)
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007b02:	4b4e      	ldr	r3, [pc, #312]	; (8007c3c <tcp_listen_input+0x1f0>)
 8007b04:	691a      	ldr	r2, [r3, #16]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	8ada      	ldrh	r2, [r3, #22]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007b12:	4b47      	ldr	r3, [pc, #284]	; (8007c30 <tcp_listen_input+0x1e4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2203      	movs	r2, #3
 8007b22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007b24:	4b41      	ldr	r3, [pc, #260]	; (8007c2c <tcp_listen_input+0x1e0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007b36:	6978      	ldr	r0, [r7, #20]
 8007b38:	f7ff fa58 	bl	8006fec <tcp_next_iss>
 8007b3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007b56:	4b35      	ldr	r3, [pc, #212]	; (8007c2c <tcp_listen_input+0x1e0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	1e5a      	subs	r2, r3, #1
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691a      	ldr	r2, [r3, #16]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7a5b      	ldrb	r3, [r3, #9]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	7a1a      	ldrb	r2, [r3, #8]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007b84:	4b2e      	ldr	r3, [pc, #184]	; (8007c40 <tcp_listen_input+0x1f4>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	60da      	str	r2, [r3, #12]
 8007b8c:	4a2c      	ldr	r2, [pc, #176]	; (8007c40 <tcp_listen_input+0x1f4>)
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	f003 f8d1 	bl	800ad38 <tcp_timer_needed>
 8007b96:	4b2b      	ldr	r3, [pc, #172]	; (8007c44 <tcp_listen_input+0x1f8>)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007b9c:	6978      	ldr	r0, [r7, #20]
 8007b9e:	f001 fd8f 	bl	80096c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007ba2:	4b23      	ldr	r3, [pc, #140]	; (8007c30 <tcp_listen_input+0x1e4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	89db      	ldrh	r3, [r3, #14]
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f005 f827 	bl	800cc18 <ip4_route>
 8007bca:	4601      	mov	r1, r0
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7ff fa30 	bl	8007038 <tcp_eff_send_mss_netif>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461a      	mov	r2, r3
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007be0:	2112      	movs	r1, #18
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f002 f844 	bl	8009c70 <tcp_enqueue_flags>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	6978      	ldr	r0, [r7, #20]
 8007bf8:	f7fe f97e 	bl	8005ef8 <tcp_abandon>
      return;
 8007bfc:	e006      	b.n	8007c0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007bfe:	6978      	ldr	r0, [r7, #20]
 8007c00:	f002 f924 	bl	8009e4c <tcp_output>
  return;
 8007c04:	e001      	b.n	8007c0a <tcp_listen_input+0x1be>
    return;
 8007c06:	bf00      	nop
 8007c08:	e000      	b.n	8007c0c <tcp_listen_input+0x1c0>
  return;
 8007c0a:	bf00      	nop
}
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd90      	pop	{r4, r7, pc}
 8007c12:	bf00      	nop
 8007c14:	2000a488 	.word	0x2000a488
 8007c18:	080102ac 	.word	0x080102ac
 8007c1c:	080104a4 	.word	0x080104a4
 8007c20:	080102f8 	.word	0x080102f8
 8007c24:	2000a480 	.word	0x2000a480
 8007c28:	2000a486 	.word	0x2000a486
 8007c2c:	2000a47c 	.word	0x2000a47c
 8007c30:	2000a46c 	.word	0x2000a46c
 8007c34:	20004d24 	.word	0x20004d24
 8007c38:	20004d28 	.word	0x20004d28
 8007c3c:	20004d14 	.word	0x20004d14
 8007c40:	2000a450 	.word	0x2000a450
 8007c44:	2000a458 	.word	0x2000a458

08007c48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af04      	add	r7, sp, #16
 8007c4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007c50:	4b2f      	ldr	r3, [pc, #188]	; (8007d10 <tcp_timewait_input+0xc8>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d153      	bne.n	8007d04 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <tcp_timewait_input+0x28>
 8007c62:	4b2c      	ldr	r3, [pc, #176]	; (8007d14 <tcp_timewait_input+0xcc>)
 8007c64:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007c68:	492b      	ldr	r1, [pc, #172]	; (8007d18 <tcp_timewait_input+0xd0>)
 8007c6a:	482c      	ldr	r0, [pc, #176]	; (8007d1c <tcp_timewait_input+0xd4>)
 8007c6c:	f006 fac0 	bl	800e1f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007c70:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <tcp_timewait_input+0xc8>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d02a      	beq.n	8007cd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007c7c:	4b28      	ldr	r3, [pc, #160]	; (8007d20 <tcp_timewait_input+0xd8>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	db2d      	blt.n	8007ce6 <tcp_timewait_input+0x9e>
 8007c8a:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <tcp_timewait_input+0xd8>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007c96:	440b      	add	r3, r1
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dc23      	bgt.n	8007ce6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c9e:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <tcp_timewait_input+0xdc>)
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <tcp_timewait_input+0xe0>)
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <tcp_timewait_input+0xd8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cae:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <tcp_timewait_input+0xe4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cb2:	885b      	ldrh	r3, [r3, #2]
 8007cb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cb6:	4a1d      	ldr	r2, [pc, #116]	; (8007d2c <tcp_timewait_input+0xe4>)
 8007cb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cba:	8812      	ldrh	r2, [r2, #0]
 8007cbc:	b292      	uxth	r2, r2
 8007cbe:	9202      	str	r2, [sp, #8]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <tcp_timewait_input+0xe8>)
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4b1b      	ldr	r3, [pc, #108]	; (8007d34 <tcp_timewait_input+0xec>)
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f002 fe72 	bl	800a9b4 <tcp_rst>
      return;
 8007cd0:	e01b      	b.n	8007d0a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	; (8007d10 <tcp_timewait_input+0xc8>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <tcp_timewait_input+0xf0>)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007ce6:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <tcp_timewait_input+0xe0>)
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8b5b      	ldrh	r3, [r3, #26]
 8007cf2:	f043 0302 	orr.w	r3, r3, #2
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f002 f8a5 	bl	8009e4c <tcp_output>
  }
  return;
 8007d02:	e001      	b.n	8007d08 <tcp_timewait_input+0xc0>
    return;
 8007d04:	bf00      	nop
 8007d06:	e000      	b.n	8007d0a <tcp_timewait_input+0xc2>
  return;
 8007d08:	bf00      	nop
}
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	2000a488 	.word	0x2000a488
 8007d14:	080102ac 	.word	0x080102ac
 8007d18:	080104c4 	.word	0x080104c4
 8007d1c:	080102f8 	.word	0x080102f8
 8007d20:	2000a47c 	.word	0x2000a47c
 8007d24:	2000a480 	.word	0x2000a480
 8007d28:	2000a486 	.word	0x2000a486
 8007d2c:	2000a46c 	.word	0x2000a46c
 8007d30:	20004d24 	.word	0x20004d24
 8007d34:	20004d28 	.word	0x20004d28
 8007d38:	2000a444 	.word	0x2000a444

08007d3c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007d3c:	b590      	push	{r4, r7, lr}
 8007d3e:	b08d      	sub	sp, #52	; 0x34
 8007d40:	af04      	add	r7, sp, #16
 8007d42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <tcp_process+0x24>
 8007d52:	4b9d      	ldr	r3, [pc, #628]	; (8007fc8 <tcp_process+0x28c>)
 8007d54:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007d58:	499c      	ldr	r1, [pc, #624]	; (8007fcc <tcp_process+0x290>)
 8007d5a:	489d      	ldr	r0, [pc, #628]	; (8007fd0 <tcp_process+0x294>)
 8007d5c:	f006 fa48 	bl	800e1f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007d60:	4b9c      	ldr	r3, [pc, #624]	; (8007fd4 <tcp_process+0x298>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d04e      	beq.n	8007e0a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	7d1b      	ldrb	r3, [r3, #20]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d108      	bne.n	8007d86 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d78:	4b97      	ldr	r3, [pc, #604]	; (8007fd8 <tcp_process+0x29c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d123      	bne.n	8007dc8 <tcp_process+0x8c>
        acceptable = 1;
 8007d80:	2301      	movs	r3, #1
 8007d82:	76fb      	strb	r3, [r7, #27]
 8007d84:	e020      	b.n	8007dc8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d8a:	4b94      	ldr	r3, [pc, #592]	; (8007fdc <tcp_process+0x2a0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d102      	bne.n	8007d98 <tcp_process+0x5c>
        acceptable = 1;
 8007d92:	2301      	movs	r3, #1
 8007d94:	76fb      	strb	r3, [r7, #27]
 8007d96:	e017      	b.n	8007dc8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007d98:	4b90      	ldr	r3, [pc, #576]	; (8007fdc <tcp_process+0x2a0>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	db10      	blt.n	8007dc8 <tcp_process+0x8c>
 8007da6:	4b8d      	ldr	r3, [pc, #564]	; (8007fdc <tcp_process+0x2a0>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007db2:	440b      	add	r3, r1
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dc06      	bgt.n	8007dc8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8b5b      	ldrh	r3, [r3, #26]
 8007dbe:	f043 0302 	orr.w	r3, r3, #2
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007dc8:	7efb      	ldrb	r3, [r7, #27]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01b      	beq.n	8007e06 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7d1b      	ldrb	r3, [r3, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <tcp_process+0xa8>
 8007dd6:	4b7c      	ldr	r3, [pc, #496]	; (8007fc8 <tcp_process+0x28c>)
 8007dd8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007ddc:	4980      	ldr	r1, [pc, #512]	; (8007fe0 <tcp_process+0x2a4>)
 8007dde:	487c      	ldr	r0, [pc, #496]	; (8007fd0 <tcp_process+0x294>)
 8007de0:	f006 fa06 	bl	800e1f0 <iprintf>
      recv_flags |= TF_RESET;
 8007de4:	4b7f      	ldr	r3, [pc, #508]	; (8007fe4 <tcp_process+0x2a8>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f043 0308 	orr.w	r3, r3, #8
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4b7d      	ldr	r3, [pc, #500]	; (8007fe4 <tcp_process+0x2a8>)
 8007df0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	8b5b      	ldrh	r3, [r3, #26]
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007e00:	f06f 030d 	mvn.w	r3, #13
 8007e04:	e37a      	b.n	80084fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e378      	b.n	80084fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007e0a:	4b72      	ldr	r3, [pc, #456]	; (8007fd4 <tcp_process+0x298>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d010      	beq.n	8007e38 <tcp_process+0xfc>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7d1b      	ldrb	r3, [r3, #20]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d00c      	beq.n	8007e38 <tcp_process+0xfc>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7d1b      	ldrb	r3, [r3, #20]
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d008      	beq.n	8007e38 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	8b5b      	ldrh	r3, [r3, #26]
 8007e2a:	f043 0302 	orr.w	r3, r3, #2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e361      	b.n	80084fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8b5b      	ldrh	r3, [r3, #26]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007e44:	4b68      	ldr	r3, [pc, #416]	; (8007fe8 <tcp_process+0x2ac>)
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fc2f 	bl	80096c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7d1b      	ldrb	r3, [r3, #20]
 8007e66:	3b02      	subs	r3, #2
 8007e68:	2b07      	cmp	r3, #7
 8007e6a:	f200 8337 	bhi.w	80084dc <tcp_process+0x7a0>
 8007e6e:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <tcp_process+0x138>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e95 	.word	0x08007e95
 8007e78:	080080c5 	.word	0x080080c5
 8007e7c:	0800823d 	.word	0x0800823d
 8007e80:	08008267 	.word	0x08008267
 8007e84:	0800838b 	.word	0x0800838b
 8007e88:	0800823d 	.word	0x0800823d
 8007e8c:	08008417 	.word	0x08008417
 8007e90:	080084a7 	.word	0x080084a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007e94:	4b4f      	ldr	r3, [pc, #316]	; (8007fd4 <tcp_process+0x298>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 0310 	and.w	r3, r3, #16
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 80e4 	beq.w	800806a <tcp_process+0x32e>
 8007ea2:	4b4c      	ldr	r3, [pc, #304]	; (8007fd4 <tcp_process+0x298>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 80dd 	beq.w	800806a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	4b48      	ldr	r3, [pc, #288]	; (8007fd8 <tcp_process+0x29c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	f040 80d5 	bne.w	800806a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007ec0:	4b46      	ldr	r3, [pc, #280]	; (8007fdc <tcp_process+0x2a0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007ed2:	4b41      	ldr	r3, [pc, #260]	; (8007fd8 <tcp_process+0x29c>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007eda:	4b44      	ldr	r3, [pc, #272]	; (8007fec <tcp_process+0x2b0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	89db      	ldrh	r3, [r3, #14]
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007ef4:	4b39      	ldr	r3, [pc, #228]	; (8007fdc <tcp_process+0x2a0>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2204      	movs	r2, #4
 8007f02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f004 fe83 	bl	800cc18 <ip4_route>
 8007f12:	4601      	mov	r1, r0
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f7ff f88c 	bl	8007038 <tcp_eff_send_mss_netif>
 8007f20:	4603      	mov	r3, r0
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f2c:	009a      	lsls	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	f241 111c 	movw	r1, #4380	; 0x111c
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	bf38      	it	cc
 8007f3c:	460b      	movcc	r3, r1
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d204      	bcs.n	8007f4c <tcp_process+0x210>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	e00d      	b.n	8007f68 <tcp_process+0x22c>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	f241 121c 	movw	r2, #4380	; 0x111c
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d904      	bls.n	8007f64 <tcp_process+0x228>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f5e:	005b      	lsls	r3, r3, #1
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	e001      	b.n	8007f68 <tcp_process+0x22c>
 8007f64:	f241 131c 	movw	r3, #4380	; 0x111c
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <tcp_process+0x24a>
 8007f78:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <tcp_process+0x28c>)
 8007f7a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007f7e:	491c      	ldr	r1, [pc, #112]	; (8007ff0 <tcp_process+0x2b4>)
 8007f80:	4813      	ldr	r0, [pc, #76]	; (8007fd0 <tcp_process+0x294>)
 8007f82:	f006 f935 	bl	800e1f0 <iprintf>
        --pcb->snd_queuelen;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d12a      	bne.n	8007ff8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <tcp_process+0x280>
 8007fae:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <tcp_process+0x28c>)
 8007fb0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007fb4:	490f      	ldr	r1, [pc, #60]	; (8007ff4 <tcp_process+0x2b8>)
 8007fb6:	4806      	ldr	r0, [pc, #24]	; (8007fd0 <tcp_process+0x294>)
 8007fb8:	f006 f91a 	bl	800e1f0 <iprintf>
          pcb->unsent = rseg->next;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8007fc4:	e01c      	b.n	8008000 <tcp_process+0x2c4>
 8007fc6:	bf00      	nop
 8007fc8:	080102ac 	.word	0x080102ac
 8007fcc:	080104e4 	.word	0x080104e4
 8007fd0:	080102f8 	.word	0x080102f8
 8007fd4:	2000a488 	.word	0x2000a488
 8007fd8:	2000a480 	.word	0x2000a480
 8007fdc:	2000a47c 	.word	0x2000a47c
 8007fe0:	08010500 	.word	0x08010500
 8007fe4:	2000a489 	.word	0x2000a489
 8007fe8:	2000a444 	.word	0x2000a444
 8007fec:	2000a46c 	.word	0x2000a46c
 8007ff0:	08010520 	.word	0x08010520
 8007ff4:	08010538 	.word	0x08010538
        } else {
          pcb->unacked = rseg->next;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008000:	69f8      	ldr	r0, [r7, #28]
 8008002:	f7fe fd22 	bl	8006a4a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	2b00      	cmp	r3, #0
 800800c:	d104      	bne.n	8008018 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008014:	861a      	strh	r2, [r3, #48]	; 0x30
 8008016:	e006      	b.n	8008026 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <tcp_process+0x30a>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6910      	ldr	r0, [r2, #16]
 800803a:	2200      	movs	r2, #0
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4798      	blx	r3
 8008040:	4603      	mov	r3, r0
 8008042:	76bb      	strb	r3, [r7, #26]
 8008044:	e001      	b.n	800804a <tcp_process+0x30e>
 8008046:	2300      	movs	r3, #0
 8008048:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800804a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800804e:	f113 0f0d 	cmn.w	r3, #13
 8008052:	d102      	bne.n	800805a <tcp_process+0x31e>
          return ERR_ABRT;
 8008054:	f06f 030c 	mvn.w	r3, #12
 8008058:	e250      	b.n	80084fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8b5b      	ldrh	r3, [r3, #26]
 800805e:	f043 0302 	orr.w	r3, r3, #2
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008068:	e23a      	b.n	80084e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800806a:	4b98      	ldr	r3, [pc, #608]	; (80082cc <tcp_process+0x590>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8234 	beq.w	80084e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008078:	4b95      	ldr	r3, [pc, #596]	; (80082d0 <tcp_process+0x594>)
 800807a:	6819      	ldr	r1, [r3, #0]
 800807c:	4b95      	ldr	r3, [pc, #596]	; (80082d4 <tcp_process+0x598>)
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	4b95      	ldr	r3, [pc, #596]	; (80082d8 <tcp_process+0x59c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008088:	4b94      	ldr	r3, [pc, #592]	; (80082dc <tcp_process+0x5a0>)
 800808a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800808c:	885b      	ldrh	r3, [r3, #2]
 800808e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008090:	4a92      	ldr	r2, [pc, #584]	; (80082dc <tcp_process+0x5a0>)
 8008092:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008094:	8812      	ldrh	r2, [r2, #0]
 8008096:	b292      	uxth	r2, r2
 8008098:	9202      	str	r2, [sp, #8]
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	4b90      	ldr	r3, [pc, #576]	; (80082e0 <tcp_process+0x5a4>)
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	4b90      	ldr	r3, [pc, #576]	; (80082e4 <tcp_process+0x5a8>)
 80080a2:	4602      	mov	r2, r0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f002 fc85 	bl	800a9b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080b0:	2b05      	cmp	r3, #5
 80080b2:	f200 8215 	bhi.w	80084e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 fa51 	bl	800a564 <tcp_rexmit_rto>
      break;
 80080c2:	e20d      	b.n	80084e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80080c4:	4b81      	ldr	r3, [pc, #516]	; (80082cc <tcp_process+0x590>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80a1 	beq.w	8008214 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80080d2:	4b7f      	ldr	r3, [pc, #508]	; (80082d0 <tcp_process+0x594>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	db7e      	blt.n	80081e0 <tcp_process+0x4a4>
 80080e2:	4b7b      	ldr	r3, [pc, #492]	; (80082d0 <tcp_process+0x594>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dc77      	bgt.n	80081e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2204      	movs	r2, #4
 80080f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80080fe:	23fa      	movs	r3, #250	; 0xfa
 8008100:	76bb      	strb	r3, [r7, #26]
 8008102:	e01d      	b.n	8008140 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <tcp_process+0x3e0>
 800810e:	4b76      	ldr	r3, [pc, #472]	; (80082e8 <tcp_process+0x5ac>)
 8008110:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008114:	4975      	ldr	r1, [pc, #468]	; (80082ec <tcp_process+0x5b0>)
 8008116:	4876      	ldr	r0, [pc, #472]	; (80082f0 <tcp_process+0x5b4>)
 8008118:	f006 f86a 	bl	800e1f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <tcp_process+0x400>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6910      	ldr	r0, [r2, #16]
 8008130:	2200      	movs	r2, #0
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4798      	blx	r3
 8008136:	4603      	mov	r3, r0
 8008138:	76bb      	strb	r3, [r7, #26]
 800813a:	e001      	b.n	8008140 <tcp_process+0x404>
 800813c:	23f0      	movs	r3, #240	; 0xf0
 800813e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008140:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00a      	beq.n	800815e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008148:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800814c:	f113 0f0d 	cmn.w	r3, #13
 8008150:	d002      	beq.n	8008158 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fd ff8e 	bl	8006074 <tcp_abort>
            }
            return ERR_ABRT;
 8008158:	f06f 030c 	mvn.w	r3, #12
 800815c:	e1ce      	b.n	80084fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fae0 	bl	8008724 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008164:	4b63      	ldr	r3, [pc, #396]	; (80082f4 <tcp_process+0x5b8>)
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <tcp_process+0x43c>
            recv_acked--;
 800816c:	4b61      	ldr	r3, [pc, #388]	; (80082f4 <tcp_process+0x5b8>)
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	4b5f      	ldr	r3, [pc, #380]	; (80082f4 <tcp_process+0x5b8>)
 8008176:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800817c:	009a      	lsls	r2, r3, #2
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	f241 111c 	movw	r1, #4380	; 0x111c
 8008188:	428b      	cmp	r3, r1
 800818a:	bf38      	it	cc
 800818c:	460b      	movcc	r3, r1
 800818e:	429a      	cmp	r2, r3
 8008190:	d204      	bcs.n	800819c <tcp_process+0x460>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	b29b      	uxth	r3, r3
 800819a:	e00d      	b.n	80081b8 <tcp_process+0x47c>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	f241 121c 	movw	r2, #4380	; 0x111c
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d904      	bls.n	80081b4 <tcp_process+0x478>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	e001      	b.n	80081b8 <tcp_process+0x47c>
 80081b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80081be:	4b4e      	ldr	r3, [pc, #312]	; (80082f8 <tcp_process+0x5bc>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d037      	beq.n	800823a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8b5b      	ldrh	r3, [r3, #26]
 80081ce:	f043 0302 	orr.w	r3, r3, #2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2207      	movs	r2, #7
 80081dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80081de:	e02c      	b.n	800823a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081e0:	4b3b      	ldr	r3, [pc, #236]	; (80082d0 <tcp_process+0x594>)
 80081e2:	6819      	ldr	r1, [r3, #0]
 80081e4:	4b3b      	ldr	r3, [pc, #236]	; (80082d4 <tcp_process+0x598>)
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	461a      	mov	r2, r3
 80081ea:	4b3b      	ldr	r3, [pc, #236]	; (80082d8 <tcp_process+0x59c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081f0:	4b3a      	ldr	r3, [pc, #232]	; (80082dc <tcp_process+0x5a0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081f8:	4a38      	ldr	r2, [pc, #224]	; (80082dc <tcp_process+0x5a0>)
 80081fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081fc:	8812      	ldrh	r2, [r2, #0]
 80081fe:	b292      	uxth	r2, r2
 8008200:	9202      	str	r2, [sp, #8]
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	4b36      	ldr	r3, [pc, #216]	; (80082e0 <tcp_process+0x5a4>)
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4b36      	ldr	r3, [pc, #216]	; (80082e4 <tcp_process+0x5a8>)
 800820a:	4602      	mov	r2, r0
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f002 fbd1 	bl	800a9b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008212:	e167      	b.n	80084e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008214:	4b2d      	ldr	r3, [pc, #180]	; (80082cc <tcp_process+0x590>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8161 	beq.w	80084e4 <tcp_process+0x7a8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	1e5a      	subs	r2, r3, #1
 8008228:	4b2b      	ldr	r3, [pc, #172]	; (80082d8 <tcp_process+0x59c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	f040 8159 	bne.w	80084e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f002 f9b8 	bl	800a5a8 <tcp_rexmit>
      break;
 8008238:	e154      	b.n	80084e4 <tcp_process+0x7a8>
 800823a:	e153      	b.n	80084e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa71 	bl	8008724 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008242:	4b2d      	ldr	r3, [pc, #180]	; (80082f8 <tcp_process+0x5bc>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 814c 	beq.w	80084e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	8b5b      	ldrh	r3, [r3, #26]
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	b29a      	uxth	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2207      	movs	r2, #7
 8008262:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008264:	e140      	b.n	80084e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa5c 	bl	8008724 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800826c:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <tcp_process+0x5bc>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	d071      	beq.n	800835c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008278:	4b14      	ldr	r3, [pc, #80]	; (80082cc <tcp_process+0x590>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	d060      	beq.n	8008346 <tcp_process+0x60a>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008288:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <tcp_process+0x594>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d15a      	bne.n	8008346 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008294:	2b00      	cmp	r3, #0
 8008296:	d156      	bne.n	8008346 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	8b5b      	ldrh	r3, [r3, #26]
 800829c:	f043 0302 	orr.w	r3, r3, #2
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fe fdbc 	bl	8006e24 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80082ac:	4b13      	ldr	r3, [pc, #76]	; (80082fc <tcp_process+0x5c0>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d105      	bne.n	80082c2 <tcp_process+0x586>
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <tcp_process+0x5c0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	4a0f      	ldr	r2, [pc, #60]	; (80082fc <tcp_process+0x5c0>)
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e02e      	b.n	8008320 <tcp_process+0x5e4>
 80082c2:	4b0e      	ldr	r3, [pc, #56]	; (80082fc <tcp_process+0x5c0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	e027      	b.n	800831a <tcp_process+0x5de>
 80082ca:	bf00      	nop
 80082cc:	2000a488 	.word	0x2000a488
 80082d0:	2000a480 	.word	0x2000a480
 80082d4:	2000a486 	.word	0x2000a486
 80082d8:	2000a47c 	.word	0x2000a47c
 80082dc:	2000a46c 	.word	0x2000a46c
 80082e0:	20004d24 	.word	0x20004d24
 80082e4:	20004d28 	.word	0x20004d28
 80082e8:	080102ac 	.word	0x080102ac
 80082ec:	0801054c 	.word	0x0801054c
 80082f0:	080102f8 	.word	0x080102f8
 80082f4:	2000a484 	.word	0x2000a484
 80082f8:	2000a489 	.word	0x2000a489
 80082fc:	2000a450 	.word	0x2000a450
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d104      	bne.n	8008314 <tcp_process+0x5d8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	e005      	b.n	8008320 <tcp_process+0x5e4>
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1ef      	bne.n	8008300 <tcp_process+0x5c4>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	4b77      	ldr	r3, [pc, #476]	; (8008504 <tcp_process+0x7c8>)
 8008328:	2201      	movs	r2, #1
 800832a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	220a      	movs	r2, #10
 8008330:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008332:	4b75      	ldr	r3, [pc, #468]	; (8008508 <tcp_process+0x7cc>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60da      	str	r2, [r3, #12]
 800833a:	4a73      	ldr	r2, [pc, #460]	; (8008508 <tcp_process+0x7cc>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	f002 fcfa 	bl	800ad38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008344:	e0d2      	b.n	80084ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	8b5b      	ldrh	r3, [r3, #26]
 800834a:	f043 0302 	orr.w	r3, r3, #2
 800834e:	b29a      	uxth	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2208      	movs	r2, #8
 8008358:	751a      	strb	r2, [r3, #20]
      break;
 800835a:	e0c7      	b.n	80084ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800835c:	4b6b      	ldr	r3, [pc, #428]	; (800850c <tcp_process+0x7d0>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 80c1 	beq.w	80084ec <tcp_process+0x7b0>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800836e:	4b68      	ldr	r3, [pc, #416]	; (8008510 <tcp_process+0x7d4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	f040 80ba 	bne.w	80084ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 80b5 	bne.w	80084ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2206      	movs	r2, #6
 8008386:	751a      	strb	r2, [r3, #20]
      break;
 8008388:	e0b0      	b.n	80084ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f9ca 	bl	8008724 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008390:	4b60      	ldr	r3, [pc, #384]	; (8008514 <tcp_process+0x7d8>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80a9 	beq.w	80084f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	8b5b      	ldrh	r3, [r3, #26]
 80083a2:	f043 0302 	orr.w	r3, r3, #2
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fe fd39 	bl	8006e24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80083b2:	4b59      	ldr	r3, [pc, #356]	; (8008518 <tcp_process+0x7dc>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d105      	bne.n	80083c8 <tcp_process+0x68c>
 80083bc:	4b56      	ldr	r3, [pc, #344]	; (8008518 <tcp_process+0x7dc>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	4a55      	ldr	r2, [pc, #340]	; (8008518 <tcp_process+0x7dc>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e013      	b.n	80083f0 <tcp_process+0x6b4>
 80083c8:	4b53      	ldr	r3, [pc, #332]	; (8008518 <tcp_process+0x7dc>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	613b      	str	r3, [r7, #16]
 80083ce:	e00c      	b.n	80083ea <tcp_process+0x6ae>
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d104      	bne.n	80083e4 <tcp_process+0x6a8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	60da      	str	r2, [r3, #12]
 80083e2:	e005      	b.n	80083f0 <tcp_process+0x6b4>
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1ef      	bne.n	80083d0 <tcp_process+0x694>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	60da      	str	r2, [r3, #12]
 80083f6:	4b43      	ldr	r3, [pc, #268]	; (8008504 <tcp_process+0x7c8>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	220a      	movs	r2, #10
 8008400:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008402:	4b41      	ldr	r3, [pc, #260]	; (8008508 <tcp_process+0x7cc>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60da      	str	r2, [r3, #12]
 800840a:	4a3f      	ldr	r2, [pc, #252]	; (8008508 <tcp_process+0x7cc>)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	f002 fc92 	bl	800ad38 <tcp_timer_needed>
      }
      break;
 8008414:	e06c      	b.n	80084f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f984 	bl	8008724 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800841c:	4b3b      	ldr	r3, [pc, #236]	; (800850c <tcp_process+0x7d0>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b00      	cmp	r3, #0
 8008426:	d065      	beq.n	80084f4 <tcp_process+0x7b8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800842c:	4b38      	ldr	r3, [pc, #224]	; (8008510 <tcp_process+0x7d4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d15f      	bne.n	80084f4 <tcp_process+0x7b8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d15b      	bne.n	80084f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7fe fcf1 	bl	8006e24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008442:	4b35      	ldr	r3, [pc, #212]	; (8008518 <tcp_process+0x7dc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	429a      	cmp	r2, r3
 800844a:	d105      	bne.n	8008458 <tcp_process+0x71c>
 800844c:	4b32      	ldr	r3, [pc, #200]	; (8008518 <tcp_process+0x7dc>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	4a31      	ldr	r2, [pc, #196]	; (8008518 <tcp_process+0x7dc>)
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e013      	b.n	8008480 <tcp_process+0x744>
 8008458:	4b2f      	ldr	r3, [pc, #188]	; (8008518 <tcp_process+0x7dc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	e00c      	b.n	800847a <tcp_process+0x73e>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d104      	bne.n	8008474 <tcp_process+0x738>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	60da      	str	r2, [r3, #12]
 8008472:	e005      	b.n	8008480 <tcp_process+0x744>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1ef      	bne.n	8008460 <tcp_process+0x724>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	60da      	str	r2, [r3, #12]
 8008486:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <tcp_process+0x7c8>)
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	220a      	movs	r2, #10
 8008490:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008492:	4b1d      	ldr	r3, [pc, #116]	; (8008508 <tcp_process+0x7cc>)
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60da      	str	r2, [r3, #12]
 800849a:	4a1b      	ldr	r2, [pc, #108]	; (8008508 <tcp_process+0x7cc>)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	f002 fc4a 	bl	800ad38 <tcp_timer_needed>
      }
      break;
 80084a4:	e026      	b.n	80084f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f93c 	bl	8008724 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80084ac:	4b17      	ldr	r3, [pc, #92]	; (800850c <tcp_process+0x7d0>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01f      	beq.n	80084f8 <tcp_process+0x7bc>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084bc:	4b14      	ldr	r3, [pc, #80]	; (8008510 <tcp_process+0x7d4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d119      	bne.n	80084f8 <tcp_process+0x7bc>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d115      	bne.n	80084f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80084cc:	4b11      	ldr	r3, [pc, #68]	; (8008514 <tcp_process+0x7d8>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f043 0310 	orr.w	r3, r3, #16
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <tcp_process+0x7d8>)
 80084d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80084da:	e00d      	b.n	80084f8 <tcp_process+0x7bc>
    default:
      break;
 80084dc:	bf00      	nop
 80084de:	e00c      	b.n	80084fa <tcp_process+0x7be>
      break;
 80084e0:	bf00      	nop
 80084e2:	e00a      	b.n	80084fa <tcp_process+0x7be>
      break;
 80084e4:	bf00      	nop
 80084e6:	e008      	b.n	80084fa <tcp_process+0x7be>
      break;
 80084e8:	bf00      	nop
 80084ea:	e006      	b.n	80084fa <tcp_process+0x7be>
      break;
 80084ec:	bf00      	nop
 80084ee:	e004      	b.n	80084fa <tcp_process+0x7be>
      break;
 80084f0:	bf00      	nop
 80084f2:	e002      	b.n	80084fa <tcp_process+0x7be>
      break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <tcp_process+0x7be>
      break;
 80084f8:	bf00      	nop
  }
  return ERR_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3724      	adds	r7, #36	; 0x24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd90      	pop	{r4, r7, pc}
 8008504:	2000a458 	.word	0x2000a458
 8008508:	2000a454 	.word	0x2000a454
 800850c:	2000a488 	.word	0x2000a488
 8008510:	2000a480 	.word	0x2000a480
 8008514:	2000a489 	.word	0x2000a489
 8008518:	2000a450 	.word	0x2000a450

0800851c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <tcp_oos_insert_segment+0x1e>
 800852c:	4b3b      	ldr	r3, [pc, #236]	; (800861c <tcp_oos_insert_segment+0x100>)
 800852e:	f240 421f 	movw	r2, #1055	; 0x41f
 8008532:	493b      	ldr	r1, [pc, #236]	; (8008620 <tcp_oos_insert_segment+0x104>)
 8008534:	483b      	ldr	r0, [pc, #236]	; (8008624 <tcp_oos_insert_segment+0x108>)
 8008536:	f005 fe5b 	bl	800e1f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	899b      	ldrh	r3, [r3, #12]
 8008540:	b29b      	uxth	r3, r3
 8008542:	4618      	mov	r0, r3
 8008544:	f7fb fc0e 	bl	8003d64 <lwip_htons>
 8008548:	4603      	mov	r3, r0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d028      	beq.n	80085a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008554:	6838      	ldr	r0, [r7, #0]
 8008556:	f7fe fa63 	bl	8006a20 <tcp_segs_free>
    next = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	e056      	b.n	800860e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	899b      	ldrh	r3, [r3, #12]
 8008566:	b29b      	uxth	r3, r3
 8008568:	4618      	mov	r0, r3
 800856a:	f7fb fbfb 	bl	8003d64 <lwip_htons>
 800856e:	4603      	mov	r3, r0
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	899b      	ldrh	r3, [r3, #12]
 8008580:	b29c      	uxth	r4, r3
 8008582:	2001      	movs	r0, #1
 8008584:	f7fb fbee 	bl	8003d64 <lwip_htons>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	4322      	orrs	r2, r4
 8008592:	b292      	uxth	r2, r2
 8008594:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7fe fa52 	bl	8006a4a <tcp_seg_free>
    while (next &&
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00e      	beq.n	80085ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	891b      	ldrh	r3, [r3, #8]
 80085b0:	461a      	mov	r2, r3
 80085b2:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <tcp_oos_insert_segment+0x10c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	441a      	add	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	8909      	ldrh	r1, [r1, #8]
 80085c2:	440b      	add	r3, r1
 80085c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	daca      	bge.n	8008560 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01e      	beq.n	800860e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	891b      	ldrh	r3, [r3, #8]
 80085d4:	461a      	mov	r2, r3
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <tcp_oos_insert_segment+0x10c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	441a      	add	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dd12      	ble.n	800860e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <tcp_oos_insert_segment+0x10c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	891b      	ldrh	r3, [r3, #8]
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fc fd83 	bl	8005114 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	601a      	str	r2, [r3, #0]
}
 8008614:	bf00      	nop
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	bd90      	pop	{r4, r7, pc}
 800861c:	080102ac 	.word	0x080102ac
 8008620:	0801056c 	.word	0x0801056c
 8008624:	080102f8 	.word	0x080102f8
 8008628:	2000a47c 	.word	0x2000a47c

0800862c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800862c:	b5b0      	push	{r4, r5, r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800863a:	e03e      	b.n	80086ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	4618      	mov	r0, r3
 800864c:	f7fc ff70 	bl	8005530 <pbuf_clen>
 8008650:	4603      	mov	r3, r0
 8008652:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800865a:	8a7a      	ldrh	r2, [r7, #18]
 800865c:	429a      	cmp	r2, r3
 800865e:	d906      	bls.n	800866e <tcp_free_acked_segments+0x42>
 8008660:	4b2a      	ldr	r3, [pc, #168]	; (800870c <tcp_free_acked_segments+0xe0>)
 8008662:	f240 4257 	movw	r2, #1111	; 0x457
 8008666:	492a      	ldr	r1, [pc, #168]	; (8008710 <tcp_free_acked_segments+0xe4>)
 8008668:	482a      	ldr	r0, [pc, #168]	; (8008714 <tcp_free_acked_segments+0xe8>)
 800866a:	f005 fdc1 	bl	800e1f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008674:	8a7b      	ldrh	r3, [r7, #18]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	891a      	ldrh	r2, [r3, #8]
 8008684:	4b24      	ldr	r3, [pc, #144]	; (8008718 <tcp_free_acked_segments+0xec>)
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	4413      	add	r3, r2
 800868a:	b29a      	uxth	r2, r3
 800868c:	4b22      	ldr	r3, [pc, #136]	; (8008718 <tcp_free_acked_segments+0xec>)
 800868e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008690:	6978      	ldr	r0, [r7, #20]
 8008692:	f7fe f9da 	bl	8006a4a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <tcp_free_acked_segments+0x8e>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <tcp_free_acked_segments+0x8e>
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <tcp_free_acked_segments+0xe0>)
 80086ae:	f240 4261 	movw	r2, #1121	; 0x461
 80086b2:	491a      	ldr	r1, [pc, #104]	; (800871c <tcp_free_acked_segments+0xf0>)
 80086b4:	4817      	ldr	r0, [pc, #92]	; (8008714 <tcp_free_acked_segments+0xe8>)
 80086b6:	f005 fd9b 	bl	800e1f0 <iprintf>
  while (seg_list != NULL &&
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d020      	beq.n	8008702 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fb fb61 	bl	8003d8e <lwip_htonl>
 80086cc:	4604      	mov	r4, r0
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	891b      	ldrh	r3, [r3, #8]
 80086d2:	461d      	mov	r5, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	899b      	ldrh	r3, [r3, #12]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fb fb41 	bl	8003d64 <lwip_htons>
 80086e2:	4603      	mov	r3, r0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <tcp_free_acked_segments+0xc6>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <tcp_free_acked_segments+0xc8>
 80086f2:	2300      	movs	r3, #0
 80086f4:	442b      	add	r3, r5
 80086f6:	18e2      	adds	r2, r4, r3
 80086f8:	4b09      	ldr	r3, [pc, #36]	; (8008720 <tcp_free_acked_segments+0xf4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd9c      	ble.n	800863c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008702:	68bb      	ldr	r3, [r7, #8]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bdb0      	pop	{r4, r5, r7, pc}
 800870c:	080102ac 	.word	0x080102ac
 8008710:	08010594 	.word	0x08010594
 8008714:	080102f8 	.word	0x080102f8
 8008718:	2000a484 	.word	0x2000a484
 800871c:	080105bc 	.word	0x080105bc
 8008720:	2000a480 	.word	0x2000a480

08008724 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008724:	b5b0      	push	{r4, r5, r7, lr}
 8008726:	b094      	sub	sp, #80	; 0x50
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <tcp_receive+0x20>
 8008736:	4b91      	ldr	r3, [pc, #580]	; (800897c <tcp_receive+0x258>)
 8008738:	f240 427b 	movw	r2, #1147	; 0x47b
 800873c:	4990      	ldr	r1, [pc, #576]	; (8008980 <tcp_receive+0x25c>)
 800873e:	4891      	ldr	r0, [pc, #580]	; (8008984 <tcp_receive+0x260>)
 8008740:	f005 fd56 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7d1b      	ldrb	r3, [r3, #20]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d806      	bhi.n	800875a <tcp_receive+0x36>
 800874c:	4b8b      	ldr	r3, [pc, #556]	; (800897c <tcp_receive+0x258>)
 800874e:	f240 427c 	movw	r2, #1148	; 0x47c
 8008752:	498d      	ldr	r1, [pc, #564]	; (8008988 <tcp_receive+0x264>)
 8008754:	488b      	ldr	r0, [pc, #556]	; (8008984 <tcp_receive+0x260>)
 8008756:	f005 fd4b 	bl	800e1f0 <iprintf>

  if (flags & TCP_ACK) {
 800875a:	4b8c      	ldr	r3, [pc, #560]	; (800898c <tcp_receive+0x268>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	f003 0310 	and.w	r3, r3, #16
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 8264 	beq.w	8008c30 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800876e:	461a      	mov	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008774:	4413      	add	r3, r2
 8008776:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800877c:	4b84      	ldr	r3, [pc, #528]	; (8008990 <tcp_receive+0x26c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	db1b      	blt.n	80087be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800878a:	4b81      	ldr	r3, [pc, #516]	; (8008990 <tcp_receive+0x26c>)
 800878c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800878e:	429a      	cmp	r2, r3
 8008790:	d106      	bne.n	80087a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008796:	4b7f      	ldr	r3, [pc, #508]	; (8008994 <tcp_receive+0x270>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	db0e      	blt.n	80087be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087a4:	4b7b      	ldr	r3, [pc, #492]	; (8008994 <tcp_receive+0x270>)
 80087a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d125      	bne.n	80087f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80087ac:	4b7a      	ldr	r3, [pc, #488]	; (8008998 <tcp_receive+0x274>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	89db      	ldrh	r3, [r3, #14]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d91c      	bls.n	80087f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80087be:	4b76      	ldr	r3, [pc, #472]	; (8008998 <tcp_receive+0x274>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	89db      	ldrh	r3, [r3, #14]
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087d8:	429a      	cmp	r2, r3
 80087da:	d205      	bcs.n	80087e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80087e8:	4b69      	ldr	r3, [pc, #420]	; (8008990 <tcp_receive+0x26c>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80087f0:	4b68      	ldr	r3, [pc, #416]	; (8008994 <tcp_receive+0x270>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80087f8:	4b66      	ldr	r3, [pc, #408]	; (8008994 <tcp_receive+0x270>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	dc58      	bgt.n	80088b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008806:	4b65      	ldr	r3, [pc, #404]	; (800899c <tcp_receive+0x278>)
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d14b      	bne.n	80088a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008818:	4413      	add	r3, r2
 800881a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800881c:	429a      	cmp	r2, r3
 800881e:	d142      	bne.n	80088a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008826:	2b00      	cmp	r3, #0
 8008828:	db3d      	blt.n	80088a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800882e:	4b59      	ldr	r3, [pc, #356]	; (8008994 <tcp_receive+0x270>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d137      	bne.n	80088a6 <tcp_receive+0x182>
              found_dupack = 1;
 8008836:	2301      	movs	r3, #1
 8008838:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008840:	2bff      	cmp	r3, #255	; 0xff
 8008842:	d007      	beq.n	8008854 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800884a:	3301      	adds	r3, #1
 800884c:	b2da      	uxtb	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800885a:	2b03      	cmp	r3, #3
 800885c:	d91b      	bls.n	8008896 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008868:	4413      	add	r3, r2
 800886a:	b29a      	uxth	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008872:	429a      	cmp	r2, r3
 8008874:	d30a      	bcc.n	800888c <tcp_receive+0x168>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008880:	4413      	add	r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800888a:	e004      	b.n	8008896 <tcp_receive+0x172>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800889c:	2b02      	cmp	r3, #2
 800889e:	d902      	bls.n	80088a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 feed 	bl	800a680 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80088a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f040 8161 	bne.w	8008b70 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088b6:	e15b      	b.n	8008b70 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80088b8:	4b36      	ldr	r3, [pc, #216]	; (8008994 <tcp_receive+0x270>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f2c0 814e 	blt.w	8008b66 <tcp_receive+0x442>
 80088ca:	4b32      	ldr	r3, [pc, #200]	; (8008994 <tcp_receive+0x270>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f300 8146 	bgt.w	8008b66 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	8b5b      	ldrh	r3, [r3, #26]
 80088de:	f003 0304 	and.w	r3, r3, #4
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d010      	beq.n	8008908 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	8b5b      	ldrh	r3, [r3, #26]
 80088ea:	f023 0304 	bic.w	r3, r3, #4
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008916:	10db      	asrs	r3, r3, #3
 8008918:	b21b      	sxth	r3, r3
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008922:	b29b      	uxth	r3, r3
 8008924:	4413      	add	r3, r2
 8008926:	b29b      	uxth	r3, r3
 8008928:	b21a      	sxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008930:	4b18      	ldr	r3, [pc, #96]	; (8008994 <tcp_receive+0x270>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	b29a      	uxth	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800893a:	b29b      	uxth	r3, r3
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008948:	4b12      	ldr	r3, [pc, #72]	; (8008994 <tcp_receive+0x270>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	7d1b      	ldrb	r3, [r3, #20]
 8008954:	2b03      	cmp	r3, #3
 8008956:	f240 8097 	bls.w	8008a88 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008966:	429a      	cmp	r2, r3
 8008968:	d245      	bcs.n	80089f6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	8b5b      	ldrh	r3, [r3, #26]
 800896e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008972:	2b00      	cmp	r3, #0
 8008974:	d014      	beq.n	80089a0 <tcp_receive+0x27c>
 8008976:	2301      	movs	r3, #1
 8008978:	e013      	b.n	80089a2 <tcp_receive+0x27e>
 800897a:	bf00      	nop
 800897c:	080102ac 	.word	0x080102ac
 8008980:	080105dc 	.word	0x080105dc
 8008984:	080102f8 	.word	0x080102f8
 8008988:	080105f8 	.word	0x080105f8
 800898c:	2000a488 	.word	0x2000a488
 8008990:	2000a47c 	.word	0x2000a47c
 8008994:	2000a480 	.word	0x2000a480
 8008998:	2000a46c 	.word	0x2000a46c
 800899c:	2000a486 	.word	0x2000a486
 80089a0:	2302      	movs	r3, #2
 80089a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80089a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089b0:	fb12 f303 	smulbb	r3, r2, r3
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80089b8:	4293      	cmp	r3, r2
 80089ba:	bf28      	it	cs
 80089bc:	4613      	movcs	r3, r2
 80089be:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089c8:	4413      	add	r3, r2
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d309      	bcc.n	80089ea <tcp_receive+0x2c6>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089de:	4413      	add	r3, r2
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089e8:	e04e      	b.n	8008a88 <tcp_receive+0x364>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089f4:	e048      	b.n	8008a88 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80089fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089fe:	4413      	add	r3, r2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d309      	bcc.n	8008a20 <tcp_receive+0x2fc>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008a12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a14:	4413      	add	r3, r2
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a1e:	e004      	b.n	8008a2a <tcp_receive+0x306>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d326      	bcc.n	8008a88 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a5a:	4413      	add	r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d30a      	bcc.n	8008a7e <tcp_receive+0x35a>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a72:	4413      	add	r3, r2
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008a7c:	e004      	b.n	8008a88 <tcp_receive+0x364>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a90:	4a98      	ldr	r2, [pc, #608]	; (8008cf4 <tcp_receive+0x5d0>)
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff fdca 	bl	800862c <tcp_free_acked_segments>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	4a94      	ldr	r2, [pc, #592]	; (8008cf8 <tcp_receive+0x5d4>)
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fdbf 	bl	800862c <tcp_free_acked_segments>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d104      	bne.n	8008ac6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ac2:	861a      	strh	r2, [r3, #48]	; 0x30
 8008ac4:	e002      	b.n	8008acc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d103      	bne.n	8008ae2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008ae8:	4b84      	ldr	r3, [pc, #528]	; (8008cfc <tcp_receive+0x5d8>)
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	4413      	add	r3, r2
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	8b5b      	ldrh	r3, [r3, #26]
 8008afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d035      	beq.n	8008b6e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d118      	bne.n	8008b3c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00c      	beq.n	8008b2c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fb f935 	bl	8003d8e <lwip_htonl>
 8008b24:	4603      	mov	r3, r0
 8008b26:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dc20      	bgt.n	8008b6e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8b5b      	ldrh	r3, [r3, #26]
 8008b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b3a:	e018      	b.n	8008b6e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fb f920 	bl	8003d8e <lwip_htonl>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	1ae3      	subs	r3, r4, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dc0b      	bgt.n	8008b6e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8b5b      	ldrh	r3, [r3, #26]
 8008b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b64:	e003      	b.n	8008b6e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 ff76 	bl	800aa58 <tcp_send_empty_ack>
 8008b6c:	e000      	b.n	8008b70 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b6e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d05b      	beq.n	8008c30 <tcp_receive+0x50c>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b7c:	4b60      	ldr	r3, [pc, #384]	; (8008d00 <tcp_receive+0x5dc>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	da54      	bge.n	8008c30 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008b86:	4b5f      	ldr	r3, [pc, #380]	; (8008d04 <tcp_receive+0x5e0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008b9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ba4:	10db      	asrs	r3, r3, #3
 8008ba6:	b21b      	sxth	r3, r3
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008bbe:	4413      	add	r3, r2
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	b21a      	sxth	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008bc8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	da05      	bge.n	8008bdc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008bd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008bd4:	425b      	negs	r3, r3
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008bdc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008be6:	109b      	asrs	r3, r3, #2
 8008be8:	b21b      	sxth	r3, r3
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008c00:	4413      	add	r3, r2
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	b21a      	sxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c10:	10db      	asrs	r3, r3, #3
 8008c12:	b21b      	sxth	r3, r3
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4413      	add	r3, r2
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	b21a      	sxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008c30:	4b35      	ldr	r3, [pc, #212]	; (8008d08 <tcp_receive+0x5e4>)
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 84e2 	beq.w	80095fe <tcp_receive+0xeda>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	7d1b      	ldrb	r3, [r3, #20]
 8008c3e:	2b06      	cmp	r3, #6
 8008c40:	f200 84dd 	bhi.w	80095fe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c48:	4b30      	ldr	r3, [pc, #192]	; (8008d0c <tcp_receive+0x5e8>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f2c0 808f 	blt.w	8008d74 <tcp_receive+0x650>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c5a:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <tcp_receive+0x5e4>)
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <tcp_receive+0x5e8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	440b      	add	r3, r1
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	3301      	adds	r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f300 8082 	bgt.w	8008d74 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008c70:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <tcp_receive+0x5ec>)
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c7a:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <tcp_receive+0x5e8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008c82:	4b23      	ldr	r3, [pc, #140]	; (8008d10 <tcp_receive+0x5ec>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <tcp_receive+0x574>
 8008c8a:	4b22      	ldr	r3, [pc, #136]	; (8008d14 <tcp_receive+0x5f0>)
 8008c8c:	f240 5294 	movw	r2, #1428	; 0x594
 8008c90:	4921      	ldr	r1, [pc, #132]	; (8008d18 <tcp_receive+0x5f4>)
 8008c92:	4822      	ldr	r0, [pc, #136]	; (8008d1c <tcp_receive+0x5f8>)
 8008c94:	f005 faac 	bl	800e1f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d906      	bls.n	8008cb0 <tcp_receive+0x58c>
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <tcp_receive+0x5f0>)
 8008ca4:	f240 5295 	movw	r2, #1429	; 0x595
 8008ca8:	491d      	ldr	r1, [pc, #116]	; (8008d20 <tcp_receive+0x5fc>)
 8008caa:	481c      	ldr	r0, [pc, #112]	; (8008d1c <tcp_receive+0x5f8>)
 8008cac:	f005 faa0 	bl	800e1f0 <iprintf>
      off = (u16_t)off32;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008cb6:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <tcp_receive+0x5ec>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d906      	bls.n	8008cd2 <tcp_receive+0x5ae>
 8008cc4:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <tcp_receive+0x5f0>)
 8008cc6:	f240 5297 	movw	r2, #1431	; 0x597
 8008cca:	4916      	ldr	r1, [pc, #88]	; (8008d24 <tcp_receive+0x600>)
 8008ccc:	4813      	ldr	r0, [pc, #76]	; (8008d1c <tcp_receive+0x5f8>)
 8008cce:	f005 fa8f 	bl	800e1f0 <iprintf>
      inseg.len -= off;
 8008cd2:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <tcp_receive+0x5ec>)
 8008cd4:	891a      	ldrh	r2, [r3, #8]
 8008cd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	4b0c      	ldr	r3, [pc, #48]	; (8008d10 <tcp_receive+0x5ec>)
 8008ce0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <tcp_receive+0x5ec>)
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	891a      	ldrh	r2, [r3, #8]
 8008ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008cf0:	e02a      	b.n	8008d48 <tcp_receive+0x624>
 8008cf2:	bf00      	nop
 8008cf4:	08010614 	.word	0x08010614
 8008cf8:	0801061c 	.word	0x0801061c
 8008cfc:	2000a484 	.word	0x2000a484
 8008d00:	2000a480 	.word	0x2000a480
 8008d04:	2000a444 	.word	0x2000a444
 8008d08:	2000a486 	.word	0x2000a486
 8008d0c:	2000a47c 	.word	0x2000a47c
 8008d10:	2000a45c 	.word	0x2000a45c
 8008d14:	080102ac 	.word	0x080102ac
 8008d18:	08010624 	.word	0x08010624
 8008d1c:	080102f8 	.word	0x080102f8
 8008d20:	08010634 	.word	0x08010634
 8008d24:	08010644 	.word	0x08010644
        off -= p->len;
 8008d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2a:	895b      	ldrh	r3, [r3, #10]
 8008d2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d3e:	2200      	movs	r2, #0
 8008d40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4a:	895b      	ldrh	r3, [r3, #10]
 8008d4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d8e9      	bhi.n	8008d28 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008d54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008d5c:	f7fc fada 	bl	8005314 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	4a91      	ldr	r2, [pc, #580]	; (8008fac <tcp_receive+0x888>)
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	4b91      	ldr	r3, [pc, #580]	; (8008fb0 <tcp_receive+0x88c>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	4a8f      	ldr	r2, [pc, #572]	; (8008fac <tcp_receive+0x888>)
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008d72:	e00d      	b.n	8008d90 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008d74:	4b8d      	ldr	r3, [pc, #564]	; (8008fac <tcp_receive+0x888>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da06      	bge.n	8008d90 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	8b5b      	ldrh	r3, [r3, #26]
 8008d86:	f043 0302 	orr.w	r3, r3, #2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008d90:	4b86      	ldr	r3, [pc, #536]	; (8008fac <tcp_receive+0x888>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f2c0 842a 	blt.w	80095f4 <tcp_receive+0xed0>
 8008da0:	4b82      	ldr	r3, [pc, #520]	; (8008fac <tcp_receive+0x888>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dac:	440b      	add	r3, r1
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	3301      	adds	r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f300 841e 	bgt.w	80095f4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dbc:	4b7b      	ldr	r3, [pc, #492]	; (8008fac <tcp_receive+0x888>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	f040 829a 	bne.w	80092fa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008dc6:	4b7a      	ldr	r3, [pc, #488]	; (8008fb0 <tcp_receive+0x88c>)
 8008dc8:	891c      	ldrh	r4, [r3, #8]
 8008dca:	4b79      	ldr	r3, [pc, #484]	; (8008fb0 <tcp_receive+0x88c>)
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	899b      	ldrh	r3, [r3, #12]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fa ffc6 	bl	8003d64 <lwip_htons>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	f003 0303 	and.w	r3, r3, #3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <tcp_receive+0x6c4>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e000      	b.n	8008dea <tcp_receive+0x6c6>
 8008de8:	2300      	movs	r3, #0
 8008dea:	4423      	add	r3, r4
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	4b71      	ldr	r3, [pc, #452]	; (8008fb4 <tcp_receive+0x890>)
 8008df0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008df6:	4b6f      	ldr	r3, [pc, #444]	; (8008fb4 <tcp_receive+0x890>)
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d275      	bcs.n	8008eea <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008dfe:	4b6c      	ldr	r3, [pc, #432]	; (8008fb0 <tcp_receive+0x88c>)
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fa ffac 	bl	8003d64 <lwip_htons>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01f      	beq.n	8008e58 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008e18:	4b65      	ldr	r3, [pc, #404]	; (8008fb0 <tcp_receive+0x88c>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	899b      	ldrh	r3, [r3, #12]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	b21b      	sxth	r3, r3
 8008e22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e26:	b21c      	sxth	r4, r3
 8008e28:	4b61      	ldr	r3, [pc, #388]	; (8008fb0 <tcp_receive+0x88c>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fa ff97 	bl	8003d64 <lwip_htons>
 8008e36:	4603      	mov	r3, r0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fa ff8e 	bl	8003d64 <lwip_htons>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	b21b      	sxth	r3, r3
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	b21a      	sxth	r2, r3
 8008e50:	4b57      	ldr	r3, [pc, #348]	; (8008fb0 <tcp_receive+0x88c>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	b292      	uxth	r2, r2
 8008e56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e5c:	4b54      	ldr	r3, [pc, #336]	; (8008fb0 <tcp_receive+0x88c>)
 8008e5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e60:	4b53      	ldr	r3, [pc, #332]	; (8008fb0 <tcp_receive+0x88c>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	899b      	ldrh	r3, [r3, #12]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fa ff7b 	bl	8003d64 <lwip_htons>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <tcp_receive+0x762>
            inseg.len -= 1;
 8008e7a:	4b4d      	ldr	r3, [pc, #308]	; (8008fb0 <tcp_receive+0x88c>)
 8008e7c:	891b      	ldrh	r3, [r3, #8]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	4b4b      	ldr	r3, [pc, #300]	; (8008fb0 <tcp_receive+0x88c>)
 8008e84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008e86:	4b4a      	ldr	r3, [pc, #296]	; (8008fb0 <tcp_receive+0x88c>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	4a49      	ldr	r2, [pc, #292]	; (8008fb0 <tcp_receive+0x88c>)
 8008e8c:	8912      	ldrh	r2, [r2, #8]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fc f93f 	bl	8005114 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008e96:	4b46      	ldr	r3, [pc, #280]	; (8008fb0 <tcp_receive+0x88c>)
 8008e98:	891c      	ldrh	r4, [r3, #8]
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <tcp_receive+0x88c>)
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	899b      	ldrh	r3, [r3, #12]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fa ff5e 	bl	8003d64 <lwip_htons>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <tcp_receive+0x794>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e000      	b.n	8008eba <tcp_receive+0x796>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4423      	add	r3, r4
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	4b3d      	ldr	r3, [pc, #244]	; (8008fb4 <tcp_receive+0x890>)
 8008ec0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ec2:	4b3c      	ldr	r3, [pc, #240]	; (8008fb4 <tcp_receive+0x890>)
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	4b38      	ldr	r3, [pc, #224]	; (8008fac <tcp_receive+0x888>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	441a      	add	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ed6:	440b      	add	r3, r1
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d006      	beq.n	8008eea <tcp_receive+0x7c6>
 8008edc:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <tcp_receive+0x894>)
 8008ede:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008ee2:	4936      	ldr	r1, [pc, #216]	; (8008fbc <tcp_receive+0x898>)
 8008ee4:	4836      	ldr	r0, [pc, #216]	; (8008fc0 <tcp_receive+0x89c>)
 8008ee6:	f005 f983 	bl	800e1f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80e7 	beq.w	80090c2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ef4:	4b2e      	ldr	r3, [pc, #184]	; (8008fb0 <tcp_receive+0x88c>)
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	899b      	ldrh	r3, [r3, #12]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fa ff31 	bl	8003d64 <lwip_htons>
 8008f02:	4603      	mov	r3, r0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d010      	beq.n	8008f30 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008f0e:	e00a      	b.n	8008f26 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f14:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7fd fd92 	bl	8006a4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f0      	bne.n	8008f10 <tcp_receive+0x7ec>
 8008f2e:	e0c8      	b.n	80090c2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008f36:	e052      	b.n	8008fde <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	899b      	ldrh	r3, [r3, #12]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fa ff0f 	bl	8003d64 <lwip_htons>
 8008f46:	4603      	mov	r3, r0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d03d      	beq.n	8008fce <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <tcp_receive+0x88c>)
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	899b      	ldrh	r3, [r3, #12]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fa ff02 	bl	8003d64 <lwip_htons>
 8008f60:	4603      	mov	r3, r0
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d130      	bne.n	8008fce <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <tcp_receive+0x88c>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	899b      	ldrh	r3, [r3, #12]
 8008f72:	b29c      	uxth	r4, r3
 8008f74:	2001      	movs	r0, #1
 8008f76:	f7fa fef5 	bl	8003d64 <lwip_htons>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <tcp_receive+0x88c>)
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	4322      	orrs	r2, r4
 8008f84:	b292      	uxth	r2, r2
 8008f86:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008f88:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <tcp_receive+0x88c>)
 8008f8a:	891c      	ldrh	r4, [r3, #8]
 8008f8c:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <tcp_receive+0x88c>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	899b      	ldrh	r3, [r3, #12]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fa fee5 	bl	8003d64 <lwip_htons>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00e      	beq.n	8008fc4 <tcp_receive+0x8a0>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e00d      	b.n	8008fc6 <tcp_receive+0x8a2>
 8008faa:	bf00      	nop
 8008fac:	2000a47c 	.word	0x2000a47c
 8008fb0:	2000a45c 	.word	0x2000a45c
 8008fb4:	2000a486 	.word	0x2000a486
 8008fb8:	080102ac 	.word	0x080102ac
 8008fbc:	08010654 	.word	0x08010654
 8008fc0:	080102f8 	.word	0x080102f8
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4423      	add	r3, r4
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	4b98      	ldr	r3, [pc, #608]	; (800922c <tcp_receive+0xb08>)
 8008fcc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008fd8:	6938      	ldr	r0, [r7, #16]
 8008fda:	f7fd fd36 	bl	8006a4a <tcp_seg_free>
            while (next &&
 8008fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00e      	beq.n	8009002 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008fe4:	4b91      	ldr	r3, [pc, #580]	; (800922c <tcp_receive+0xb08>)
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4b91      	ldr	r3, [pc, #580]	; (8009230 <tcp_receive+0xb0c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	441a      	add	r2, r3
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ff8:	8909      	ldrh	r1, [r1, #8]
 8008ffa:	440b      	add	r3, r1
 8008ffc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	da9a      	bge.n	8008f38 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d059      	beq.n	80090bc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009008:	4b88      	ldr	r3, [pc, #544]	; (800922c <tcp_receive+0xb08>)
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	4b88      	ldr	r3, [pc, #544]	; (8009230 <tcp_receive+0xb0c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	441a      	add	r2, r3
 8009014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800901c:	2b00      	cmp	r3, #0
 800901e:	dd4d      	ble.n	80090bc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	b29a      	uxth	r2, r3
 8009028:	4b81      	ldr	r3, [pc, #516]	; (8009230 <tcp_receive+0xb0c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	b29a      	uxth	r2, r3
 8009032:	4b80      	ldr	r3, [pc, #512]	; (8009234 <tcp_receive+0xb10>)
 8009034:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009036:	4b7f      	ldr	r3, [pc, #508]	; (8009234 <tcp_receive+0xb10>)
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	899b      	ldrh	r3, [r3, #12]
 800903c:	b29b      	uxth	r3, r3
 800903e:	4618      	mov	r0, r3
 8009040:	f7fa fe90 	bl	8003d64 <lwip_htons>
 8009044:	4603      	mov	r3, r0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <tcp_receive+0x938>
                inseg.len -= 1;
 8009050:	4b78      	ldr	r3, [pc, #480]	; (8009234 <tcp_receive+0xb10>)
 8009052:	891b      	ldrh	r3, [r3, #8]
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	4b76      	ldr	r3, [pc, #472]	; (8009234 <tcp_receive+0xb10>)
 800905a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800905c:	4b75      	ldr	r3, [pc, #468]	; (8009234 <tcp_receive+0xb10>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	4a74      	ldr	r2, [pc, #464]	; (8009234 <tcp_receive+0xb10>)
 8009062:	8912      	ldrh	r2, [r2, #8]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7fc f854 	bl	8005114 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800906c:	4b71      	ldr	r3, [pc, #452]	; (8009234 <tcp_receive+0xb10>)
 800906e:	891c      	ldrh	r4, [r3, #8]
 8009070:	4b70      	ldr	r3, [pc, #448]	; (8009234 <tcp_receive+0xb10>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	899b      	ldrh	r3, [r3, #12]
 8009076:	b29b      	uxth	r3, r3
 8009078:	4618      	mov	r0, r3
 800907a:	f7fa fe73 	bl	8003d64 <lwip_htons>
 800907e:	4603      	mov	r3, r0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <tcp_receive+0x96a>
 800908a:	2301      	movs	r3, #1
 800908c:	e000      	b.n	8009090 <tcp_receive+0x96c>
 800908e:	2300      	movs	r3, #0
 8009090:	4423      	add	r3, r4
 8009092:	b29a      	uxth	r2, r3
 8009094:	4b65      	ldr	r3, [pc, #404]	; (800922c <tcp_receive+0xb08>)
 8009096:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009098:	4b64      	ldr	r3, [pc, #400]	; (800922c <tcp_receive+0xb08>)
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	4b64      	ldr	r3, [pc, #400]	; (8009230 <tcp_receive+0xb0c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	441a      	add	r2, r3
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d006      	beq.n	80090bc <tcp_receive+0x998>
 80090ae:	4b62      	ldr	r3, [pc, #392]	; (8009238 <tcp_receive+0xb14>)
 80090b0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80090b4:	4961      	ldr	r1, [pc, #388]	; (800923c <tcp_receive+0xb18>)
 80090b6:	4862      	ldr	r0, [pc, #392]	; (8009240 <tcp_receive+0xb1c>)
 80090b8:	f005 f89a 	bl	800e1f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80090c2:	4b5a      	ldr	r3, [pc, #360]	; (800922c <tcp_receive+0xb08>)
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	4b59      	ldr	r3, [pc, #356]	; (8009230 <tcp_receive+0xb0c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	441a      	add	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80090d6:	4b55      	ldr	r3, [pc, #340]	; (800922c <tcp_receive+0xb08>)
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d206      	bcs.n	80090ec <tcp_receive+0x9c8>
 80090de:	4b56      	ldr	r3, [pc, #344]	; (8009238 <tcp_receive+0xb14>)
 80090e0:	f240 6207 	movw	r2, #1543	; 0x607
 80090e4:	4957      	ldr	r1, [pc, #348]	; (8009244 <tcp_receive+0xb20>)
 80090e6:	4856      	ldr	r0, [pc, #344]	; (8009240 <tcp_receive+0xb1c>)
 80090e8:	f005 f882 	bl	800e1f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80090f0:	4b4e      	ldr	r3, [pc, #312]	; (800922c <tcp_receive+0xb08>)
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fc ffc5 	bl	800608c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009102:	4b4c      	ldr	r3, [pc, #304]	; (8009234 <tcp_receive+0xb10>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	891b      	ldrh	r3, [r3, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800910c:	4b49      	ldr	r3, [pc, #292]	; (8009234 <tcp_receive+0xb10>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a4d      	ldr	r2, [pc, #308]	; (8009248 <tcp_receive+0xb24>)
 8009112:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009114:	4b47      	ldr	r3, [pc, #284]	; (8009234 <tcp_receive+0xb10>)
 8009116:	2200      	movs	r2, #0
 8009118:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800911a:	4b46      	ldr	r3, [pc, #280]	; (8009234 <tcp_receive+0xb10>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	899b      	ldrh	r3, [r3, #12]
 8009120:	b29b      	uxth	r3, r3
 8009122:	4618      	mov	r0, r3
 8009124:	f7fa fe1e 	bl	8003d64 <lwip_htons>
 8009128:	4603      	mov	r3, r0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 80b8 	beq.w	80092a6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009136:	4b45      	ldr	r3, [pc, #276]	; (800924c <tcp_receive+0xb28>)
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	f043 0320 	orr.w	r3, r3, #32
 800913e:	b2da      	uxtb	r2, r3
 8009140:	4b42      	ldr	r3, [pc, #264]	; (800924c <tcp_receive+0xb28>)
 8009142:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009144:	e0af      	b.n	80092a6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	4a36      	ldr	r2, [pc, #216]	; (8009230 <tcp_receive+0xb0c>)
 8009156:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	461c      	mov	r4, r3
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	899b      	ldrh	r3, [r3, #12]
 8009164:	b29b      	uxth	r3, r3
 8009166:	4618      	mov	r0, r3
 8009168:	f7fa fdfc 	bl	8003d64 <lwip_htons>
 800916c:	4603      	mov	r3, r0
 800916e:	b2db      	uxtb	r3, r3
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <tcp_receive+0xa58>
 8009178:	2301      	movs	r3, #1
 800917a:	e000      	b.n	800917e <tcp_receive+0xa5a>
 800917c:	2300      	movs	r3, #0
 800917e:	191a      	adds	r2, r3, r4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	441a      	add	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918e:	461c      	mov	r4, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	891b      	ldrh	r3, [r3, #8]
 8009194:	461d      	mov	r5, r3
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	899b      	ldrh	r3, [r3, #12]
 800919c:	b29b      	uxth	r3, r3
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fa fde0 	bl	8003d64 <lwip_htons>
 80091a4:	4603      	mov	r3, r0
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <tcp_receive+0xa90>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e000      	b.n	80091b6 <tcp_receive+0xa92>
 80091b4:	2300      	movs	r3, #0
 80091b6:	442b      	add	r3, r5
 80091b8:	429c      	cmp	r4, r3
 80091ba:	d206      	bcs.n	80091ca <tcp_receive+0xaa6>
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <tcp_receive+0xb14>)
 80091be:	f240 622b 	movw	r2, #1579	; 0x62b
 80091c2:	4923      	ldr	r1, [pc, #140]	; (8009250 <tcp_receive+0xb2c>)
 80091c4:	481e      	ldr	r0, [pc, #120]	; (8009240 <tcp_receive+0xb1c>)
 80091c6:	f005 f813 	bl	800e1f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	891b      	ldrh	r3, [r3, #8]
 80091ce:	461c      	mov	r4, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	899b      	ldrh	r3, [r3, #12]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fa fdc3 	bl	8003d64 <lwip_htons>
 80091de:	4603      	mov	r3, r0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <tcp_receive+0xaca>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e000      	b.n	80091f0 <tcp_receive+0xacc>
 80091ee:	2300      	movs	r3, #0
 80091f0:	1919      	adds	r1, r3, r4
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091f6:	b28b      	uxth	r3, r1
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7fc ff43 	bl	800608c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	891b      	ldrh	r3, [r3, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d028      	beq.n	8009262 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009210:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <tcp_receive+0xb24>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01d      	beq.n	8009254 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009218:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <tcp_receive+0xb24>)
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fc f9be 	bl	80055a4 <pbuf_cat>
 8009228:	e018      	b.n	800925c <tcp_receive+0xb38>
 800922a:	bf00      	nop
 800922c:	2000a486 	.word	0x2000a486
 8009230:	2000a47c 	.word	0x2000a47c
 8009234:	2000a45c 	.word	0x2000a45c
 8009238:	080102ac 	.word	0x080102ac
 800923c:	0801068c 	.word	0x0801068c
 8009240:	080102f8 	.word	0x080102f8
 8009244:	080106c8 	.word	0x080106c8
 8009248:	2000a48c 	.word	0x2000a48c
 800924c:	2000a489 	.word	0x2000a489
 8009250:	080106e8 	.word	0x080106e8
            } else {
              recv_data = cseg->p;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	4a70      	ldr	r2, [pc, #448]	; (800941c <tcp_receive+0xcf8>)
 800925a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2200      	movs	r2, #0
 8009260:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	899b      	ldrh	r3, [r3, #12]
 8009268:	b29b      	uxth	r3, r3
 800926a:	4618      	mov	r0, r3
 800926c:	f7fa fd7a 	bl	8003d64 <lwip_htons>
 8009270:	4603      	mov	r3, r0
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00d      	beq.n	8009298 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800927c:	4b68      	ldr	r3, [pc, #416]	; (8009420 <tcp_receive+0xcfc>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f043 0320 	orr.w	r3, r3, #32
 8009284:	b2da      	uxtb	r2, r3
 8009286:	4b66      	ldr	r3, [pc, #408]	; (8009420 <tcp_receive+0xcfc>)
 8009288:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	7d1b      	ldrb	r3, [r3, #20]
 800928e:	2b04      	cmp	r3, #4
 8009290:	d102      	bne.n	8009298 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2207      	movs	r2, #7
 8009296:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80092a0:	68b8      	ldr	r0, [r7, #8]
 80092a2:	f7fd fbd2 	bl	8006a4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80092ba:	429a      	cmp	r2, r3
 80092bc:	f43f af43 	beq.w	8009146 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	8b5b      	ldrh	r3, [r3, #26]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00e      	beq.n	80092ea <tcp_receive+0xbc6>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8b5b      	ldrh	r3, [r3, #26]
 80092d0:	f023 0301 	bic.w	r3, r3, #1
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	835a      	strh	r2, [r3, #26]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	8b5b      	ldrh	r3, [r3, #26]
 80092de:	f043 0302 	orr.w	r3, r3, #2
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80092e8:	e188      	b.n	80095fc <tcp_receive+0xed8>
        tcp_ack(pcb);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8b5b      	ldrh	r3, [r3, #26]
 80092ee:	f043 0301 	orr.w	r3, r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80092f8:	e180      	b.n	80095fc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009302:	4848      	ldr	r0, [pc, #288]	; (8009424 <tcp_receive+0xd00>)
 8009304:	f7fd fbba 	bl	8006a7c <tcp_seg_copy>
 8009308:	4602      	mov	r2, r0
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	675a      	str	r2, [r3, #116]	; 0x74
 800930e:	e16d      	b.n	80095ec <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009310:	2300      	movs	r3, #0
 8009312:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009318:	63bb      	str	r3, [r7, #56]	; 0x38
 800931a:	e157      	b.n	80095cc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	4b41      	ldr	r3, [pc, #260]	; (8009428 <tcp_receive+0xd04>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d11d      	bne.n	8009366 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800932a:	4b3e      	ldr	r3, [pc, #248]	; (8009424 <tcp_receive+0xd00>)
 800932c:	891a      	ldrh	r2, [r3, #8]
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	891b      	ldrh	r3, [r3, #8]
 8009332:	429a      	cmp	r2, r3
 8009334:	f240 814f 	bls.w	80095d6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009338:	483a      	ldr	r0, [pc, #232]	; (8009424 <tcp_receive+0xd00>)
 800933a:	f7fd fb9f 	bl	8006a7c <tcp_seg_copy>
 800933e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 8149 	beq.w	80095da <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <tcp_receive+0xc32>
                    prev->next = cseg;
 800934e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e002      	b.n	800935c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800935c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	f7ff f8dc 	bl	800851c <tcp_oos_insert_segment>
                }
                break;
 8009364:	e139      	b.n	80095da <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009368:	2b00      	cmp	r3, #0
 800936a:	d117      	bne.n	800939c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800936c:	4b2e      	ldr	r3, [pc, #184]	; (8009428 <tcp_receive+0xd04>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	da57      	bge.n	800942c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800937c:	4829      	ldr	r0, [pc, #164]	; (8009424 <tcp_receive+0xd00>)
 800937e:	f7fd fb7d 	bl	8006a7c <tcp_seg_copy>
 8009382:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 8129 	beq.w	80095de <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009394:	69b8      	ldr	r0, [r7, #24]
 8009396:	f7ff f8c1 	bl	800851c <tcp_oos_insert_segment>
                  }
                  break;
 800939a:	e120      	b.n	80095de <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800939c:	4b22      	ldr	r3, [pc, #136]	; (8009428 <tcp_receive+0xd04>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	3b01      	subs	r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	db3e      	blt.n	800942c <tcp_receive+0xd08>
 80093ae:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <tcp_receive+0xd04>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	3301      	adds	r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dc35      	bgt.n	800942c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80093c0:	4818      	ldr	r0, [pc, #96]	; (8009424 <tcp_receive+0xd00>)
 80093c2:	f7fd fb5b 	bl	8006a7c <tcp_seg_copy>
 80093c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 8109 	beq.w	80095e2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80093d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d8:	8912      	ldrh	r2, [r2, #8]
 80093da:	441a      	add	r2, r3
 80093dc:	4b12      	ldr	r3, [pc, #72]	; (8009428 <tcp_receive+0xd04>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dd12      	ble.n	800940c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80093e6:	4b10      	ldr	r3, [pc, #64]	; (8009428 <tcp_receive+0xd04>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009402:	891b      	ldrh	r3, [r3, #8]
 8009404:	4619      	mov	r1, r3
 8009406:	4610      	mov	r0, r2
 8009408:	f7fb fe84 	bl	8005114 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800940c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009412:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009414:	69f8      	ldr	r0, [r7, #28]
 8009416:	f7ff f881 	bl	800851c <tcp_oos_insert_segment>
                  }
                  break;
 800941a:	e0e2      	b.n	80095e2 <tcp_receive+0xebe>
 800941c:	2000a48c 	.word	0x2000a48c
 8009420:	2000a489 	.word	0x2000a489
 8009424:	2000a45c 	.word	0x2000a45c
 8009428:	2000a47c 	.word	0x2000a47c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f040 80c6 	bne.w	80095c6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800943a:	4b80      	ldr	r3, [pc, #512]	; (800963c <tcp_receive+0xf18>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009446:	2b00      	cmp	r3, #0
 8009448:	f340 80bd 	ble.w	80095c6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	899b      	ldrh	r3, [r3, #12]
 8009452:	b29b      	uxth	r3, r3
 8009454:	4618      	mov	r0, r3
 8009456:	f7fa fc85 	bl	8003d64 <lwip_htons>
 800945a:	4603      	mov	r3, r0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 80bf 	bne.w	80095e6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009468:	4875      	ldr	r0, [pc, #468]	; (8009640 <tcp_receive+0xf1c>)
 800946a:	f7fd fb07 	bl	8006a7c <tcp_seg_copy>
 800946e:	4602      	mov	r2, r0
 8009470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009472:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 80b6 	beq.w	80095ea <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009486:	8912      	ldrh	r2, [r2, #8]
 8009488:	441a      	add	r2, r3
 800948a:	4b6c      	ldr	r3, [pc, #432]	; (800963c <tcp_receive+0xf18>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	dd12      	ble.n	80094ba <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009494:	4b69      	ldr	r3, [pc, #420]	; (800963c <tcp_receive+0xf18>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	b29a      	uxth	r2, r3
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	891b      	ldrh	r3, [r3, #8]
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f7fb fe2d 	bl	8005114 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80094ba:	4b62      	ldr	r3, [pc, #392]	; (8009644 <tcp_receive+0xf20>)
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	4b5e      	ldr	r3, [pc, #376]	; (800963c <tcp_receive+0xf18>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	441a      	add	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094ce:	440b      	add	r3, r1
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f340 8089 	ble.w	80095ea <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	899b      	ldrh	r3, [r3, #12]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fa fc3e 	bl	8003d64 <lwip_htons>
 80094e8:	4603      	mov	r3, r0
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d022      	beq.n	800953a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	899b      	ldrh	r3, [r3, #12]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	b21b      	sxth	r3, r3
 8009500:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009504:	b21c      	sxth	r4, r3
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	899b      	ldrh	r3, [r3, #12]
 800950e:	b29b      	uxth	r3, r3
 8009510:	4618      	mov	r0, r3
 8009512:	f7fa fc27 	bl	8003d64 <lwip_htons>
 8009516:	4603      	mov	r3, r0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	b29b      	uxth	r3, r3
 800951c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009520:	b29b      	uxth	r3, r3
 8009522:	4618      	mov	r0, r3
 8009524:	f7fa fc1e 	bl	8003d64 <lwip_htons>
 8009528:	4603      	mov	r3, r0
 800952a:	b21b      	sxth	r3, r3
 800952c:	4323      	orrs	r3, r4
 800952e:	b21a      	sxth	r2, r3
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	b292      	uxth	r2, r2
 8009538:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	b29a      	uxth	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009544:	4413      	add	r3, r2
 8009546:	b299      	uxth	r1, r3
 8009548:	4b3c      	ldr	r3, [pc, #240]	; (800963c <tcp_receive+0xf18>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	b29a      	uxth	r2, r3
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	1a8a      	subs	r2, r1, r2
 8009554:	b292      	uxth	r2, r2
 8009556:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	891b      	ldrh	r3, [r3, #8]
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f7fb fdd4 	bl	8005114 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	891c      	ldrh	r4, [r3, #8]
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	899b      	ldrh	r3, [r3, #12]
 800957a:	b29b      	uxth	r3, r3
 800957c:	4618      	mov	r0, r3
 800957e:	f7fa fbf1 	bl	8003d64 <lwip_htons>
 8009582:	4603      	mov	r3, r0
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <tcp_receive+0xe6e>
 800958e:	2301      	movs	r3, #1
 8009590:	e000      	b.n	8009594 <tcp_receive+0xe70>
 8009592:	2300      	movs	r3, #0
 8009594:	4423      	add	r3, r4
 8009596:	b29a      	uxth	r2, r3
 8009598:	4b2a      	ldr	r3, [pc, #168]	; (8009644 <tcp_receive+0xf20>)
 800959a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800959c:	4b29      	ldr	r3, [pc, #164]	; (8009644 <tcp_receive+0xf20>)
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	4b26      	ldr	r3, [pc, #152]	; (800963c <tcp_receive+0xf18>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	441a      	add	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095b0:	440b      	add	r3, r1
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d019      	beq.n	80095ea <tcp_receive+0xec6>
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <tcp_receive+0xf24>)
 80095b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80095bc:	4923      	ldr	r1, [pc, #140]	; (800964c <tcp_receive+0xf28>)
 80095be:	4824      	ldr	r0, [pc, #144]	; (8009650 <tcp_receive+0xf2c>)
 80095c0:	f004 fe16 	bl	800e1f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80095c4:	e011      	b.n	80095ea <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80095c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f47f aea4 	bne.w	800931c <tcp_receive+0xbf8>
 80095d4:	e00a      	b.n	80095ec <tcp_receive+0xec8>
                break;
 80095d6:	bf00      	nop
 80095d8:	e008      	b.n	80095ec <tcp_receive+0xec8>
                break;
 80095da:	bf00      	nop
 80095dc:	e006      	b.n	80095ec <tcp_receive+0xec8>
                  break;
 80095de:	bf00      	nop
 80095e0:	e004      	b.n	80095ec <tcp_receive+0xec8>
                  break;
 80095e2:	bf00      	nop
 80095e4:	e002      	b.n	80095ec <tcp_receive+0xec8>
                  break;
 80095e6:	bf00      	nop
 80095e8:	e000      	b.n	80095ec <tcp_receive+0xec8>
                break;
 80095ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 fa33 	bl	800aa58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80095f2:	e003      	b.n	80095fc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 fa2f 	bl	800aa58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095fa:	e01a      	b.n	8009632 <tcp_receive+0xf0e>
 80095fc:	e019      	b.n	8009632 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80095fe:	4b0f      	ldr	r3, [pc, #60]	; (800963c <tcp_receive+0xf18>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	db0a      	blt.n	8009622 <tcp_receive+0xefe>
 800960c:	4b0b      	ldr	r3, [pc, #44]	; (800963c <tcp_receive+0xf18>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009618:	440b      	add	r3, r1
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	3301      	adds	r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	dd07      	ble.n	8009632 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	8b5b      	ldrh	r3, [r3, #26]
 8009626:	f043 0302 	orr.w	r3, r3, #2
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009630:	e7ff      	b.n	8009632 <tcp_receive+0xf0e>
 8009632:	bf00      	nop
 8009634:	3750      	adds	r7, #80	; 0x50
 8009636:	46bd      	mov	sp, r7
 8009638:	bdb0      	pop	{r4, r5, r7, pc}
 800963a:	bf00      	nop
 800963c:	2000a47c 	.word	0x2000a47c
 8009640:	2000a45c 	.word	0x2000a45c
 8009644:	2000a486 	.word	0x2000a486
 8009648:	080102ac 	.word	0x080102ac
 800964c:	08010654 	.word	0x08010654
 8009650:	080102f8 	.word	0x080102f8

08009654 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800965a:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <tcp_get_next_optbyte+0x5c>)
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	b291      	uxth	r1, r2
 8009662:	4a13      	ldr	r2, [pc, #76]	; (80096b0 <tcp_get_next_optbyte+0x5c>)
 8009664:	8011      	strh	r1, [r2, #0]
 8009666:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009668:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <tcp_get_next_optbyte+0x60>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d004      	beq.n	800967a <tcp_get_next_optbyte+0x26>
 8009670:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <tcp_get_next_optbyte+0x64>)
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	88fa      	ldrh	r2, [r7, #6]
 8009676:	429a      	cmp	r2, r3
 8009678:	d208      	bcs.n	800968c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800967a:	4b10      	ldr	r3, [pc, #64]	; (80096bc <tcp_get_next_optbyte+0x68>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3314      	adds	r3, #20
 8009680:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	4413      	add	r3, r2
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	e00b      	b.n	80096a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800968c:	88fb      	ldrh	r3, [r7, #6]
 800968e:	b2da      	uxtb	r2, r3
 8009690:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <tcp_get_next_optbyte+0x64>)
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800969a:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <tcp_get_next_optbyte+0x60>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	797b      	ldrb	r3, [r7, #5]
 80096a0:	4413      	add	r3, r2
 80096a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	2000a478 	.word	0x2000a478
 80096b4:	2000a474 	.word	0x2000a474
 80096b8:	2000a472 	.word	0x2000a472
 80096bc:	2000a46c 	.word	0x2000a46c

080096c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <tcp_parseopt+0x1c>
 80096ce:	4b32      	ldr	r3, [pc, #200]	; (8009798 <tcp_parseopt+0xd8>)
 80096d0:	f240 727d 	movw	r2, #1917	; 0x77d
 80096d4:	4931      	ldr	r1, [pc, #196]	; (800979c <tcp_parseopt+0xdc>)
 80096d6:	4832      	ldr	r0, [pc, #200]	; (80097a0 <tcp_parseopt+0xe0>)
 80096d8:	f004 fd8a 	bl	800e1f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80096dc:	4b31      	ldr	r3, [pc, #196]	; (80097a4 <tcp_parseopt+0xe4>)
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d055      	beq.n	8009790 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80096e4:	4b30      	ldr	r3, [pc, #192]	; (80097a8 <tcp_parseopt+0xe8>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	801a      	strh	r2, [r3, #0]
 80096ea:	e045      	b.n	8009778 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80096ec:	f7ff ffb2 	bl	8009654 <tcp_get_next_optbyte>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d006      	beq.n	8009708 <tcp_parseopt+0x48>
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	dc2b      	bgt.n	8009756 <tcp_parseopt+0x96>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d041      	beq.n	8009786 <tcp_parseopt+0xc6>
 8009702:	2b01      	cmp	r3, #1
 8009704:	d127      	bne.n	8009756 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009706:	e037      	b.n	8009778 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009708:	f7ff ffa4 	bl	8009654 <tcp_get_next_optbyte>
 800970c:	4603      	mov	r3, r0
 800970e:	2b04      	cmp	r3, #4
 8009710:	d13b      	bne.n	800978a <tcp_parseopt+0xca>
 8009712:	4b25      	ldr	r3, [pc, #148]	; (80097a8 <tcp_parseopt+0xe8>)
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	3301      	adds	r3, #1
 8009718:	4a22      	ldr	r2, [pc, #136]	; (80097a4 <tcp_parseopt+0xe4>)
 800971a:	8812      	ldrh	r2, [r2, #0]
 800971c:	4293      	cmp	r3, r2
 800971e:	da34      	bge.n	800978a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009720:	f7ff ff98 	bl	8009654 <tcp_get_next_optbyte>
 8009724:	4603      	mov	r3, r0
 8009726:	b29b      	uxth	r3, r3
 8009728:	021b      	lsls	r3, r3, #8
 800972a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800972c:	f7ff ff92 	bl	8009654 <tcp_get_next_optbyte>
 8009730:	4603      	mov	r3, r0
 8009732:	b29a      	uxth	r2, r3
 8009734:	89bb      	ldrh	r3, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800973a:	89bb      	ldrh	r3, [r7, #12]
 800973c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009740:	d804      	bhi.n	800974c <tcp_parseopt+0x8c>
 8009742:	89bb      	ldrh	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <tcp_parseopt+0x8c>
 8009748:	89ba      	ldrh	r2, [r7, #12]
 800974a:	e001      	b.n	8009750 <tcp_parseopt+0x90>
 800974c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009754:	e010      	b.n	8009778 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009756:	f7ff ff7d 	bl	8009654 <tcp_get_next_optbyte>
 800975a:	4603      	mov	r3, r0
 800975c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800975e:	7afb      	ldrb	r3, [r7, #11]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d914      	bls.n	800978e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009764:	7afb      	ldrb	r3, [r7, #11]
 8009766:	b29a      	uxth	r2, r3
 8009768:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <tcp_parseopt+0xe8>)
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	4413      	add	r3, r2
 800976e:	b29b      	uxth	r3, r3
 8009770:	3b02      	subs	r3, #2
 8009772:	b29a      	uxth	r2, r3
 8009774:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <tcp_parseopt+0xe8>)
 8009776:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009778:	4b0b      	ldr	r3, [pc, #44]	; (80097a8 <tcp_parseopt+0xe8>)
 800977a:	881a      	ldrh	r2, [r3, #0]
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <tcp_parseopt+0xe4>)
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d3b3      	bcc.n	80096ec <tcp_parseopt+0x2c>
 8009784:	e004      	b.n	8009790 <tcp_parseopt+0xd0>
          return;
 8009786:	bf00      	nop
 8009788:	e002      	b.n	8009790 <tcp_parseopt+0xd0>
            return;
 800978a:	bf00      	nop
 800978c:	e000      	b.n	8009790 <tcp_parseopt+0xd0>
            return;
 800978e:	bf00      	nop
      }
    }
  }
}
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	080102ac 	.word	0x080102ac
 800979c:	08010710 	.word	0x08010710
 80097a0:	080102f8 	.word	0x080102f8
 80097a4:	2000a470 	.word	0x2000a470
 80097a8:	2000a478 	.word	0x2000a478

080097ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <tcp_trigger_input_pcb_close+0x1c>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f043 0310 	orr.w	r3, r3, #16
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	4b03      	ldr	r3, [pc, #12]	; (80097c8 <tcp_trigger_input_pcb_close+0x1c>)
 80097bc:	701a      	strb	r2, [r3, #0]
}
 80097be:	bf00      	nop
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	2000a489 	.word	0x2000a489

080097cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <tcp_route+0x28>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	7a1b      	ldrb	r3, [r3, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d006      	beq.n	80097f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	7a1b      	ldrb	r3, [r3, #8]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fb fab8 	bl	8004d60 <netif_get_by_index>
 80097f0:	4603      	mov	r3, r0
 80097f2:	e003      	b.n	80097fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f003 fa0f 	bl	800cc18 <ip4_route>
 80097fa:	4603      	mov	r3, r0
  }
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <tcp_create_segment+0x22>
 800981a:	4b44      	ldr	r3, [pc, #272]	; (800992c <tcp_create_segment+0x128>)
 800981c:	22a3      	movs	r2, #163	; 0xa3
 800981e:	4944      	ldr	r1, [pc, #272]	; (8009930 <tcp_create_segment+0x12c>)
 8009820:	4844      	ldr	r0, [pc, #272]	; (8009934 <tcp_create_segment+0x130>)
 8009822:	f004 fce5 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d105      	bne.n	8009838 <tcp_create_segment+0x34>
 800982c:	4b3f      	ldr	r3, [pc, #252]	; (800992c <tcp_create_segment+0x128>)
 800982e:	22a4      	movs	r2, #164	; 0xa4
 8009830:	4941      	ldr	r1, [pc, #260]	; (8009938 <tcp_create_segment+0x134>)
 8009832:	4840      	ldr	r0, [pc, #256]	; (8009934 <tcp_create_segment+0x130>)
 8009834:	f004 fcdc 	bl	800e1f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009838:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009846:	2003      	movs	r0, #3
 8009848:	f7fa ff04 	bl	8004654 <memp_malloc>
 800984c:	6138      	str	r0, [r7, #16]
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009854:	68b8      	ldr	r0, [r7, #8]
 8009856:	f7fb fde3 	bl	8005420 <pbuf_free>
    return NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	e061      	b.n	8009922 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009864:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	891a      	ldrh	r2, [r3, #8]
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	b29b      	uxth	r3, r3
 800987a:	429a      	cmp	r2, r3
 800987c:	d205      	bcs.n	800988a <tcp_create_segment+0x86>
 800987e:	4b2b      	ldr	r3, [pc, #172]	; (800992c <tcp_create_segment+0x128>)
 8009880:	22b0      	movs	r2, #176	; 0xb0
 8009882:	492e      	ldr	r1, [pc, #184]	; (800993c <tcp_create_segment+0x138>)
 8009884:	482b      	ldr	r0, [pc, #172]	; (8009934 <tcp_create_segment+0x130>)
 8009886:	f004 fcb3 	bl	800e1f0 <iprintf>
  seg->len = p->tot_len - optlen;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	891a      	ldrh	r2, [r3, #8]
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	b29b      	uxth	r3, r3
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	b29a      	uxth	r2, r3
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800989a:	2114      	movs	r1, #20
 800989c:	68b8      	ldr	r0, [r7, #8]
 800989e:	f7fb fd29 	bl	80052f4 <pbuf_add_header>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80098a8:	6938      	ldr	r0, [r7, #16]
 80098aa:	f7fd f8ce 	bl	8006a4a <tcp_seg_free>
    return NULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	e037      	b.n	8009922 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8ada      	ldrh	r2, [r3, #22]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	68dc      	ldr	r4, [r3, #12]
 80098c4:	4610      	mov	r0, r2
 80098c6:	f7fa fa4d 	bl	8003d64 <lwip_htons>
 80098ca:	4603      	mov	r3, r0
 80098cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8b1a      	ldrh	r2, [r3, #24]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	68dc      	ldr	r4, [r3, #12]
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fa fa44 	bl	8003d64 <lwip_htons>
 80098dc:	4603      	mov	r3, r0
 80098de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	68dc      	ldr	r4, [r3, #12]
 80098e4:	6838      	ldr	r0, [r7, #0]
 80098e6:	f7fa fa52 	bl	8003d8e <lwip_htonl>
 80098ea:	4603      	mov	r3, r0
 80098ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	089b      	lsrs	r3, r3, #2
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3305      	adds	r3, #5
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	031b      	lsls	r3, r3, #12
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	b29b      	uxth	r3, r3
 8009902:	4313      	orrs	r3, r2
 8009904:	b29a      	uxth	r2, r3
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	68dc      	ldr	r4, [r3, #12]
 800990a:	4610      	mov	r0, r2
 800990c:	f7fa fa2a 	bl	8003d64 <lwip_htons>
 8009910:	4603      	mov	r3, r0
 8009912:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	749a      	strb	r2, [r3, #18]
 800991c:	2200      	movs	r2, #0
 800991e:	74da      	strb	r2, [r3, #19]
  return seg;
 8009920:	693b      	ldr	r3, [r7, #16]
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	bd90      	pop	{r4, r7, pc}
 800992a:	bf00      	nop
 800992c:	0801072c 	.word	0x0801072c
 8009930:	08010760 	.word	0x08010760
 8009934:	08010780 	.word	0x08010780
 8009938:	080107a8 	.word	0x080107a8
 800993c:	080107cc 	.word	0x080107cc

08009940 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b08b      	sub	sp, #44	; 0x2c
 8009944:	af02      	add	r7, sp, #8
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	460b      	mov	r3, r1
 800994a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800994c:	2300      	movs	r3, #0
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009954:	2300      	movs	r3, #0
 8009956:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <tcp_split_unsent_seg+0x2c>
 800995e:	4b95      	ldr	r3, [pc, #596]	; (8009bb4 <tcp_split_unsent_seg+0x274>)
 8009960:	f240 324b 	movw	r2, #843	; 0x34b
 8009964:	4994      	ldr	r1, [pc, #592]	; (8009bb8 <tcp_split_unsent_seg+0x278>)
 8009966:	4895      	ldr	r0, [pc, #596]	; (8009bbc <tcp_split_unsent_seg+0x27c>)
 8009968:	f004 fc42 	bl	800e1f0 <iprintf>

  useg = pcb->unsent;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009970:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009978:	f04f 33ff 	mov.w	r3, #4294967295
 800997c:	e116      	b.n	8009bac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800997e:	887b      	ldrh	r3, [r7, #2]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009984:	4b8b      	ldr	r3, [pc, #556]	; (8009bb4 <tcp_split_unsent_seg+0x274>)
 8009986:	f240 3253 	movw	r2, #851	; 0x353
 800998a:	498d      	ldr	r1, [pc, #564]	; (8009bc0 <tcp_split_unsent_seg+0x280>)
 800998c:	488b      	ldr	r0, [pc, #556]	; (8009bbc <tcp_split_unsent_seg+0x27c>)
 800998e:	f004 fc2f 	bl	800e1f0 <iprintf>
    return ERR_VAL;
 8009992:	f06f 0305 	mvn.w	r3, #5
 8009996:	e109      	b.n	8009bac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	891b      	ldrh	r3, [r3, #8]
 800999c:	887a      	ldrh	r2, [r7, #2]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d301      	bcc.n	80099a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e102      	b.n	8009bac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099aa:	887a      	ldrh	r2, [r7, #2]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d906      	bls.n	80099be <tcp_split_unsent_seg+0x7e>
 80099b0:	4b80      	ldr	r3, [pc, #512]	; (8009bb4 <tcp_split_unsent_seg+0x274>)
 80099b2:	f240 325b 	movw	r2, #859	; 0x35b
 80099b6:	4983      	ldr	r1, [pc, #524]	; (8009bc4 <tcp_split_unsent_seg+0x284>)
 80099b8:	4880      	ldr	r0, [pc, #512]	; (8009bbc <tcp_split_unsent_seg+0x27c>)
 80099ba:	f004 fc19 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	891b      	ldrh	r3, [r3, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d106      	bne.n	80099d4 <tcp_split_unsent_seg+0x94>
 80099c6:	4b7b      	ldr	r3, [pc, #492]	; (8009bb4 <tcp_split_unsent_seg+0x274>)
 80099c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80099cc:	497e      	ldr	r1, [pc, #504]	; (8009bc8 <tcp_split_unsent_seg+0x288>)
 80099ce:	487b      	ldr	r0, [pc, #492]	; (8009bbc <tcp_split_unsent_seg+0x27c>)
 80099d0:	f004 fc0e 	bl	800e1f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	7a9b      	ldrb	r3, [r3, #10]
 80099d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	891a      	ldrh	r2, [r3, #8]
 80099ea:	887b      	ldrh	r3, [r7, #2]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	89bb      	ldrh	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80099fe:	4619      	mov	r1, r3
 8009a00:	2036      	movs	r0, #54	; 0x36
 8009a02:	f7fb fa29 	bl	8004e58 <pbuf_alloc>
 8009a06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 80b7 	beq.w	8009b7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	891a      	ldrh	r2, [r3, #8]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	891b      	ldrh	r3, [r3, #8]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	887b      	ldrh	r3, [r7, #2]
 8009a20:	4413      	add	r3, r2
 8009a22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	6858      	ldr	r0, [r3, #4]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	18d1      	adds	r1, r2, r3
 8009a30:	897b      	ldrh	r3, [r7, #10]
 8009a32:	89ba      	ldrh	r2, [r7, #12]
 8009a34:	f7fb feee 	bl	8005814 <pbuf_copy_partial>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	89bb      	ldrh	r3, [r7, #12]
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	f040 809f 	bne.w	8009b82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	899b      	ldrh	r3, [r3, #12]
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fa f989 	bl	8003d64 <lwip_htons>
 8009a52:	4603      	mov	r3, r0
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009a60:	7efb      	ldrb	r3, [r7, #27]
 8009a62:	f003 0308 	and.w	r3, r3, #8
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009a6a:	7efb      	ldrb	r3, [r7, #27]
 8009a6c:	f023 0308 	bic.w	r3, r3, #8
 8009a70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009a72:	7ebb      	ldrb	r3, [r7, #26]
 8009a74:	f043 0308 	orr.w	r3, r3, #8
 8009a78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009a7a:	7efb      	ldrb	r3, [r7, #27]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d007      	beq.n	8009a94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009a84:	7efb      	ldrb	r3, [r7, #27]
 8009a86:	f023 0301 	bic.w	r3, r3, #1
 8009a8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009a8c:	7ebb      	ldrb	r3, [r7, #26]
 8009a8e:	f043 0301 	orr.w	r3, r3, #1
 8009a92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fa f977 	bl	8003d8e <lwip_htonl>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	887b      	ldrh	r3, [r7, #2]
 8009aa4:	18d1      	adds	r1, r2, r3
 8009aa6:	7eba      	ldrb	r2, [r7, #26]
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	460b      	mov	r3, r1
 8009aae:	6939      	ldr	r1, [r7, #16]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff fea7 	bl	8009804 <tcp_create_segment>
 8009ab6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d063      	beq.n	8009b86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fb fd34 	bl	8005530 <pbuf_clen>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ad2:	1a9b      	subs	r3, r3, r2
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	6858      	ldr	r0, [r3, #4]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	891a      	ldrh	r2, [r3, #8]
 8009ae6:	89bb      	ldrh	r3, [r7, #12]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	4619      	mov	r1, r3
 8009aee:	f7fb fb11 	bl	8005114 <pbuf_realloc>
  useg->len -= remainder;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	891a      	ldrh	r2, [r3, #8]
 8009af6:	89bb      	ldrh	r3, [r7, #12]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	899b      	ldrh	r3, [r3, #12]
 8009b06:	b29c      	uxth	r4, r3
 8009b08:	7efb      	ldrb	r3, [r7, #27]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fa f929 	bl	8003d64 <lwip_htons>
 8009b12:	4603      	mov	r3, r0
 8009b14:	461a      	mov	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	4322      	orrs	r2, r4
 8009b1c:	b292      	uxth	r2, r2
 8009b1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fb fd03 	bl	8005530 <pbuf_clen>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b34:	4413      	add	r3, r2
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fb fcf4 	bl	8005530 <pbuf_clen>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b52:	4413      	add	r3, r2
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d103      	bne.n	8009b7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e016      	b.n	8009bac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009b7e:	bf00      	nop
 8009b80:	e002      	b.n	8009b88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009b82:	bf00      	nop
 8009b84:	e000      	b.n	8009b88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009b86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d006      	beq.n	8009b9c <tcp_split_unsent_seg+0x25c>
 8009b8e:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <tcp_split_unsent_seg+0x274>)
 8009b90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009b94:	490d      	ldr	r1, [pc, #52]	; (8009bcc <tcp_split_unsent_seg+0x28c>)
 8009b96:	4809      	ldr	r0, [pc, #36]	; (8009bbc <tcp_split_unsent_seg+0x27c>)
 8009b98:	f004 fb2a 	bl	800e1f0 <iprintf>
  if (p != NULL) {
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d002      	beq.n	8009ba8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009ba2:	6938      	ldr	r0, [r7, #16]
 8009ba4:	f7fb fc3c 	bl	8005420 <pbuf_free>
  }

  return ERR_MEM;
 8009ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3724      	adds	r7, #36	; 0x24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd90      	pop	{r4, r7, pc}
 8009bb4:	0801072c 	.word	0x0801072c
 8009bb8:	08010ac0 	.word	0x08010ac0
 8009bbc:	08010780 	.word	0x08010780
 8009bc0:	08010ae4 	.word	0x08010ae4
 8009bc4:	08010b08 	.word	0x08010b08
 8009bc8:	08010b18 	.word	0x08010b18
 8009bcc:	08010b28 	.word	0x08010b28

08009bd0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009bd0:	b590      	push	{r4, r7, lr}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <tcp_send_fin+0x1c>
 8009bde:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <tcp_send_fin+0x94>)
 8009be0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009be4:	4920      	ldr	r1, [pc, #128]	; (8009c68 <tcp_send_fin+0x98>)
 8009be6:	4821      	ldr	r0, [pc, #132]	; (8009c6c <tcp_send_fin+0x9c>)
 8009be8:	f004 fb02 	bl	800e1f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d02e      	beq.n	8009c52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e002      	b.n	8009c02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1f8      	bne.n	8009bfc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	899b      	ldrh	r3, [r3, #12]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fa f8a6 	bl	8003d64 <lwip_htons>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	f003 0307 	and.w	r3, r3, #7
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d116      	bne.n	8009c52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	899b      	ldrh	r3, [r3, #12]
 8009c2a:	b29c      	uxth	r4, r3
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	f7fa f899 	bl	8003d64 <lwip_htons>
 8009c32:	4603      	mov	r3, r0
 8009c34:	461a      	mov	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	4322      	orrs	r2, r4
 8009c3c:	b292      	uxth	r2, r2
 8009c3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	8b5b      	ldrh	r3, [r3, #26]
 8009c44:	f043 0320 	orr.w	r3, r3, #32
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e004      	b.n	8009c5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009c52:	2101      	movs	r1, #1
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f80b 	bl	8009c70 <tcp_enqueue_flags>
 8009c5a:	4603      	mov	r3, r0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd90      	pop	{r4, r7, pc}
 8009c64:	0801072c 	.word	0x0801072c
 8009c68:	08010b34 	.word	0x08010b34
 8009c6c:	08010780 	.word	0x08010780

08009c70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <tcp_enqueue_flags+0x2c>
 8009c8e:	4b67      	ldr	r3, [pc, #412]	; (8009e2c <tcp_enqueue_flags+0x1bc>)
 8009c90:	f240 4211 	movw	r2, #1041	; 0x411
 8009c94:	4966      	ldr	r1, [pc, #408]	; (8009e30 <tcp_enqueue_flags+0x1c0>)
 8009c96:	4867      	ldr	r0, [pc, #412]	; (8009e34 <tcp_enqueue_flags+0x1c4>)
 8009c98:	f004 faaa 	bl	800e1f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d106      	bne.n	8009cb0 <tcp_enqueue_flags+0x40>
 8009ca2:	4b62      	ldr	r3, [pc, #392]	; (8009e2c <tcp_enqueue_flags+0x1bc>)
 8009ca4:	f240 4213 	movw	r2, #1043	; 0x413
 8009ca8:	4963      	ldr	r1, [pc, #396]	; (8009e38 <tcp_enqueue_flags+0x1c8>)
 8009caa:	4862      	ldr	r0, [pc, #392]	; (8009e34 <tcp_enqueue_flags+0x1c4>)
 8009cac:	f004 faa0 	bl	800e1f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009cbe:	7ffb      	ldrb	r3, [r7, #31]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	f003 0304 	and.w	r3, r3, #4
 8009cc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	2036      	movs	r0, #54	; 0x36
 8009cd6:	f7fb f8bf 	bl	8004e58 <pbuf_alloc>
 8009cda:	6138      	str	r0, [r7, #16]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8b5b      	ldrh	r3, [r3, #26]
 8009ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf4:	e095      	b.n	8009e22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	895a      	ldrh	r2, [r3, #10]
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d206      	bcs.n	8009d10 <tcp_enqueue_flags+0xa0>
 8009d02:	4b4a      	ldr	r3, [pc, #296]	; (8009e2c <tcp_enqueue_flags+0x1bc>)
 8009d04:	f240 4239 	movw	r2, #1081	; 0x439
 8009d08:	494c      	ldr	r1, [pc, #304]	; (8009e3c <tcp_enqueue_flags+0x1cc>)
 8009d0a:	484a      	ldr	r0, [pc, #296]	; (8009e34 <tcp_enqueue_flags+0x1c4>)
 8009d0c:	f004 fa70 	bl	800e1f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	7ffb      	ldrb	r3, [r7, #31]
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	6939      	ldr	r1, [r7, #16]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fd70 	bl	8009804 <tcp_create_segment>
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d109      	bne.n	8009d40 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	8b5b      	ldrh	r3, [r3, #26]
 8009d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3e:	e070      	b.n	8009e22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f003 0303 	and.w	r3, r3, #3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <tcp_enqueue_flags+0xea>
 8009d4c:	4b37      	ldr	r3, [pc, #220]	; (8009e2c <tcp_enqueue_flags+0x1bc>)
 8009d4e:	f240 4242 	movw	r2, #1090	; 0x442
 8009d52:	493b      	ldr	r1, [pc, #236]	; (8009e40 <tcp_enqueue_flags+0x1d0>)
 8009d54:	4837      	ldr	r0, [pc, #220]	; (8009e34 <tcp_enqueue_flags+0x1c4>)
 8009d56:	f004 fa4b 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	891b      	ldrh	r3, [r3, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d006      	beq.n	8009d70 <tcp_enqueue_flags+0x100>
 8009d62:	4b32      	ldr	r3, [pc, #200]	; (8009e2c <tcp_enqueue_flags+0x1bc>)
 8009d64:	f240 4243 	movw	r2, #1091	; 0x443
 8009d68:	4936      	ldr	r1, [pc, #216]	; (8009e44 <tcp_enqueue_flags+0x1d4>)
 8009d6a:	4832      	ldr	r0, [pc, #200]	; (8009e34 <tcp_enqueue_flags+0x1c4>)
 8009d6c:	f004 fa40 	bl	800e1f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d7e:	e00d      	b.n	8009d9c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	e002      	b.n	8009d8e <tcp_enqueue_flags+0x11e>
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1f8      	bne.n	8009d88 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	f003 0302 	and.w	r3, r3, #2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d104      	bne.n	8009db8 <tcp_enqueue_flags+0x148>
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d004      	beq.n	8009dc2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d006      	beq.n	8009dda <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	8b5b      	ldrh	r3, [r3, #26]
 8009dd0:	f043 0320 	orr.w	r3, r3, #32
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fb fba6 	bl	8005530 <pbuf_clen>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009dee:	4413      	add	r3, r2
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00e      	beq.n	8009e20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10a      	bne.n	8009e20 <tcp_enqueue_flags+0x1b0>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d106      	bne.n	8009e20 <tcp_enqueue_flags+0x1b0>
 8009e12:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <tcp_enqueue_flags+0x1bc>)
 8009e14:	f240 4265 	movw	r2, #1125	; 0x465
 8009e18:	490b      	ldr	r1, [pc, #44]	; (8009e48 <tcp_enqueue_flags+0x1d8>)
 8009e1a:	4806      	ldr	r0, [pc, #24]	; (8009e34 <tcp_enqueue_flags+0x1c4>)
 8009e1c:	f004 f9e8 	bl	800e1f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3720      	adds	r7, #32
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	0801072c 	.word	0x0801072c
 8009e30:	08010b50 	.word	0x08010b50
 8009e34:	08010780 	.word	0x08010780
 8009e38:	08010ba8 	.word	0x08010ba8
 8009e3c:	08010bc8 	.word	0x08010bc8
 8009e40:	08010c04 	.word	0x08010c04
 8009e44:	08010c1c 	.word	0x08010c1c
 8009e48:	08010c48 	.word	0x08010c48

08009e4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009e4c:	b5b0      	push	{r4, r5, r7, lr}
 8009e4e:	b08a      	sub	sp, #40	; 0x28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <tcp_output+0x1c>
 8009e5a:	4b8a      	ldr	r3, [pc, #552]	; (800a084 <tcp_output+0x238>)
 8009e5c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009e60:	4989      	ldr	r1, [pc, #548]	; (800a088 <tcp_output+0x23c>)
 8009e62:	488a      	ldr	r0, [pc, #552]	; (800a08c <tcp_output+0x240>)
 8009e64:	f004 f9c4 	bl	800e1f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	7d1b      	ldrb	r3, [r3, #20]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d106      	bne.n	8009e7e <tcp_output+0x32>
 8009e70:	4b84      	ldr	r3, [pc, #528]	; (800a084 <tcp_output+0x238>)
 8009e72:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009e76:	4986      	ldr	r1, [pc, #536]	; (800a090 <tcp_output+0x244>)
 8009e78:	4884      	ldr	r0, [pc, #528]	; (800a08c <tcp_output+0x240>)
 8009e7a:	f004 f9b9 	bl	800e1f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009e7e:	4b85      	ldr	r3, [pc, #532]	; (800a094 <tcp_output+0x248>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d101      	bne.n	8009e8c <tcp_output+0x40>
    return ERR_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	e1ce      	b.n	800a22a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	bf28      	it	cs
 8009e9c:	4613      	movcs	r3, r2
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ea6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10b      	bne.n	8009ec6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	8b5b      	ldrh	r3, [r3, #26]
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 81aa 	beq.w	800a210 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fdcb 	bl	800aa58 <tcp_send_empty_ack>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	e1b1      	b.n	800a22a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff fc7c 	bl	80097cc <tcp_route>
 8009ed4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <tcp_output+0x96>
    return ERR_RTE;
 8009edc:	f06f 0303 	mvn.w	r3, #3
 8009ee0:	e1a3      	b.n	800a22a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <tcp_output+0xa4>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d111      	bne.n	8009f14 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <tcp_output+0xb0>
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	e000      	b.n	8009efe <tcp_output+0xb2>
 8009efc:	2300      	movs	r3, #0
 8009efe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d102      	bne.n	8009f0c <tcp_output+0xc0>
      return ERR_RTE;
 8009f06:	f06f 0303 	mvn.w	r3, #3
 8009f0a:	e18e      	b.n	800a22a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7f9 ff37 	bl	8003d8e <lwip_htonl>
 8009f20:	4602      	mov	r2, r0
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2a:	8912      	ldrh	r2, [r2, #8]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d227      	bcs.n	8009f84 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d114      	bne.n	8009f6c <tcp_output+0x120>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d110      	bne.n	8009f6c <tcp_output+0x120>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8b5b      	ldrh	r3, [r3, #26]
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 814d 	beq.w	800a214 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fd6c 	bl	800aa58 <tcp_send_empty_ack>
 8009f80:	4603      	mov	r3, r0
 8009f82:	e152      	b.n	800a22a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f90:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 811c 	beq.w	800a1d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009f9a:	e002      	b.n	8009fa2 <tcp_output+0x156>
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	623b      	str	r3, [r7, #32]
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f8      	bne.n	8009f9c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009faa:	e112      	b.n	800a1d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	899b      	ldrh	r3, [r3, #12]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7f9 fed5 	bl	8003d64 <lwip_htons>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d006      	beq.n	8009fd4 <tcp_output+0x188>
 8009fc6:	4b2f      	ldr	r3, [pc, #188]	; (800a084 <tcp_output+0x238>)
 8009fc8:	f240 5236 	movw	r2, #1334	; 0x536
 8009fcc:	4932      	ldr	r1, [pc, #200]	; (800a098 <tcp_output+0x24c>)
 8009fce:	482f      	ldr	r0, [pc, #188]	; (800a08c <tcp_output+0x240>)
 8009fd0:	f004 f90e 	bl	800e1f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01f      	beq.n	800a01c <tcp_output+0x1d0>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	8b5b      	ldrh	r3, [r3, #26]
 8009fe0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d119      	bne.n	800a01c <tcp_output+0x1d0>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <tcp_output+0x1bc>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d110      	bne.n	800a01c <tcp_output+0x1d0>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ffe:	891a      	ldrh	r2, [r3, #8]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a004:	429a      	cmp	r2, r3
 800a006:	d209      	bcs.n	800a01c <tcp_output+0x1d0>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <tcp_output+0x1d0>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d901      	bls.n	800a020 <tcp_output+0x1d4>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e000      	b.n	800a022 <tcp_output+0x1d6>
 800a020:	2300      	movs	r3, #0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	8b5b      	ldrh	r3, [r3, #26]
 800a02a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80e4 	beq.w	800a1fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7d1b      	ldrb	r3, [r3, #20]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d00d      	beq.n	800a058 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	899b      	ldrh	r3, [r3, #12]
 800a042:	b29c      	uxth	r4, r3
 800a044:	2010      	movs	r0, #16
 800a046:	f7f9 fe8d 	bl	8003d64 <lwip_htons>
 800a04a:	4603      	mov	r3, r0
 800a04c:	461a      	mov	r2, r3
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	4322      	orrs	r2, r4
 800a054:	b292      	uxth	r2, r2
 800a056:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a058:	697a      	ldr	r2, [r7, #20]
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a05e:	f000 f909 	bl	800a274 <tcp_output_segment>
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d016      	beq.n	800a09c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	8b5b      	ldrh	r3, [r3, #26]
 800a072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	835a      	strh	r2, [r3, #26]
      return err;
 800a07c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a080:	e0d3      	b.n	800a22a <tcp_output+0x3de>
 800a082:	bf00      	nop
 800a084:	0801072c 	.word	0x0801072c
 800a088:	08010c70 	.word	0x08010c70
 800a08c:	08010780 	.word	0x08010780
 800a090:	08010c88 	.word	0x08010c88
 800a094:	2000a490 	.word	0x2000a490
 800a098:	08010cb0 	.word	0x08010cb0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7d1b      	ldrb	r3, [r3, #20]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d006      	beq.n	800a0ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	8b5b      	ldrh	r3, [r3, #26]
 800a0b0:	f023 0303 	bic.w	r3, r3, #3
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f9 fe64 	bl	8003d8e <lwip_htonl>
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	891b      	ldrh	r3, [r3, #8]
 800a0cc:	461d      	mov	r5, r3
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	899b      	ldrh	r3, [r3, #12]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f9 fe44 	bl	8003d64 <lwip_htons>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 0303 	and.w	r3, r3, #3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <tcp_output+0x2a0>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e000      	b.n	800a0ee <tcp_output+0x2a2>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	442b      	add	r3, r5
 800a0f0:	4423      	add	r3, r4
 800a0f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	da02      	bge.n	800a106 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	891b      	ldrh	r3, [r3, #8]
 800a10a:	461c      	mov	r4, r3
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	899b      	ldrh	r3, [r3, #12]
 800a112:	b29b      	uxth	r3, r3
 800a114:	4618      	mov	r0, r3
 800a116:	f7f9 fe25 	bl	8003d64 <lwip_htons>
 800a11a:	4603      	mov	r3, r0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	f003 0303 	and.w	r3, r3, #3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <tcp_output+0x2de>
 800a126:	2301      	movs	r3, #1
 800a128:	e000      	b.n	800a12c <tcp_output+0x2e0>
 800a12a:	2300      	movs	r3, #0
 800a12c:	4423      	add	r3, r4
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d049      	beq.n	800a1c6 <tcp_output+0x37a>
      seg->next = NULL;
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	2200      	movs	r2, #0
 800a136:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d105      	bne.n	800a14c <tcp_output+0x300>
        pcb->unacked = seg;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a144:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	623b      	str	r3, [r7, #32]
 800a14a:	e03f      	b.n	800a1cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	4618      	mov	r0, r3
 800a154:	f7f9 fe1b 	bl	8003d8e <lwip_htonl>
 800a158:	4604      	mov	r4, r0
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	4618      	mov	r0, r3
 800a162:	f7f9 fe14 	bl	8003d8e <lwip_htonl>
 800a166:	4603      	mov	r3, r0
 800a168:	1ae3      	subs	r3, r4, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da24      	bge.n	800a1b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3370      	adds	r3, #112	; 0x70
 800a172:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a174:	e002      	b.n	800a17c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d011      	beq.n	800a1a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7f9 fdfe 	bl	8003d8e <lwip_htonl>
 800a192:	4604      	mov	r4, r0
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7f9 fdf7 	bl	8003d8e <lwip_htonl>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	dbe6      	blt.n	800a176 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	e009      	b.n	800a1cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	623b      	str	r3, [r7, #32]
 800a1c4:	e002      	b.n	800a1cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1c8:	f7fc fc3f 	bl	8006a4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d012      	beq.n	800a1fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7f9 fdd5 	bl	8003d8e <lwip_htonl>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ee:	8912      	ldrh	r2, [r2, #8]
 800a1f0:	4413      	add	r3, r2
  while (seg != NULL &&
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	f4bf aed9 	bcs.w	8009fac <tcp_output+0x160>
 800a1fa:	e000      	b.n	800a1fe <tcp_output+0x3b2>
      break;
 800a1fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a202:	2b00      	cmp	r3, #0
 800a204:	d108      	bne.n	800a218 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a20e:	e004      	b.n	800a21a <tcp_output+0x3ce>
    goto output_done;
 800a210:	bf00      	nop
 800a212:	e002      	b.n	800a21a <tcp_output+0x3ce>
    goto output_done;
 800a214:	bf00      	nop
 800a216:	e000      	b.n	800a21a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a218:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	8b5b      	ldrh	r3, [r3, #26]
 800a21e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a222:	b29a      	uxth	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3728      	adds	r7, #40	; 0x28
 800a22e:	46bd      	mov	sp, r7
 800a230:	bdb0      	pop	{r4, r5, r7, pc}
 800a232:	bf00      	nop

0800a234 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <tcp_output_segment_busy+0x1c>
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <tcp_output_segment_busy+0x34>)
 800a244:	f240 529a 	movw	r2, #1434	; 0x59a
 800a248:	4908      	ldr	r1, [pc, #32]	; (800a26c <tcp_output_segment_busy+0x38>)
 800a24a:	4809      	ldr	r0, [pc, #36]	; (800a270 <tcp_output_segment_busy+0x3c>)
 800a24c:	f003 ffd0 	bl	800e1f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	7b9b      	ldrb	r3, [r3, #14]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d001      	beq.n	800a25e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e000      	b.n	800a260 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	0801072c 	.word	0x0801072c
 800a26c:	08010cc8 	.word	0x08010cc8
 800a270:	08010780 	.word	0x08010780

0800a274 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a274:	b5b0      	push	{r4, r5, r7, lr}
 800a276:	b08c      	sub	sp, #48	; 0x30
 800a278:	af04      	add	r7, sp, #16
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <tcp_output_segment+0x20>
 800a286:	4b64      	ldr	r3, [pc, #400]	; (800a418 <tcp_output_segment+0x1a4>)
 800a288:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a28c:	4963      	ldr	r1, [pc, #396]	; (800a41c <tcp_output_segment+0x1a8>)
 800a28e:	4864      	ldr	r0, [pc, #400]	; (800a420 <tcp_output_segment+0x1ac>)
 800a290:	f003 ffae 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d106      	bne.n	800a2a8 <tcp_output_segment+0x34>
 800a29a:	4b5f      	ldr	r3, [pc, #380]	; (800a418 <tcp_output_segment+0x1a4>)
 800a29c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a2a0:	4960      	ldr	r1, [pc, #384]	; (800a424 <tcp_output_segment+0x1b0>)
 800a2a2:	485f      	ldr	r0, [pc, #380]	; (800a420 <tcp_output_segment+0x1ac>)
 800a2a4:	f003 ffa4 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <tcp_output_segment+0x48>
 800a2ae:	4b5a      	ldr	r3, [pc, #360]	; (800a418 <tcp_output_segment+0x1a4>)
 800a2b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a2b4:	495c      	ldr	r1, [pc, #368]	; (800a428 <tcp_output_segment+0x1b4>)
 800a2b6:	485a      	ldr	r0, [pc, #360]	; (800a420 <tcp_output_segment+0x1ac>)
 800a2b8:	f003 ff9a 	bl	800e1f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7ff ffb9 	bl	800a234 <tcp_output_segment_busy>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e0a1      	b.n	800a410 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	68dc      	ldr	r4, [r3, #12]
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	f7f9 fd5a 	bl	8003d8e <lwip_htonl>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68dc      	ldr	r4, [r3, #12]
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f7f9 fd3c 	bl	8003d64 <lwip_htons>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a2f8:	441a      	add	r2, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	3314      	adds	r3, #20
 800a304:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	7a9b      	ldrb	r3, [r3, #10]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d015      	beq.n	800a33e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	3304      	adds	r3, #4
 800a316:	461a      	mov	r2, r3
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a31e:	f7fc fe8b 	bl	8007038 <tcp_eff_send_mss_netif>
 800a322:	4603      	mov	r3, r0
 800a324:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a326:	8b7b      	ldrh	r3, [r7, #26]
 800a328:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7f9 fd2e 	bl	8003d8e <lwip_htonl>
 800a332:	4602      	mov	r2, r0
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	3304      	adds	r3, #4
 800a33c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a344:	2b00      	cmp	r3, #0
 800a346:	da02      	bge.n	800a34e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2200      	movs	r2, #0
 800a34c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10c      	bne.n	800a370 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a356:	4b35      	ldr	r3, [pc, #212]	; (800a42c <tcp_output_segment+0x1b8>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	4618      	mov	r0, r3
 800a366:	f7f9 fd12 	bl	8003d8e <lwip_htonl>
 800a36a:	4602      	mov	r2, r0
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	8959      	ldrh	r1, [r3, #10]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	8b3a      	ldrh	r2, [r7, #24]
 800a38a:	1a8a      	subs	r2, r1, r2
 800a38c:	b292      	uxth	r2, r2
 800a38e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	8919      	ldrh	r1, [r3, #8]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	8b3a      	ldrh	r2, [r7, #24]
 800a39c:	1a8a      	subs	r2, r1, r2
 800a39e:	b292      	uxth	r2, r2
 800a3a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	68d2      	ldr	r2, [r2, #12]
 800a3aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	741a      	strb	r2, [r3, #16]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	7a9b      	ldrb	r3, [r3, #10]
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <tcp_output_segment+0x158>
 800a3c8:	2318      	movs	r3, #24
 800a3ca:	e000      	b.n	800a3ce <tcp_output_segment+0x15a>
 800a3cc:	2314      	movs	r3, #20
 800a3ce:	4413      	add	r3, r2
 800a3d0:	69fa      	ldr	r2, [r7, #28]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d006      	beq.n	800a3e4 <tcp_output_segment+0x170>
 800a3d6:	4b10      	ldr	r3, [pc, #64]	; (800a418 <tcp_output_segment+0x1a4>)
 800a3d8:	f240 621c 	movw	r2, #1564	; 0x61c
 800a3dc:	4914      	ldr	r1, [pc, #80]	; (800a430 <tcp_output_segment+0x1bc>)
 800a3de:	4810      	ldr	r0, [pc, #64]	; (800a420 <tcp_output_segment+0x1ac>)
 800a3e0:	f003 ff06 	bl	800e1f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6858      	ldr	r0, [r3, #4]
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	1d1c      	adds	r4, r3, #4
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	7add      	ldrb	r5, [r3, #11]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	7a9b      	ldrb	r3, [r3, #10]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	9202      	str	r2, [sp, #8]
 800a3fa:	2206      	movs	r2, #6
 800a3fc:	9201      	str	r2, [sp, #4]
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	462b      	mov	r3, r5
 800a402:	4622      	mov	r2, r4
 800a404:	f002 fdc6 	bl	800cf94 <ip4_output_if>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a40c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3720      	adds	r7, #32
 800a414:	46bd      	mov	sp, r7
 800a416:	bdb0      	pop	{r4, r5, r7, pc}
 800a418:	0801072c 	.word	0x0801072c
 800a41c:	08010cf0 	.word	0x08010cf0
 800a420:	08010780 	.word	0x08010780
 800a424:	08010d10 	.word	0x08010d10
 800a428:	08010d30 	.word	0x08010d30
 800a42c:	2000a444 	.word	0x2000a444
 800a430:	08010d54 	.word	0x08010d54

0800a434 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a434:	b5b0      	push	{r4, r5, r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <tcp_rexmit_rto_prepare+0x1c>
 800a442:	4b31      	ldr	r3, [pc, #196]	; (800a508 <tcp_rexmit_rto_prepare+0xd4>)
 800a444:	f240 6263 	movw	r2, #1635	; 0x663
 800a448:	4930      	ldr	r1, [pc, #192]	; (800a50c <tcp_rexmit_rto_prepare+0xd8>)
 800a44a:	4831      	ldr	r0, [pc, #196]	; (800a510 <tcp_rexmit_rto_prepare+0xdc>)
 800a44c:	f003 fed0 	bl	800e1f0 <iprintf>

  if (pcb->unacked == NULL) {
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a458:	f06f 0305 	mvn.w	r3, #5
 800a45c:	e050      	b.n	800a500 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	e00b      	b.n	800a47e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7ff fee4 	bl	800a234 <tcp_output_segment_busy>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a472:	f06f 0305 	mvn.w	r3, #5
 800a476:	e043      	b.n	800a500 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1ef      	bne.n	800a466 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7ff fed4 	bl	800a234 <tcp_output_segment_busy>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a492:	f06f 0305 	mvn.w	r3, #5
 800a496:	e033      	b.n	800a500 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	8b5b      	ldrh	r3, [r3, #26]
 800a4b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7f9 fc63 	bl	8003d8e <lwip_htonl>
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	891b      	ldrh	r3, [r3, #8]
 800a4ce:	461d      	mov	r5, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	899b      	ldrh	r3, [r3, #12]
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7f9 fc43 	bl	8003d64 <lwip_htons>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <tcp_rexmit_rto_prepare+0xba>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e000      	b.n	800a4f0 <tcp_rexmit_rto_prepare+0xbc>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	442b      	add	r3, r5
 800a4f2:	18e2      	adds	r2, r4, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bdb0      	pop	{r4, r5, r7, pc}
 800a508:	0801072c 	.word	0x0801072c
 800a50c:	08010d68 	.word	0x08010d68
 800a510:	08010780 	.word	0x08010780

0800a514 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <tcp_rexmit_rto_commit+0x1c>
 800a522:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <tcp_rexmit_rto_commit+0x44>)
 800a524:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a528:	490c      	ldr	r1, [pc, #48]	; (800a55c <tcp_rexmit_rto_commit+0x48>)
 800a52a:	480d      	ldr	r0, [pc, #52]	; (800a560 <tcp_rexmit_rto_commit+0x4c>)
 800a52c:	f003 fe60 	bl	800e1f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a536:	2bff      	cmp	r3, #255	; 0xff
 800a538:	d007      	beq.n	800a54a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a540:	3301      	adds	r3, #1
 800a542:	b2da      	uxtb	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7ff fc7e 	bl	8009e4c <tcp_output>
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	0801072c 	.word	0x0801072c
 800a55c:	08010d8c 	.word	0x08010d8c
 800a560:	08010780 	.word	0x08010780

0800a564 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d106      	bne.n	800a580 <tcp_rexmit_rto+0x1c>
 800a572:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <tcp_rexmit_rto+0x38>)
 800a574:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a578:	4909      	ldr	r1, [pc, #36]	; (800a5a0 <tcp_rexmit_rto+0x3c>)
 800a57a:	480a      	ldr	r0, [pc, #40]	; (800a5a4 <tcp_rexmit_rto+0x40>)
 800a57c:	f003 fe38 	bl	800e1f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff ff57 	bl	800a434 <tcp_rexmit_rto_prepare>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff ffc1 	bl	800a514 <tcp_rexmit_rto_commit>
  }
}
 800a592:	bf00      	nop
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	0801072c 	.word	0x0801072c
 800a5a0:	08010db0 	.word	0x08010db0
 800a5a4:	08010780 	.word	0x08010780

0800a5a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <tcp_rexmit+0x1c>
 800a5b6:	4b2f      	ldr	r3, [pc, #188]	; (800a674 <tcp_rexmit+0xcc>)
 800a5b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a5bc:	492e      	ldr	r1, [pc, #184]	; (800a678 <tcp_rexmit+0xd0>)
 800a5be:	482f      	ldr	r0, [pc, #188]	; (800a67c <tcp_rexmit+0xd4>)
 800a5c0:	f003 fe16 	bl	800e1f0 <iprintf>

  if (pcb->unacked == NULL) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d102      	bne.n	800a5d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a5cc:	f06f 0305 	mvn.w	r3, #5
 800a5d0:	e04c      	b.n	800a66c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a5d8:	68b8      	ldr	r0, [r7, #8]
 800a5da:	f7ff fe2b 	bl	800a234 <tcp_output_segment_busy>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a5e4:	f06f 0305 	mvn.w	r3, #5
 800a5e8:	e040      	b.n	800a66c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	336c      	adds	r3, #108	; 0x6c
 800a5f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a5f8:	e002      	b.n	800a600 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d011      	beq.n	800a62c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	4618      	mov	r0, r3
 800a612:	f7f9 fbbc 	bl	8003d8e <lwip_htonl>
 800a616:	4604      	mov	r4, r0
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f9 fbb5 	bl	8003d8e <lwip_htonl>
 800a624:	4603      	mov	r3, r0
 800a626:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dbe6      	blt.n	800a5fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a650:	2bff      	cmp	r3, #255	; 0xff
 800a652:	d007      	beq.n	800a664 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a65a:	3301      	adds	r3, #1
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	bd90      	pop	{r4, r7, pc}
 800a674:	0801072c 	.word	0x0801072c
 800a678:	08010dcc 	.word	0x08010dcc
 800a67c:	08010780 	.word	0x08010780

0800a680 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <tcp_rexmit_fast+0x1c>
 800a68e:	4b2a      	ldr	r3, [pc, #168]	; (800a738 <tcp_rexmit_fast+0xb8>)
 800a690:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a694:	4929      	ldr	r1, [pc, #164]	; (800a73c <tcp_rexmit_fast+0xbc>)
 800a696:	482a      	ldr	r0, [pc, #168]	; (800a740 <tcp_rexmit_fast+0xc0>)
 800a698:	f003 fdaa 	bl	800e1f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d044      	beq.n	800a72e <tcp_rexmit_fast+0xae>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	8b5b      	ldrh	r3, [r3, #26]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d13e      	bne.n	800a72e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff ff79 	bl	800a5a8 <tcp_rexmit>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d138      	bne.n	800a72e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bf28      	it	cs
 800a6cc:	4613      	movcs	r3, r2
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	0fda      	lsrs	r2, r3, #31
 800a6d2:	4413      	add	r3, r2
 800a6d4:	105b      	asrs	r3, r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d206      	bcs.n	800a6fe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a708:	4619      	mov	r1, r3
 800a70a:	0049      	lsls	r1, r1, #1
 800a70c:	440b      	add	r3, r1
 800a70e:	b29b      	uxth	r3, r3
 800a710:	4413      	add	r3, r2
 800a712:	b29a      	uxth	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	8b5b      	ldrh	r3, [r3, #26]
 800a71e:	f043 0304 	orr.w	r3, r3, #4
 800a722:	b29a      	uxth	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	0801072c 	.word	0x0801072c
 800a73c:	08010de4 	.word	0x08010de4
 800a740:	08010780 	.word	0x08010780

0800a744 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	607b      	str	r3, [r7, #4]
 800a74e:	460b      	mov	r3, r1
 800a750:	817b      	strh	r3, [r7, #10]
 800a752:	4613      	mov	r3, r2
 800a754:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a756:	897a      	ldrh	r2, [r7, #10]
 800a758:	893b      	ldrh	r3, [r7, #8]
 800a75a:	4413      	add	r3, r2
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	3314      	adds	r3, #20
 800a760:	b29b      	uxth	r3, r3
 800a762:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a766:	4619      	mov	r1, r3
 800a768:	2022      	movs	r0, #34	; 0x22
 800a76a:	f7fa fb75 	bl	8004e58 <pbuf_alloc>
 800a76e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d04d      	beq.n	800a812 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	3313      	adds	r3, #19
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	8952      	ldrh	r2, [r2, #10]
 800a77e:	4293      	cmp	r3, r2
 800a780:	db06      	blt.n	800a790 <tcp_output_alloc_header_common+0x4c>
 800a782:	4b26      	ldr	r3, [pc, #152]	; (800a81c <tcp_output_alloc_header_common+0xd8>)
 800a784:	f240 7223 	movw	r2, #1827	; 0x723
 800a788:	4925      	ldr	r1, [pc, #148]	; (800a820 <tcp_output_alloc_header_common+0xdc>)
 800a78a:	4826      	ldr	r0, [pc, #152]	; (800a824 <tcp_output_alloc_header_common+0xe0>)
 800a78c:	f003 fd30 	bl	800e1f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a796:	8c3b      	ldrh	r3, [r7, #32]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7f9 fae3 	bl	8003d64 <lwip_htons>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a7a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7f9 fadb 	bl	8003d64 <lwip_htons>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7f9 fae6 	bl	8003d8e <lwip_htonl>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a7c8:	897b      	ldrh	r3, [r7, #10]
 800a7ca:	089b      	lsrs	r3, r3, #2
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3305      	adds	r3, #5
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	031b      	lsls	r3, r3, #12
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7f9 fabf 	bl	8003d64 <lwip_htons>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a7ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7f9 fab7 	bl	8003d64 <lwip_htons>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2200      	movs	r2, #0
 800a802:	741a      	strb	r2, [r3, #16]
 800a804:	2200      	movs	r2, #0
 800a806:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	2200      	movs	r2, #0
 800a80c:	749a      	strb	r2, [r3, #18]
 800a80e:	2200      	movs	r2, #0
 800a810:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a812:	697b      	ldr	r3, [r7, #20]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	0801072c 	.word	0x0801072c
 800a820:	08010e04 	.word	0x08010e04
 800a824:	08010780 	.word	0x08010780

0800a828 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a828:	b5b0      	push	{r4, r5, r7, lr}
 800a82a:	b08a      	sub	sp, #40	; 0x28
 800a82c:	af04      	add	r7, sp, #16
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	607b      	str	r3, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	817b      	strh	r3, [r7, #10]
 800a836:	4613      	mov	r3, r2
 800a838:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d106      	bne.n	800a84e <tcp_output_alloc_header+0x26>
 800a840:	4b15      	ldr	r3, [pc, #84]	; (800a898 <tcp_output_alloc_header+0x70>)
 800a842:	f240 7242 	movw	r2, #1858	; 0x742
 800a846:	4915      	ldr	r1, [pc, #84]	; (800a89c <tcp_output_alloc_header+0x74>)
 800a848:	4815      	ldr	r0, [pc, #84]	; (800a8a0 <tcp_output_alloc_header+0x78>)
 800a84a:	f003 fcd1 	bl	800e1f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	8adb      	ldrh	r3, [r3, #22]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	8b12      	ldrh	r2, [r2, #24]
 800a85a:	68f9      	ldr	r1, [r7, #12]
 800a85c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a85e:	893d      	ldrh	r5, [r7, #8]
 800a860:	897c      	ldrh	r4, [r7, #10]
 800a862:	9103      	str	r1, [sp, #12]
 800a864:	2110      	movs	r1, #16
 800a866:	9102      	str	r1, [sp, #8]
 800a868:	9201      	str	r2, [sp, #4]
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	462a      	mov	r2, r5
 800a870:	4621      	mov	r1, r4
 800a872:	f7ff ff67 	bl	800a744 <tcp_output_alloc_header_common>
 800a876:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d006      	beq.n	800a88c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a886:	441a      	add	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a88c:	697b      	ldr	r3, [r7, #20]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bdb0      	pop	{r4, r5, r7, pc}
 800a896:	bf00      	nop
 800a898:	0801072c 	.word	0x0801072c
 800a89c:	08010e34 	.word	0x08010e34
 800a8a0:	08010780 	.word	0x08010780

0800a8a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	71fb      	strb	r3, [r7, #7]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d106      	bne.n	800a8d2 <tcp_output_fill_options+0x2e>
 800a8c4:	4b12      	ldr	r3, [pc, #72]	; (800a910 <tcp_output_fill_options+0x6c>)
 800a8c6:	f240 7256 	movw	r2, #1878	; 0x756
 800a8ca:	4912      	ldr	r1, [pc, #72]	; (800a914 <tcp_output_fill_options+0x70>)
 800a8cc:	4812      	ldr	r0, [pc, #72]	; (800a918 <tcp_output_fill_options+0x74>)
 800a8ce:	f003 fc8f 	bl	800e1f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	3314      	adds	r3, #20
 800a8dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a8de:	8bfb      	ldrh	r3, [r7, #30]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	79fb      	ldrb	r3, [r7, #7]
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	4413      	add	r3, r2
 800a8ee:	3314      	adds	r3, #20
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d006      	beq.n	800a908 <tcp_output_fill_options+0x64>
 800a8fa:	4b05      	ldr	r3, [pc, #20]	; (800a910 <tcp_output_fill_options+0x6c>)
 800a8fc:	f240 7275 	movw	r2, #1909	; 0x775
 800a900:	4906      	ldr	r1, [pc, #24]	; (800a91c <tcp_output_fill_options+0x78>)
 800a902:	4805      	ldr	r0, [pc, #20]	; (800a918 <tcp_output_fill_options+0x74>)
 800a904:	f003 fc74 	bl	800e1f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a908:	bf00      	nop
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	0801072c 	.word	0x0801072c
 800a914:	08010e5c 	.word	0x08010e5c
 800a918:	08010780 	.word	0x08010780
 800a91c:	08010d54 	.word	0x08010d54

0800a920 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b08a      	sub	sp, #40	; 0x28
 800a924:	af04      	add	r7, sp, #16
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <tcp_output_control_segment+0x22>
 800a934:	4b1c      	ldr	r3, [pc, #112]	; (800a9a8 <tcp_output_control_segment+0x88>)
 800a936:	f240 7287 	movw	r2, #1927	; 0x787
 800a93a:	491c      	ldr	r1, [pc, #112]	; (800a9ac <tcp_output_control_segment+0x8c>)
 800a93c:	481c      	ldr	r0, [pc, #112]	; (800a9b0 <tcp_output_control_segment+0x90>)
 800a93e:	f003 fc57 	bl	800e1f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7fe ff40 	bl	80097cc <tcp_route>
 800a94c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a954:	23fc      	movs	r3, #252	; 0xfc
 800a956:	75fb      	strb	r3, [r7, #23]
 800a958:	e01c      	b.n	800a994 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d006      	beq.n	800a96e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	7adb      	ldrb	r3, [r3, #11]
 800a964:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	7a9b      	ldrb	r3, [r3, #10]
 800a96a:	757b      	strb	r3, [r7, #21]
 800a96c:	e003      	b.n	800a976 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a96e:	23ff      	movs	r3, #255	; 0xff
 800a970:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a976:	7dba      	ldrb	r2, [r7, #22]
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	9302      	str	r3, [sp, #8]
 800a97c:	2306      	movs	r3, #6
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	7d7b      	ldrb	r3, [r7, #21]
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	4613      	mov	r3, r2
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	6879      	ldr	r1, [r7, #4]
 800a98a:	68b8      	ldr	r0, [r7, #8]
 800a98c:	f002 fb02 	bl	800cf94 <ip4_output_if>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a994:	68b8      	ldr	r0, [r7, #8]
 800a996:	f7fa fd43 	bl	8005420 <pbuf_free>
  return err;
 800a99a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0801072c 	.word	0x0801072c
 800a9ac:	08010e84 	.word	0x08010e84
 800a9b0:	08010780 	.word	0x08010780

0800a9b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a9b4:	b590      	push	{r4, r7, lr}
 800a9b6:	b08b      	sub	sp, #44	; 0x2c
 800a9b8:	af04      	add	r7, sp, #16
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <tcp_rst+0x22>
 800a9c8:	4b1f      	ldr	r3, [pc, #124]	; (800aa48 <tcp_rst+0x94>)
 800a9ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a9ce:	491f      	ldr	r1, [pc, #124]	; (800aa4c <tcp_rst+0x98>)
 800a9d0:	481f      	ldr	r0, [pc, #124]	; (800aa50 <tcp_rst+0x9c>)
 800a9d2:	f003 fc0d 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d106      	bne.n	800a9ea <tcp_rst+0x36>
 800a9dc:	4b1a      	ldr	r3, [pc, #104]	; (800aa48 <tcp_rst+0x94>)
 800a9de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a9e2:	491c      	ldr	r1, [pc, #112]	; (800aa54 <tcp_rst+0xa0>)
 800a9e4:	481a      	ldr	r0, [pc, #104]	; (800aa50 <tcp_rst+0x9c>)
 800a9e6:	f003 fc03 	bl	800e1f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a9ee:	f246 0308 	movw	r3, #24584	; 0x6008
 800a9f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a9f4:	7dfb      	ldrb	r3, [r7, #23]
 800a9f6:	b29c      	uxth	r4, r3
 800a9f8:	68b8      	ldr	r0, [r7, #8]
 800a9fa:	f7f9 f9c8 	bl	8003d8e <lwip_htonl>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	8abb      	ldrh	r3, [r7, #20]
 800aa02:	9303      	str	r3, [sp, #12]
 800aa04:	2314      	movs	r3, #20
 800aa06:	9302      	str	r3, [sp, #8]
 800aa08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	4613      	mov	r3, r2
 800aa12:	2200      	movs	r2, #0
 800aa14:	4621      	mov	r1, r4
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7ff fe94 	bl	800a744 <tcp_output_alloc_header_common>
 800aa1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00c      	beq.n	800aa3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	2200      	movs	r2, #0
 800aa28:	6939      	ldr	r1, [r7, #16]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f7ff ff3a 	bl	800a8a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	6939      	ldr	r1, [r7, #16]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7ff ff72 	bl	800a920 <tcp_output_control_segment>
 800aa3c:	e000      	b.n	800aa40 <tcp_rst+0x8c>
    return;
 800aa3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd90      	pop	{r4, r7, pc}
 800aa46:	bf00      	nop
 800aa48:	0801072c 	.word	0x0801072c
 800aa4c:	08010eb0 	.word	0x08010eb0
 800aa50:	08010780 	.word	0x08010780
 800aa54:	08010ecc 	.word	0x08010ecc

0800aa58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800aa58:	b590      	push	{r4, r7, lr}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <tcp_send_empty_ack+0x24>
 800aa6e:	4b28      	ldr	r3, [pc, #160]	; (800ab10 <tcp_send_empty_ack+0xb8>)
 800aa70:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800aa74:	4927      	ldr	r1, [pc, #156]	; (800ab14 <tcp_send_empty_ack+0xbc>)
 800aa76:	4828      	ldr	r0, [pc, #160]	; (800ab18 <tcp_send_empty_ack+0xc0>)
 800aa78:	f003 fbba 	bl	800e1f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	f003 0304 	and.w	r3, r3, #4
 800aa86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800aa88:	7d7b      	ldrb	r3, [r7, #21]
 800aa8a:	b29c      	uxth	r4, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7f9 f97c 	bl	8003d8e <lwip_htonl>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fec3 	bl	800a828 <tcp_output_alloc_header>
 800aaa2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8b5b      	ldrh	r3, [r3, #26]
 800aaae:	f043 0303 	orr.w	r3, r3, #3
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800aab8:	f06f 0301 	mvn.w	r3, #1
 800aabc:	e023      	b.n	800ab06 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800aabe:	7dbb      	ldrb	r3, [r7, #22]
 800aac0:	7dfa      	ldrb	r2, [r7, #23]
 800aac2:	6939      	ldr	r1, [r7, #16]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7ff feed 	bl	800a8a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3304      	adds	r3, #4
 800aad0:	6939      	ldr	r1, [r7, #16]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7ff ff24 	bl	800a920 <tcp_output_control_segment>
 800aad8:	4603      	mov	r3, r0
 800aada:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d007      	beq.n	800aaf4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	8b5b      	ldrh	r3, [r3, #26]
 800aae8:	f043 0303 	orr.w	r3, r3, #3
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	835a      	strh	r2, [r3, #26]
 800aaf2:	e006      	b.n	800ab02 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	8b5b      	ldrh	r3, [r3, #26]
 800aaf8:	f023 0303 	bic.w	r3, r3, #3
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ab02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	371c      	adds	r7, #28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd90      	pop	{r4, r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	0801072c 	.word	0x0801072c
 800ab14:	08010ee8 	.word	0x08010ee8
 800ab18:	08010780 	.word	0x08010780

0800ab1c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ab1c:	b590      	push	{r4, r7, lr}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ab24:	2300      	movs	r3, #0
 800ab26:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <tcp_keepalive+0x20>
 800ab2e:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <tcp_keepalive+0x74>)
 800ab30:	f640 0224 	movw	r2, #2084	; 0x824
 800ab34:	4917      	ldr	r1, [pc, #92]	; (800ab94 <tcp_keepalive+0x78>)
 800ab36:	4818      	ldr	r0, [pc, #96]	; (800ab98 <tcp_keepalive+0x7c>)
 800ab38:	f003 fb5a 	bl	800e1f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
 800ab3e:	b29c      	uxth	r4, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab44:	3b01      	subs	r3, #1
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f9 f921 	bl	8003d8e <lwip_htonl>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4621      	mov	r1, r4
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff fe68 	bl	800a828 <tcp_output_alloc_header>
 800ab58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ab60:	f04f 33ff 	mov.w	r3, #4294967295
 800ab64:	e010      	b.n	800ab88 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	6939      	ldr	r1, [r7, #16]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fe99 	bl	800a8a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	3304      	adds	r3, #4
 800ab78:	6939      	ldr	r1, [r7, #16]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff fed0 	bl	800a920 <tcp_output_control_segment>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ab84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd90      	pop	{r4, r7, pc}
 800ab90:	0801072c 	.word	0x0801072c
 800ab94:	08010f08 	.word	0x08010f08
 800ab98:	08010780 	.word	0x08010780

0800ab9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ab9c:	b590      	push	{r4, r7, lr}
 800ab9e:	b08b      	sub	sp, #44	; 0x2c
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d106      	bne.n	800abbe <tcp_zero_window_probe+0x22>
 800abb0:	4b4c      	ldr	r3, [pc, #304]	; (800ace4 <tcp_zero_window_probe+0x148>)
 800abb2:	f640 024f 	movw	r2, #2127	; 0x84f
 800abb6:	494c      	ldr	r1, [pc, #304]	; (800ace8 <tcp_zero_window_probe+0x14c>)
 800abb8:	484c      	ldr	r0, [pc, #304]	; (800acec <tcp_zero_window_probe+0x150>)
 800abba:	f003 fb19 	bl	800e1f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d101      	bne.n	800abce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	e086      	b.n	800acdc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800abd4:	2bff      	cmp	r3, #255	; 0xff
 800abd6:	d007      	beq.n	800abe8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800abde:	3301      	adds	r3, #1
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	899b      	ldrh	r3, [r3, #12]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f9 f8b7 	bl	8003d64 <lwip_htons>
 800abf6:	4603      	mov	r3, r0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d005      	beq.n	800ac0e <tcp_zero_window_probe+0x72>
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	891b      	ldrh	r3, [r3, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <tcp_zero_window_probe+0x72>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <tcp_zero_window_probe+0x74>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ac12:	7ffb      	ldrb	r3, [r7, #31]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bf0c      	ite	eq
 800ac18:	2301      	moveq	r3, #1
 800ac1a:	2300      	movne	r3, #0
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ac20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac24:	b299      	uxth	r1, r3
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	8bba      	ldrh	r2, [r7, #28]
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff fdfa 	bl	800a828 <tcp_output_alloc_header>
 800ac34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ac3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac40:	e04c      	b.n	800acdc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ac48:	7ffb      	ldrb	r3, [r7, #31]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d011      	beq.n	800ac72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	899b      	ldrh	r3, [r3, #12]
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	b21b      	sxth	r3, r3
 800ac56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac5a:	b21c      	sxth	r4, r3
 800ac5c:	2011      	movs	r0, #17
 800ac5e:	f7f9 f881 	bl	8003d64 <lwip_htons>
 800ac62:	4603      	mov	r3, r0
 800ac64:	b21b      	sxth	r3, r3
 800ac66:	4323      	orrs	r3, r4
 800ac68:	b21b      	sxth	r3, r3
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	819a      	strh	r2, [r3, #12]
 800ac70:	e010      	b.n	800ac94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	3314      	adds	r3, #20
 800ac78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	6858      	ldr	r0, [r3, #4]
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	891a      	ldrh	r2, [r3, #8]
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	891b      	ldrh	r3, [r3, #8]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	6939      	ldr	r1, [r7, #16]
 800ac90:	f7fa fdc0 	bl	8005814 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7f9 f877 	bl	8003d8e <lwip_htonl>
 800aca0:	4603      	mov	r3, r0
 800aca2:	3301      	adds	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	da02      	bge.n	800acb8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800acb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acbc:	2200      	movs	r2, #0
 800acbe:	69b9      	ldr	r1, [r7, #24]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff fdef 	bl	800a8a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	3304      	adds	r3, #4
 800accc:	69b9      	ldr	r1, [r7, #24]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff fe26 	bl	800a920 <tcp_output_control_segment>
 800acd4:	4603      	mov	r3, r0
 800acd6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800acd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	372c      	adds	r7, #44	; 0x2c
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}
 800ace4:	0801072c 	.word	0x0801072c
 800ace8:	08010f24 	.word	0x08010f24
 800acec:	08010780 	.word	0x08010780

0800acf0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800acf8:	f7fa ff0c 	bl	8005b14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800acfc:	4b0a      	ldr	r3, [pc, #40]	; (800ad28 <tcpip_tcp_timer+0x38>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d103      	bne.n	800ad0c <tcpip_tcp_timer+0x1c>
 800ad04:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <tcpip_tcp_timer+0x3c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4908      	ldr	r1, [pc, #32]	; (800ad30 <tcpip_tcp_timer+0x40>)
 800ad10:	20fa      	movs	r0, #250	; 0xfa
 800ad12:	f000 f8f3 	bl	800aefc <sys_timeout>
 800ad16:	e003      	b.n	800ad20 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ad18:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <tcpip_tcp_timer+0x44>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]
  }
}
 800ad1e:	bf00      	nop
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	2000a450 	.word	0x2000a450
 800ad2c:	2000a454 	.word	0x2000a454
 800ad30:	0800acf1 	.word	0x0800acf1
 800ad34:	2000a49c 	.word	0x2000a49c

0800ad38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <tcp_timer_needed+0x30>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10f      	bne.n	800ad64 <tcp_timer_needed+0x2c>
 800ad44:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <tcp_timer_needed+0x34>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <tcp_timer_needed+0x1c>
 800ad4c:	4b08      	ldr	r3, [pc, #32]	; (800ad70 <tcp_timer_needed+0x38>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ad54:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <tcp_timer_needed+0x30>)
 800ad56:	2201      	movs	r2, #1
 800ad58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	4905      	ldr	r1, [pc, #20]	; (800ad74 <tcp_timer_needed+0x3c>)
 800ad5e:	20fa      	movs	r0, #250	; 0xfa
 800ad60:	f000 f8cc 	bl	800aefc <sys_timeout>
  }
}
 800ad64:	bf00      	nop
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	2000a49c 	.word	0x2000a49c
 800ad6c:	2000a450 	.word	0x2000a450
 800ad70:	2000a454 	.word	0x2000a454
 800ad74:	0800acf1 	.word	0x0800acf1

0800ad78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad84:	2006      	movs	r0, #6
 800ad86:	f7f9 fc65 	bl	8004654 <memp_malloc>
 800ad8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d109      	bne.n	800ada6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d151      	bne.n	800ae3c <sys_timeout_abs+0xc4>
 800ad98:	4b2a      	ldr	r3, [pc, #168]	; (800ae44 <sys_timeout_abs+0xcc>)
 800ad9a:	22be      	movs	r2, #190	; 0xbe
 800ad9c:	492a      	ldr	r1, [pc, #168]	; (800ae48 <sys_timeout_abs+0xd0>)
 800ad9e:	482b      	ldr	r0, [pc, #172]	; (800ae4c <sys_timeout_abs+0xd4>)
 800ada0:	f003 fa26 	bl	800e1f0 <iprintf>
    return;
 800ada4:	e04a      	b.n	800ae3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2200      	movs	r2, #0
 800adaa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <sys_timeout_abs+0xd8>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d103      	bne.n	800adce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800adc6:	4a22      	ldr	r2, [pc, #136]	; (800ae50 <sys_timeout_abs+0xd8>)
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	6013      	str	r3, [r2, #0]
    return;
 800adcc:	e037      	b.n	800ae3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	4b1f      	ldr	r3, [pc, #124]	; (800ae50 <sys_timeout_abs+0xd8>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	0fdb      	lsrs	r3, r3, #31
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ade6:	4b1a      	ldr	r3, [pc, #104]	; (800ae50 <sys_timeout_abs+0xd8>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800adee:	4a18      	ldr	r2, [pc, #96]	; (800ae50 <sys_timeout_abs+0xd8>)
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	6013      	str	r3, [r2, #0]
 800adf4:	e023      	b.n	800ae3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800adf6:	4b16      	ldr	r3, [pc, #88]	; (800ae50 <sys_timeout_abs+0xd8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	e01a      	b.n	800ae34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <sys_timeout_abs+0xa6>
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	0fdb      	lsrs	r3, r3, #31
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d007      	beq.n	800ae2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	601a      	str	r2, [r3, #0]
        break;
 800ae2c:	e007      	b.n	800ae3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e1      	bne.n	800adfe <sys_timeout_abs+0x86>
 800ae3a:	e000      	b.n	800ae3e <sys_timeout_abs+0xc6>
    return;
 800ae3c:	bf00      	nop
      }
    }
  }
}
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	08010f48 	.word	0x08010f48
 800ae48:	08010f7c 	.word	0x08010f7c
 800ae4c:	08010fbc 	.word	0x08010fbc
 800ae50:	2000a494 	.word	0x2000a494

0800ae54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4798      	blx	r3

  now = sys_now();
 800ae66:	f7f8 fd1b 	bl	80038a0 <sys_now>
 800ae6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <lwip_cyclic_timer+0x5c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4413      	add	r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	0fdb      	lsrs	r3, r3, #31
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d009      	beq.n	800ae9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	4413      	add	r3, r2
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4907      	ldr	r1, [pc, #28]	; (800aeb4 <lwip_cyclic_timer+0x60>)
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff ff6e 	bl	800ad78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ae9c:	e004      	b.n	800aea8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	4904      	ldr	r1, [pc, #16]	; (800aeb4 <lwip_cyclic_timer+0x60>)
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff ff68 	bl	800ad78 <sys_timeout_abs>
}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	2000a498 	.word	0x2000a498
 800aeb4:	0800ae55 	.word	0x0800ae55

0800aeb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aebe:	2301      	movs	r3, #1
 800aec0:	607b      	str	r3, [r7, #4]
 800aec2:	e00e      	b.n	800aee2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aec4:	4a0b      	ldr	r2, [pc, #44]	; (800aef4 <sys_timeouts_init+0x3c>)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	4a08      	ldr	r2, [pc, #32]	; (800aef4 <sys_timeouts_init+0x3c>)
 800aed2:	4413      	add	r3, r2
 800aed4:	461a      	mov	r2, r3
 800aed6:	4908      	ldr	r1, [pc, #32]	; (800aef8 <sys_timeouts_init+0x40>)
 800aed8:	f000 f810 	bl	800aefc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3301      	adds	r3, #1
 800aee0:	607b      	str	r3, [r7, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d9ed      	bls.n	800aec4 <sys_timeouts_init+0xc>
  }
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	08011b2c 	.word	0x08011b2c
 800aef8:	0800ae55 	.word	0x0800ae55

0800aefc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af0e:	d306      	bcc.n	800af1e <sys_timeout+0x22>
 800af10:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <sys_timeout+0x40>)
 800af12:	f240 1229 	movw	r2, #297	; 0x129
 800af16:	490a      	ldr	r1, [pc, #40]	; (800af40 <sys_timeout+0x44>)
 800af18:	480a      	ldr	r0, [pc, #40]	; (800af44 <sys_timeout+0x48>)
 800af1a:	f003 f969 	bl	800e1f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800af1e:	f7f8 fcbf 	bl	80038a0 <sys_now>
 800af22:	4602      	mov	r2, r0
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	4413      	add	r3, r2
 800af28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	68b9      	ldr	r1, [r7, #8]
 800af2e:	6978      	ldr	r0, [r7, #20]
 800af30:	f7ff ff22 	bl	800ad78 <sys_timeout_abs>
#endif
}
 800af34:	bf00      	nop
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	08010f48 	.word	0x08010f48
 800af40:	08010fe4 	.word	0x08010fe4
 800af44:	08010fbc 	.word	0x08010fbc

0800af48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800af4e:	f7f8 fca7 	bl	80038a0 <sys_now>
 800af52:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800af54:	4b1a      	ldr	r3, [pc, #104]	; (800afc0 <sys_check_timeouts+0x78>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <sys_check_timeouts+0x1a>
 800af5e:	f7f9 ff25 	bl	8004dac <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800af62:	4b18      	ldr	r3, [pc, #96]	; (800afc4 <sys_check_timeouts+0x7c>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d022      	beq.n	800afb4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	0fdb      	lsrs	r3, r3, #31
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d11a      	bne.n	800afb8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a0f      	ldr	r2, [pc, #60]	; (800afc4 <sys_check_timeouts+0x7c>)
 800af88:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	4a0b      	ldr	r2, [pc, #44]	; (800afc8 <sys_check_timeouts+0x80>)
 800af9c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800af9e:	68b9      	ldr	r1, [r7, #8]
 800afa0:	2006      	movs	r0, #6
 800afa2:	f7f9 fbc7 	bl	8004734 <memp_free>
    if (handler != NULL) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0d3      	beq.n	800af54 <sys_check_timeouts+0xc>
      handler(arg);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6838      	ldr	r0, [r7, #0]
 800afb0:	4798      	blx	r3
  do {
 800afb2:	e7cf      	b.n	800af54 <sys_check_timeouts+0xc>
      return;
 800afb4:	bf00      	nop
 800afb6:	e000      	b.n	800afba <sys_check_timeouts+0x72>
      return;
 800afb8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	2000a441 	.word	0x2000a441
 800afc4:	2000a494 	.word	0x2000a494
 800afc8:	2000a498 	.word	0x2000a498

0800afcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800afd0:	f003 f80e 	bl	800dff0 <rand>
 800afd4:	4603      	mov	r3, r0
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800afdc:	b29b      	uxth	r3, r3
 800afde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	4b01      	ldr	r3, [pc, #4]	; (800afec <udp_init+0x20>)
 800afe6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800afe8:	bf00      	nop
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20000028 	.word	0x20000028

0800aff0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800affa:	4b17      	ldr	r3, [pc, #92]	; (800b058 <udp_new_port+0x68>)
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	b291      	uxth	r1, r2
 800b002:	4a15      	ldr	r2, [pc, #84]	; (800b058 <udp_new_port+0x68>)
 800b004:	8011      	strh	r1, [r2, #0]
 800b006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d103      	bne.n	800b016 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b00e:	4b12      	ldr	r3, [pc, #72]	; (800b058 <udp_new_port+0x68>)
 800b010:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b014:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b016:	4b11      	ldr	r3, [pc, #68]	; (800b05c <udp_new_port+0x6c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	e011      	b.n	800b042 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	8a5a      	ldrh	r2, [r3, #18]
 800b022:	4b0d      	ldr	r3, [pc, #52]	; (800b058 <udp_new_port+0x68>)
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d108      	bne.n	800b03c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b02a:	88fb      	ldrh	r3, [r7, #6]
 800b02c:	3301      	adds	r3, #1
 800b02e:	80fb      	strh	r3, [r7, #6]
 800b030:	88fb      	ldrh	r3, [r7, #6]
 800b032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b036:	d3e0      	bcc.n	800affa <udp_new_port+0xa>
        return 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	e007      	b.n	800b04c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	603b      	str	r3, [r7, #0]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1ea      	bne.n	800b01e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b048:	4b03      	ldr	r3, [pc, #12]	; (800b058 <udp_new_port+0x68>)
 800b04a:	881b      	ldrh	r3, [r3, #0]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	20000028 	.word	0x20000028
 800b05c:	2000a4a0 	.word	0x2000a4a0

0800b060 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d105      	bne.n	800b080 <udp_input_local_match+0x20>
 800b074:	4b27      	ldr	r3, [pc, #156]	; (800b114 <udp_input_local_match+0xb4>)
 800b076:	2287      	movs	r2, #135	; 0x87
 800b078:	4927      	ldr	r1, [pc, #156]	; (800b118 <udp_input_local_match+0xb8>)
 800b07a:	4828      	ldr	r0, [pc, #160]	; (800b11c <udp_input_local_match+0xbc>)
 800b07c:	f003 f8b8 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d105      	bne.n	800b092 <udp_input_local_match+0x32>
 800b086:	4b23      	ldr	r3, [pc, #140]	; (800b114 <udp_input_local_match+0xb4>)
 800b088:	2288      	movs	r2, #136	; 0x88
 800b08a:	4925      	ldr	r1, [pc, #148]	; (800b120 <udp_input_local_match+0xc0>)
 800b08c:	4823      	ldr	r0, [pc, #140]	; (800b11c <udp_input_local_match+0xbc>)
 800b08e:	f003 f8af 	bl	800e1f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	7a1b      	ldrb	r3, [r3, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00b      	beq.n	800b0b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	7a1a      	ldrb	r2, [r3, #8]
 800b09e:	4b21      	ldr	r3, [pc, #132]	; (800b124 <udp_input_local_match+0xc4>)
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d001      	beq.n	800b0b2 <udp_input_local_match+0x52>
    return 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e02b      	b.n	800b10a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b0b2:	79fb      	ldrb	r3, [r7, #7]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d018      	beq.n	800b0ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d013      	beq.n	800b0e6 <udp_input_local_match+0x86>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00f      	beq.n	800b0e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b0c6:	4b17      	ldr	r3, [pc, #92]	; (800b124 <udp_input_local_match+0xc4>)
 800b0c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ce:	d00a      	beq.n	800b0e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	4b13      	ldr	r3, [pc, #76]	; (800b124 <udp_input_local_match+0xc4>)
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	405a      	eors	r2, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	3308      	adds	r3, #8
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d110      	bne.n	800b108 <udp_input_local_match+0xa8>
          return 1;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e00f      	b.n	800b10a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d009      	beq.n	800b104 <udp_input_local_match+0xa4>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d005      	beq.n	800b104 <udp_input_local_match+0xa4>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	4b09      	ldr	r3, [pc, #36]	; (800b124 <udp_input_local_match+0xc4>)
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	429a      	cmp	r2, r3
 800b102:	d101      	bne.n	800b108 <udp_input_local_match+0xa8>
        return 1;
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	08011030 	.word	0x08011030
 800b118:	08011060 	.word	0x08011060
 800b11c:	08011084 	.word	0x08011084
 800b120:	080110ac 	.word	0x080110ac
 800b124:	20004d14 	.word	0x20004d14

0800b128 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b08d      	sub	sp, #52	; 0x34
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d105      	bne.n	800b148 <udp_input+0x20>
 800b13c:	4b7c      	ldr	r3, [pc, #496]	; (800b330 <udp_input+0x208>)
 800b13e:	22cf      	movs	r2, #207	; 0xcf
 800b140:	497c      	ldr	r1, [pc, #496]	; (800b334 <udp_input+0x20c>)
 800b142:	487d      	ldr	r0, [pc, #500]	; (800b338 <udp_input+0x210>)
 800b144:	f003 f854 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d105      	bne.n	800b15a <udp_input+0x32>
 800b14e:	4b78      	ldr	r3, [pc, #480]	; (800b330 <udp_input+0x208>)
 800b150:	22d0      	movs	r2, #208	; 0xd0
 800b152:	497a      	ldr	r1, [pc, #488]	; (800b33c <udp_input+0x214>)
 800b154:	4878      	ldr	r0, [pc, #480]	; (800b338 <udp_input+0x210>)
 800b156:	f003 f84b 	bl	800e1f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	895b      	ldrh	r3, [r3, #10]
 800b15e:	2b07      	cmp	r3, #7
 800b160:	d803      	bhi.n	800b16a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7fa f95c 	bl	8005420 <pbuf_free>
    goto end;
 800b168:	e0de      	b.n	800b328 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b170:	4b73      	ldr	r3, [pc, #460]	; (800b340 <udp_input+0x218>)
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	4a72      	ldr	r2, [pc, #456]	; (800b340 <udp_input+0x218>)
 800b176:	6812      	ldr	r2, [r2, #0]
 800b178:	4611      	mov	r1, r2
 800b17a:	4618      	mov	r0, r3
 800b17c:	f001 ffe2 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800b180:	4603      	mov	r3, r0
 800b182:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	b29b      	uxth	r3, r3
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7f8 fdea 	bl	8003d64 <lwip_htons>
 800b190:	4603      	mov	r3, r0
 800b192:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	885b      	ldrh	r3, [r3, #2]
 800b198:	b29b      	uxth	r3, r3
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7f8 fde2 	bl	8003d64 <lwip_htons>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1b0:	4b64      	ldr	r3, [pc, #400]	; (800b344 <udp_input+0x21c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1b6:	e054      	b.n	800b262 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	8a5b      	ldrh	r3, [r3, #18]
 800b1bc:	89fa      	ldrh	r2, [r7, #14]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d14a      	bne.n	800b258 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b1c2:	7cfb      	ldrb	r3, [r7, #19]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ca:	f7ff ff49 	bl	800b060 <udp_input_local_match>
 800b1ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d041      	beq.n	800b258 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	7c1b      	ldrb	r3, [r3, #16]
 800b1d8:	f003 0304 	and.w	r3, r3, #4
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d11d      	bne.n	800b21c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d102      	bne.n	800b1ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	61fb      	str	r3, [r7, #28]
 800b1ea:	e017      	b.n	800b21c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b1ec:	7cfb      	ldrb	r3, [r7, #19]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d014      	beq.n	800b21c <udp_input+0xf4>
 800b1f2:	4b53      	ldr	r3, [pc, #332]	; (800b340 <udp_input+0x218>)
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fa:	d10f      	bne.n	800b21c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	3304      	adds	r3, #4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d008      	beq.n	800b21c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	3304      	adds	r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	429a      	cmp	r2, r3
 800b216:	d101      	bne.n	800b21c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	8a9b      	ldrh	r3, [r3, #20]
 800b220:	8a3a      	ldrh	r2, [r7, #16]
 800b222:	429a      	cmp	r2, r3
 800b224:	d118      	bne.n	800b258 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d005      	beq.n	800b23a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	4b43      	ldr	r3, [pc, #268]	; (800b340 <udp_input+0x218>)
 800b234:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b236:	429a      	cmp	r2, r3
 800b238:	d10e      	bne.n	800b258 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d014      	beq.n	800b26a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	68da      	ldr	r2, [r3, #12]
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b248:	4b3e      	ldr	r3, [pc, #248]	; (800b344 <udp_input+0x21c>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b250:	4a3c      	ldr	r2, [pc, #240]	; (800b344 <udp_input+0x21c>)
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b256:	e008      	b.n	800b26a <udp_input+0x142>
      }
    }

    prev = pcb;
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1a7      	bne.n	800b1b8 <udp_input+0x90>
 800b268:	e000      	b.n	800b26c <udp_input+0x144>
        break;
 800b26a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <udp_input+0x15a>
    for_us = 1;
 800b27c:	2301      	movs	r3, #1
 800b27e:	76fb      	strb	r3, [r7, #27]
 800b280:	e00a      	b.n	800b298 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	3304      	adds	r3, #4
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	4b2d      	ldr	r3, [pc, #180]	; (800b340 <udp_input+0x218>)
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	bf0c      	ite	eq
 800b290:	2301      	moveq	r3, #1
 800b292:	2300      	movne	r3, #0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b298:	7efb      	ldrb	r3, [r7, #27]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d041      	beq.n	800b322 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b29e:	2108      	movs	r1, #8
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7fa f837 	bl	8005314 <pbuf_remove_header>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00a      	beq.n	800b2c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b2ac:	4b20      	ldr	r3, [pc, #128]	; (800b330 <udp_input+0x208>)
 800b2ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b2b2:	4925      	ldr	r1, [pc, #148]	; (800b348 <udp_input+0x220>)
 800b2b4:	4820      	ldr	r0, [pc, #128]	; (800b338 <udp_input+0x210>)
 800b2b6:	f002 ff9b 	bl	800e1f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7fa f8b0 	bl	8005420 <pbuf_free>
      goto end;
 800b2c0:	e032      	b.n	800b328 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d012      	beq.n	800b2ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00a      	beq.n	800b2e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	699c      	ldr	r4, [r3, #24]
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	69d8      	ldr	r0, [r3, #28]
 800b2d8:	8a3b      	ldrh	r3, [r7, #16]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	4b1b      	ldr	r3, [pc, #108]	; (800b34c <udp_input+0x224>)
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b2e4:	e021      	b.n	800b32a <udp_input+0x202>
        pbuf_free(p);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7fa f89a 	bl	8005420 <pbuf_free>
        goto end;
 800b2ec:	e01c      	b.n	800b328 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b2ee:	7cfb      	ldrb	r3, [r7, #19]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d112      	bne.n	800b31a <udp_input+0x1f2>
 800b2f4:	4b12      	ldr	r3, [pc, #72]	; (800b340 <udp_input+0x218>)
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2fc:	2be0      	cmp	r3, #224	; 0xe0
 800b2fe:	d00c      	beq.n	800b31a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b300:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <udp_input+0x218>)
 800b302:	899b      	ldrh	r3, [r3, #12]
 800b304:	3308      	adds	r3, #8
 800b306:	b29b      	uxth	r3, r3
 800b308:	b21b      	sxth	r3, r3
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7fa f874 	bl	80053fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b312:	2103      	movs	r1, #3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 fbf5 	bl	800cb04 <icmp_dest_unreach>
      pbuf_free(p);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7fa f880 	bl	8005420 <pbuf_free>
  return;
 800b320:	e003      	b.n	800b32a <udp_input+0x202>
    pbuf_free(p);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7fa f87c 	bl	8005420 <pbuf_free>
  return;
 800b328:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b32a:	372c      	adds	r7, #44	; 0x2c
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}
 800b330:	08011030 	.word	0x08011030
 800b334:	080110d4 	.word	0x080110d4
 800b338:	08011084 	.word	0x08011084
 800b33c:	080110ec 	.word	0x080110ec
 800b340:	20004d14 	.word	0x20004d14
 800b344:	2000a4a0 	.word	0x2000a4a0
 800b348:	08011108 	.word	0x08011108
 800b34c:	20004d24 	.word	0x20004d24

0800b350 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d109      	bne.n	800b374 <udp_send+0x24>
 800b360:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <udp_send+0x58>)
 800b362:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b366:	4911      	ldr	r1, [pc, #68]	; (800b3ac <udp_send+0x5c>)
 800b368:	4811      	ldr	r0, [pc, #68]	; (800b3b0 <udp_send+0x60>)
 800b36a:	f002 ff41 	bl	800e1f0 <iprintf>
 800b36e:	f06f 030f 	mvn.w	r3, #15
 800b372:	e015      	b.n	800b3a0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d109      	bne.n	800b38e <udp_send+0x3e>
 800b37a:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <udp_send+0x58>)
 800b37c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b380:	490c      	ldr	r1, [pc, #48]	; (800b3b4 <udp_send+0x64>)
 800b382:	480b      	ldr	r0, [pc, #44]	; (800b3b0 <udp_send+0x60>)
 800b384:	f002 ff34 	bl	800e1f0 <iprintf>
 800b388:	f06f 030f 	mvn.w	r3, #15
 800b38c:	e008      	b.n	800b3a0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	1d1a      	adds	r2, r3, #4
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	8a9b      	ldrh	r3, [r3, #20]
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f80d 	bl	800b3b8 <udp_sendto>
 800b39e:	4603      	mov	r3, r0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	08011030 	.word	0x08011030
 800b3ac:	08011124 	.word	0x08011124
 800b3b0:	08011084 	.word	0x08011084
 800b3b4:	0801113c 	.word	0x0801113c

0800b3b8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af02      	add	r7, sp, #8
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d109      	bne.n	800b3e0 <udp_sendto+0x28>
 800b3cc:	4b23      	ldr	r3, [pc, #140]	; (800b45c <udp_sendto+0xa4>)
 800b3ce:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b3d2:	4923      	ldr	r1, [pc, #140]	; (800b460 <udp_sendto+0xa8>)
 800b3d4:	4823      	ldr	r0, [pc, #140]	; (800b464 <udp_sendto+0xac>)
 800b3d6:	f002 ff0b 	bl	800e1f0 <iprintf>
 800b3da:	f06f 030f 	mvn.w	r3, #15
 800b3de:	e038      	b.n	800b452 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d109      	bne.n	800b3fa <udp_sendto+0x42>
 800b3e6:	4b1d      	ldr	r3, [pc, #116]	; (800b45c <udp_sendto+0xa4>)
 800b3e8:	f240 2219 	movw	r2, #537	; 0x219
 800b3ec:	491e      	ldr	r1, [pc, #120]	; (800b468 <udp_sendto+0xb0>)
 800b3ee:	481d      	ldr	r0, [pc, #116]	; (800b464 <udp_sendto+0xac>)
 800b3f0:	f002 fefe 	bl	800e1f0 <iprintf>
 800b3f4:	f06f 030f 	mvn.w	r3, #15
 800b3f8:	e02b      	b.n	800b452 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d109      	bne.n	800b414 <udp_sendto+0x5c>
 800b400:	4b16      	ldr	r3, [pc, #88]	; (800b45c <udp_sendto+0xa4>)
 800b402:	f240 221a 	movw	r2, #538	; 0x21a
 800b406:	4919      	ldr	r1, [pc, #100]	; (800b46c <udp_sendto+0xb4>)
 800b408:	4816      	ldr	r0, [pc, #88]	; (800b464 <udp_sendto+0xac>)
 800b40a:	f002 fef1 	bl	800e1f0 <iprintf>
 800b40e:	f06f 030f 	mvn.w	r3, #15
 800b412:	e01e      	b.n	800b452 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	7a1b      	ldrb	r3, [r3, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d006      	beq.n	800b42a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	7a1b      	ldrb	r3, [r3, #8]
 800b420:	4618      	mov	r0, r3
 800b422:	f7f9 fc9d 	bl	8004d60 <netif_get_by_index>
 800b426:	6178      	str	r0, [r7, #20]
 800b428:	e003      	b.n	800b432 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fbf4 	bl	800cc18 <ip4_route>
 800b430:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d102      	bne.n	800b43e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b438:	f06f 0303 	mvn.w	r3, #3
 800b43c:	e009      	b.n	800b452 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b43e:	887a      	ldrh	r2, [r7, #2]
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	4613      	mov	r3, r2
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	68b9      	ldr	r1, [r7, #8]
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f000 f810 	bl	800b470 <udp_sendto_if>
 800b450:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b452:	4618      	mov	r0, r3
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	08011030 	.word	0x08011030
 800b460:	08011154 	.word	0x08011154
 800b464:	08011084 	.word	0x08011084
 800b468:	0801116c 	.word	0x0801116c
 800b46c:	08011188 	.word	0x08011188

0800b470 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af02      	add	r7, sp, #8
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d109      	bne.n	800b498 <udp_sendto_if+0x28>
 800b484:	4b2e      	ldr	r3, [pc, #184]	; (800b540 <udp_sendto_if+0xd0>)
 800b486:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b48a:	492e      	ldr	r1, [pc, #184]	; (800b544 <udp_sendto_if+0xd4>)
 800b48c:	482e      	ldr	r0, [pc, #184]	; (800b548 <udp_sendto_if+0xd8>)
 800b48e:	f002 feaf 	bl	800e1f0 <iprintf>
 800b492:	f06f 030f 	mvn.w	r3, #15
 800b496:	e04f      	b.n	800b538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d109      	bne.n	800b4b2 <udp_sendto_if+0x42>
 800b49e:	4b28      	ldr	r3, [pc, #160]	; (800b540 <udp_sendto_if+0xd0>)
 800b4a0:	f240 2281 	movw	r2, #641	; 0x281
 800b4a4:	4929      	ldr	r1, [pc, #164]	; (800b54c <udp_sendto_if+0xdc>)
 800b4a6:	4828      	ldr	r0, [pc, #160]	; (800b548 <udp_sendto_if+0xd8>)
 800b4a8:	f002 fea2 	bl	800e1f0 <iprintf>
 800b4ac:	f06f 030f 	mvn.w	r3, #15
 800b4b0:	e042      	b.n	800b538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d109      	bne.n	800b4cc <udp_sendto_if+0x5c>
 800b4b8:	4b21      	ldr	r3, [pc, #132]	; (800b540 <udp_sendto_if+0xd0>)
 800b4ba:	f240 2282 	movw	r2, #642	; 0x282
 800b4be:	4924      	ldr	r1, [pc, #144]	; (800b550 <udp_sendto_if+0xe0>)
 800b4c0:	4821      	ldr	r0, [pc, #132]	; (800b548 <udp_sendto_if+0xd8>)
 800b4c2:	f002 fe95 	bl	800e1f0 <iprintf>
 800b4c6:	f06f 030f 	mvn.w	r3, #15
 800b4ca:	e035      	b.n	800b538 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d109      	bne.n	800b4e6 <udp_sendto_if+0x76>
 800b4d2:	4b1b      	ldr	r3, [pc, #108]	; (800b540 <udp_sendto_if+0xd0>)
 800b4d4:	f240 2283 	movw	r2, #643	; 0x283
 800b4d8:	491e      	ldr	r1, [pc, #120]	; (800b554 <udp_sendto_if+0xe4>)
 800b4da:	481b      	ldr	r0, [pc, #108]	; (800b548 <udp_sendto_if+0xd8>)
 800b4dc:	f002 fe88 	bl	800e1f0 <iprintf>
 800b4e0:	f06f 030f 	mvn.w	r3, #15
 800b4e4:	e028      	b.n	800b538 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d009      	beq.n	800b500 <udp_sendto_if+0x90>
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d005      	beq.n	800b500 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b4fc:	2be0      	cmp	r3, #224	; 0xe0
 800b4fe:	d103      	bne.n	800b508 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	3304      	adds	r3, #4
 800b504:	617b      	str	r3, [r7, #20]
 800b506:	e00b      	b.n	800b520 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	3304      	adds	r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d002      	beq.n	800b51c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b516:	f06f 0303 	mvn.w	r3, #3
 800b51a:	e00d      	b.n	800b538 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b520:	887a      	ldrh	r2, [r7, #2]
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	4613      	mov	r3, r2
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 f811 	bl	800b558 <udp_sendto_if_src>
 800b536:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3718      	adds	r7, #24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	08011030 	.word	0x08011030
 800b544:	080111a4 	.word	0x080111a4
 800b548:	08011084 	.word	0x08011084
 800b54c:	080111c0 	.word	0x080111c0
 800b550:	080111dc 	.word	0x080111dc
 800b554:	080111fc 	.word	0x080111fc

0800b558 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08c      	sub	sp, #48	; 0x30
 800b55c:	af04      	add	r7, sp, #16
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d109      	bne.n	800b580 <udp_sendto_if_src+0x28>
 800b56c:	4b65      	ldr	r3, [pc, #404]	; (800b704 <udp_sendto_if_src+0x1ac>)
 800b56e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b572:	4965      	ldr	r1, [pc, #404]	; (800b708 <udp_sendto_if_src+0x1b0>)
 800b574:	4865      	ldr	r0, [pc, #404]	; (800b70c <udp_sendto_if_src+0x1b4>)
 800b576:	f002 fe3b 	bl	800e1f0 <iprintf>
 800b57a:	f06f 030f 	mvn.w	r3, #15
 800b57e:	e0bc      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d109      	bne.n	800b59a <udp_sendto_if_src+0x42>
 800b586:	4b5f      	ldr	r3, [pc, #380]	; (800b704 <udp_sendto_if_src+0x1ac>)
 800b588:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b58c:	4960      	ldr	r1, [pc, #384]	; (800b710 <udp_sendto_if_src+0x1b8>)
 800b58e:	485f      	ldr	r0, [pc, #380]	; (800b70c <udp_sendto_if_src+0x1b4>)
 800b590:	f002 fe2e 	bl	800e1f0 <iprintf>
 800b594:	f06f 030f 	mvn.w	r3, #15
 800b598:	e0af      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d109      	bne.n	800b5b4 <udp_sendto_if_src+0x5c>
 800b5a0:	4b58      	ldr	r3, [pc, #352]	; (800b704 <udp_sendto_if_src+0x1ac>)
 800b5a2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b5a6:	495b      	ldr	r1, [pc, #364]	; (800b714 <udp_sendto_if_src+0x1bc>)
 800b5a8:	4858      	ldr	r0, [pc, #352]	; (800b70c <udp_sendto_if_src+0x1b4>)
 800b5aa:	f002 fe21 	bl	800e1f0 <iprintf>
 800b5ae:	f06f 030f 	mvn.w	r3, #15
 800b5b2:	e0a2      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d109      	bne.n	800b5ce <udp_sendto_if_src+0x76>
 800b5ba:	4b52      	ldr	r3, [pc, #328]	; (800b704 <udp_sendto_if_src+0x1ac>)
 800b5bc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b5c0:	4955      	ldr	r1, [pc, #340]	; (800b718 <udp_sendto_if_src+0x1c0>)
 800b5c2:	4852      	ldr	r0, [pc, #328]	; (800b70c <udp_sendto_if_src+0x1b4>)
 800b5c4:	f002 fe14 	bl	800e1f0 <iprintf>
 800b5c8:	f06f 030f 	mvn.w	r3, #15
 800b5cc:	e095      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d109      	bne.n	800b5e8 <udp_sendto_if_src+0x90>
 800b5d4:	4b4b      	ldr	r3, [pc, #300]	; (800b704 <udp_sendto_if_src+0x1ac>)
 800b5d6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b5da:	4950      	ldr	r1, [pc, #320]	; (800b71c <udp_sendto_if_src+0x1c4>)
 800b5dc:	484b      	ldr	r0, [pc, #300]	; (800b70c <udp_sendto_if_src+0x1b4>)
 800b5de:	f002 fe07 	bl	800e1f0 <iprintf>
 800b5e2:	f06f 030f 	mvn.w	r3, #15
 800b5e6:	e088      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8a5b      	ldrh	r3, [r3, #18]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10f      	bne.n	800b610 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b5f0:	68f9      	ldr	r1, [r7, #12]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8a5b      	ldrh	r3, [r3, #18]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 f893 	bl	800b724 <udp_bind>
 800b5fe:	4603      	mov	r3, r0
 800b600:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b602:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b60a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b60e:	e074      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	891b      	ldrh	r3, [r3, #8]
 800b614:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b618:	4293      	cmp	r3, r2
 800b61a:	d902      	bls.n	800b622 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b61c:	f04f 33ff 	mov.w	r3, #4294967295
 800b620:	e06b      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b622:	2108      	movs	r1, #8
 800b624:	68b8      	ldr	r0, [r7, #8]
 800b626:	f7f9 fe65 	bl	80052f4 <pbuf_add_header>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d015      	beq.n	800b65c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b630:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b634:	2108      	movs	r1, #8
 800b636:	2022      	movs	r0, #34	; 0x22
 800b638:	f7f9 fc0e 	bl	8004e58 <pbuf_alloc>
 800b63c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b644:	f04f 33ff 	mov.w	r3, #4294967295
 800b648:	e057      	b.n	800b6fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	891b      	ldrh	r3, [r3, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d006      	beq.n	800b660 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	69f8      	ldr	r0, [r7, #28]
 800b656:	f7f9 fffb 	bl	8005650 <pbuf_chain>
 800b65a:	e001      	b.n	800b660 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	895b      	ldrh	r3, [r3, #10]
 800b664:	2b07      	cmp	r3, #7
 800b666:	d806      	bhi.n	800b676 <udp_sendto_if_src+0x11e>
 800b668:	4b26      	ldr	r3, [pc, #152]	; (800b704 <udp_sendto_if_src+0x1ac>)
 800b66a:	f240 320d 	movw	r2, #781	; 0x30d
 800b66e:	492c      	ldr	r1, [pc, #176]	; (800b720 <udp_sendto_if_src+0x1c8>)
 800b670:	4826      	ldr	r0, [pc, #152]	; (800b70c <udp_sendto_if_src+0x1b4>)
 800b672:	f002 fdbd 	bl	800e1f0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	8a5b      	ldrh	r3, [r3, #18]
 800b680:	4618      	mov	r0, r3
 800b682:	f7f8 fb6f 	bl	8003d64 <lwip_htons>
 800b686:	4603      	mov	r3, r0
 800b688:	461a      	mov	r2, r3
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b68e:	887b      	ldrh	r3, [r7, #2]
 800b690:	4618      	mov	r0, r3
 800b692:	f7f8 fb67 	bl	8003d64 <lwip_htons>
 800b696:	4603      	mov	r3, r0
 800b698:	461a      	mov	r2, r3
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	719a      	strb	r2, [r3, #6]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	891b      	ldrh	r3, [r3, #8]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7f8 fb59 	bl	8003d64 <lwip_htons>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b6ba:	2311      	movs	r3, #17
 800b6bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	7adb      	ldrb	r3, [r3, #11]
 800b6c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	7a9b      	ldrb	r3, [r3, #10]
 800b6c8:	7cb9      	ldrb	r1, [r7, #18]
 800b6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6cc:	9202      	str	r2, [sp, #8]
 800b6ce:	7cfa      	ldrb	r2, [r7, #19]
 800b6d0:	9201      	str	r2, [sp, #4]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6da:	69f8      	ldr	r0, [r7, #28]
 800b6dc:	f001 fc84 	bl	800cfe8 <ip4_output_if_src>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b6e4:	69fa      	ldr	r2, [r7, #28]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d004      	beq.n	800b6f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b6ec:	69f8      	ldr	r0, [r7, #28]
 800b6ee:	f7f9 fe97 	bl	8005420 <pbuf_free>
    q = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b6f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3720      	adds	r7, #32
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	08011030 	.word	0x08011030
 800b708:	0801121c 	.word	0x0801121c
 800b70c:	08011084 	.word	0x08011084
 800b710:	0801123c 	.word	0x0801123c
 800b714:	0801125c 	.word	0x0801125c
 800b718:	08011280 	.word	0x08011280
 800b71c:	080112a4 	.word	0x080112a4
 800b720:	080112c8 	.word	0x080112c8

0800b724 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	4613      	mov	r3, r2
 800b730:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b738:	4b39      	ldr	r3, [pc, #228]	; (800b820 <udp_bind+0xfc>)
 800b73a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d109      	bne.n	800b756 <udp_bind+0x32>
 800b742:	4b38      	ldr	r3, [pc, #224]	; (800b824 <udp_bind+0x100>)
 800b744:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b748:	4937      	ldr	r1, [pc, #220]	; (800b828 <udp_bind+0x104>)
 800b74a:	4838      	ldr	r0, [pc, #224]	; (800b82c <udp_bind+0x108>)
 800b74c:	f002 fd50 	bl	800e1f0 <iprintf>
 800b750:	f06f 030f 	mvn.w	r3, #15
 800b754:	e060      	b.n	800b818 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b75a:	4b35      	ldr	r3, [pc, #212]	; (800b830 <udp_bind+0x10c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	617b      	str	r3, [r7, #20]
 800b760:	e009      	b.n	800b776 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	429a      	cmp	r2, r3
 800b768:	d102      	bne.n	800b770 <udp_bind+0x4c>
      rebind = 1;
 800b76a:	2301      	movs	r3, #1
 800b76c:	74fb      	strb	r3, [r7, #19]
      break;
 800b76e:	e005      	b.n	800b77c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	617b      	str	r3, [r7, #20]
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1f2      	bne.n	800b762 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b77c:	88fb      	ldrh	r3, [r7, #6]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d109      	bne.n	800b796 <udp_bind+0x72>
    port = udp_new_port();
 800b782:	f7ff fc35 	bl	800aff0 <udp_new_port>
 800b786:	4603      	mov	r3, r0
 800b788:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d12c      	bne.n	800b7ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b790:	f06f 0307 	mvn.w	r3, #7
 800b794:	e040      	b.n	800b818 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b796:	4b26      	ldr	r3, [pc, #152]	; (800b830 <udp_bind+0x10c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	e022      	b.n	800b7e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d01b      	beq.n	800b7de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	8a5b      	ldrh	r3, [r3, #18]
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d116      	bne.n	800b7de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d00d      	beq.n	800b7d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <udp_bind+0xb4>
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d006      	beq.n	800b7d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b7ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d102      	bne.n	800b7de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b7d8:	f06f 0307 	mvn.w	r3, #7
 800b7dc:	e01c      	b.n	800b818 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1d9      	bne.n	800b79e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <udp_bind+0xd2>
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	e000      	b.n	800b7f8 <udp_bind+0xd4>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	88fa      	ldrh	r2, [r7, #6]
 800b800:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b802:	7cfb      	ldrb	r3, [r7, #19]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d106      	bne.n	800b816 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b808:	4b09      	ldr	r3, [pc, #36]	; (800b830 <udp_bind+0x10c>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b810:	4a07      	ldr	r2, [pc, #28]	; (800b830 <udp_bind+0x10c>)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	08011b44 	.word	0x08011b44
 800b824:	08011030 	.word	0x08011030
 800b828:	080112f8 	.word	0x080112f8
 800b82c:	08011084 	.word	0x08011084
 800b830:	2000a4a0 	.word	0x2000a4a0

0800b834 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	4613      	mov	r3, r2
 800b840:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d109      	bne.n	800b85c <udp_connect+0x28>
 800b848:	4b2c      	ldr	r3, [pc, #176]	; (800b8fc <udp_connect+0xc8>)
 800b84a:	f240 4235 	movw	r2, #1077	; 0x435
 800b84e:	492c      	ldr	r1, [pc, #176]	; (800b900 <udp_connect+0xcc>)
 800b850:	482c      	ldr	r0, [pc, #176]	; (800b904 <udp_connect+0xd0>)
 800b852:	f002 fccd 	bl	800e1f0 <iprintf>
 800b856:	f06f 030f 	mvn.w	r3, #15
 800b85a:	e04b      	b.n	800b8f4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d109      	bne.n	800b876 <udp_connect+0x42>
 800b862:	4b26      	ldr	r3, [pc, #152]	; (800b8fc <udp_connect+0xc8>)
 800b864:	f240 4236 	movw	r2, #1078	; 0x436
 800b868:	4927      	ldr	r1, [pc, #156]	; (800b908 <udp_connect+0xd4>)
 800b86a:	4826      	ldr	r0, [pc, #152]	; (800b904 <udp_connect+0xd0>)
 800b86c:	f002 fcc0 	bl	800e1f0 <iprintf>
 800b870:	f06f 030f 	mvn.w	r3, #15
 800b874:	e03e      	b.n	800b8f4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	8a5b      	ldrh	r3, [r3, #18]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10f      	bne.n	800b89e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b87e:	68f9      	ldr	r1, [r7, #12]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	8a5b      	ldrh	r3, [r3, #18]
 800b884:	461a      	mov	r2, r3
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f7ff ff4c 	bl	800b724 <udp_bind>
 800b88c:	4603      	mov	r3, r0
 800b88e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b890:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <udp_connect+0x6a>
      return err;
 800b898:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b89c:	e02a      	b.n	800b8f4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <udp_connect+0x76>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	e000      	b.n	800b8ac <udp_connect+0x78>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	88fa      	ldrh	r2, [r7, #6]
 800b8b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	7c1b      	ldrb	r3, [r3, #16]
 800b8ba:	f043 0304 	orr.w	r3, r3, #4
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b8c4:	4b11      	ldr	r3, [pc, #68]	; (800b90c <udp_connect+0xd8>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	e008      	b.n	800b8de <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d101      	bne.n	800b8d8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e00d      	b.n	800b8f4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1f3      	bne.n	800b8cc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b8e4:	4b09      	ldr	r3, [pc, #36]	; (800b90c <udp_connect+0xd8>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b8ec:	4a07      	ldr	r2, [pc, #28]	; (800b90c <udp_connect+0xd8>)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	08011030 	.word	0x08011030
 800b900:	08011310 	.word	0x08011310
 800b904:	08011084 	.word	0x08011084
 800b908:	0801132c 	.word	0x0801132c
 800b90c:	2000a4a0 	.word	0x2000a4a0

0800b910 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d107      	bne.n	800b932 <udp_recv+0x22>
 800b922:	4b08      	ldr	r3, [pc, #32]	; (800b944 <udp_recv+0x34>)
 800b924:	f240 428a 	movw	r2, #1162	; 0x48a
 800b928:	4907      	ldr	r1, [pc, #28]	; (800b948 <udp_recv+0x38>)
 800b92a:	4808      	ldr	r0, [pc, #32]	; (800b94c <udp_recv+0x3c>)
 800b92c:	f002 fc60 	bl	800e1f0 <iprintf>
 800b930:	e005      	b.n	800b93e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	61da      	str	r2, [r3, #28]
}
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	08011030 	.word	0x08011030
 800b948:	08011364 	.word	0x08011364
 800b94c:	08011084 	.word	0x08011084

0800b950 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d107      	bne.n	800b96e <udp_remove+0x1e>
 800b95e:	4b19      	ldr	r3, [pc, #100]	; (800b9c4 <udp_remove+0x74>)
 800b960:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b964:	4918      	ldr	r1, [pc, #96]	; (800b9c8 <udp_remove+0x78>)
 800b966:	4819      	ldr	r0, [pc, #100]	; (800b9cc <udp_remove+0x7c>)
 800b968:	f002 fc42 	bl	800e1f0 <iprintf>
 800b96c:	e026      	b.n	800b9bc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b96e:	4b18      	ldr	r3, [pc, #96]	; (800b9d0 <udp_remove+0x80>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	429a      	cmp	r2, r3
 800b976:	d105      	bne.n	800b984 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b978:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <udp_remove+0x80>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	4a14      	ldr	r2, [pc, #80]	; (800b9d0 <udp_remove+0x80>)
 800b980:	6013      	str	r3, [r2, #0]
 800b982:	e017      	b.n	800b9b4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b984:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <udp_remove+0x80>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	e010      	b.n	800b9ae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d009      	beq.n	800b9a8 <udp_remove+0x58>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d104      	bne.n	800b9a8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68da      	ldr	r2, [r3, #12]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	60da      	str	r2, [r3, #12]
        break;
 800b9a6:	e005      	b.n	800b9b4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	60fb      	str	r3, [r7, #12]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1eb      	bne.n	800b98c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	f7f8 febc 	bl	8004734 <memp_free>
}
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	08011030 	.word	0x08011030
 800b9c8:	0801137c 	.word	0x0801137c
 800b9cc:	08011084 	.word	0x08011084
 800b9d0:	2000a4a0 	.word	0x2000a4a0

0800b9d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f7f8 fe3a 	bl	8004654 <memp_malloc>
 800b9e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b9e8:	2220      	movs	r2, #32
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f002 fc64 	bl	800e2ba <memset>
    pcb->ttl = UDP_TTL;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	22ff      	movs	r2, #255	; 0xff
 800b9f6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b9f8:	687b      	ldr	r3, [r7, #4]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
	...

0800ba04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d01e      	beq.n	800ba52 <udp_netif_ip_addr_changed+0x4e>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d01a      	beq.n	800ba52 <udp_netif_ip_addr_changed+0x4e>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d017      	beq.n	800ba52 <udp_netif_ip_addr_changed+0x4e>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d013      	beq.n	800ba52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba2a:	4b0d      	ldr	r3, [pc, #52]	; (800ba60 <udp_netif_ip_addr_changed+0x5c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	e00c      	b.n	800ba4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d103      	bne.n	800ba46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1ef      	bne.n	800ba32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ba52:	bf00      	nop
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	2000a4a0 	.word	0x2000a4a0

0800ba64 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ba6c:	4915      	ldr	r1, [pc, #84]	; (800bac4 <etharp_free_entry+0x60>)
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4613      	mov	r3, r2
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	4413      	add	r3, r2
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	440b      	add	r3, r1
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d013      	beq.n	800baa8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ba80:	4910      	ldr	r1, [pc, #64]	; (800bac4 <etharp_free_entry+0x60>)
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	4613      	mov	r3, r2
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	4413      	add	r3, r2
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	440b      	add	r3, r1
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7f9 fcc5 	bl	8005420 <pbuf_free>
    arp_table[i].q = NULL;
 800ba96:	490b      	ldr	r1, [pc, #44]	; (800bac4 <etharp_free_entry+0x60>)
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	005b      	lsls	r3, r3, #1
 800ba9e:	4413      	add	r3, r2
 800baa0:	00db      	lsls	r3, r3, #3
 800baa2:	440b      	add	r3, r1
 800baa4:	2200      	movs	r2, #0
 800baa6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800baa8:	4906      	ldr	r1, [pc, #24]	; (800bac4 <etharp_free_entry+0x60>)
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	4613      	mov	r3, r2
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	4413      	add	r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	440b      	add	r3, r1
 800bab6:	3314      	adds	r3, #20
 800bab8:	2200      	movs	r2, #0
 800baba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	2000a4a4 	.word	0x2000a4a4

0800bac8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bace:	2300      	movs	r3, #0
 800bad0:	607b      	str	r3, [r7, #4]
 800bad2:	e096      	b.n	800bc02 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bad4:	494f      	ldr	r1, [pc, #316]	; (800bc14 <etharp_tmr+0x14c>)
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	4613      	mov	r3, r2
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	4413      	add	r3, r2
 800bade:	00db      	lsls	r3, r3, #3
 800bae0:	440b      	add	r3, r1
 800bae2:	3314      	adds	r3, #20
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bae8:	78fb      	ldrb	r3, [r7, #3]
 800baea:	2b00      	cmp	r3, #0
 800baec:	f000 8086 	beq.w	800bbfc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800baf0:	4948      	ldr	r1, [pc, #288]	; (800bc14 <etharp_tmr+0x14c>)
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4613      	mov	r3, r2
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	4413      	add	r3, r2
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	440b      	add	r3, r1
 800bafe:	3312      	adds	r3, #18
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	3301      	adds	r3, #1
 800bb04:	b298      	uxth	r0, r3
 800bb06:	4943      	ldr	r1, [pc, #268]	; (800bc14 <etharp_tmr+0x14c>)
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	4413      	add	r3, r2
 800bb10:	00db      	lsls	r3, r3, #3
 800bb12:	440b      	add	r3, r1
 800bb14:	3312      	adds	r3, #18
 800bb16:	4602      	mov	r2, r0
 800bb18:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bb1a:	493e      	ldr	r1, [pc, #248]	; (800bc14 <etharp_tmr+0x14c>)
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	005b      	lsls	r3, r3, #1
 800bb22:	4413      	add	r3, r2
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	440b      	add	r3, r1
 800bb28:	3312      	adds	r3, #18
 800bb2a:	881b      	ldrh	r3, [r3, #0]
 800bb2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bb30:	d215      	bcs.n	800bb5e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bb32:	4938      	ldr	r1, [pc, #224]	; (800bc14 <etharp_tmr+0x14c>)
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	4613      	mov	r3, r2
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	4413      	add	r3, r2
 800bb3c:	00db      	lsls	r3, r3, #3
 800bb3e:	440b      	add	r3, r1
 800bb40:	3314      	adds	r3, #20
 800bb42:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d10e      	bne.n	800bb66 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bb48:	4932      	ldr	r1, [pc, #200]	; (800bc14 <etharp_tmr+0x14c>)
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	4413      	add	r3, r2
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	440b      	add	r3, r1
 800bb56:	3312      	adds	r3, #18
 800bb58:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bb5a:	2b04      	cmp	r3, #4
 800bb5c:	d903      	bls.n	800bb66 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff ff80 	bl	800ba64 <etharp_free_entry>
 800bb64:	e04a      	b.n	800bbfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bb66:	492b      	ldr	r1, [pc, #172]	; (800bc14 <etharp_tmr+0x14c>)
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	4413      	add	r3, r2
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	440b      	add	r3, r1
 800bb74:	3314      	adds	r3, #20
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d10a      	bne.n	800bb92 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bb7c:	4925      	ldr	r1, [pc, #148]	; (800bc14 <etharp_tmr+0x14c>)
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	4613      	mov	r3, r2
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	4413      	add	r3, r2
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	440b      	add	r3, r1
 800bb8a:	3314      	adds	r3, #20
 800bb8c:	2204      	movs	r2, #4
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	e034      	b.n	800bbfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bb92:	4920      	ldr	r1, [pc, #128]	; (800bc14 <etharp_tmr+0x14c>)
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	4613      	mov	r3, r2
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	4413      	add	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	440b      	add	r3, r1
 800bba0:	3314      	adds	r3, #20
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	d10a      	bne.n	800bbbe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bba8:	491a      	ldr	r1, [pc, #104]	; (800bc14 <etharp_tmr+0x14c>)
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	4613      	mov	r3, r2
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	4413      	add	r3, r2
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	440b      	add	r3, r1
 800bbb6:	3314      	adds	r3, #20
 800bbb8:	2202      	movs	r2, #2
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	e01e      	b.n	800bbfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bbbe:	4915      	ldr	r1, [pc, #84]	; (800bc14 <etharp_tmr+0x14c>)
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	4413      	add	r3, r2
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	440b      	add	r3, r1
 800bbcc:	3314      	adds	r3, #20
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d113      	bne.n	800bbfc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bbd4:	490f      	ldr	r1, [pc, #60]	; (800bc14 <etharp_tmr+0x14c>)
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	4413      	add	r3, r2
 800bbde:	00db      	lsls	r3, r3, #3
 800bbe0:	440b      	add	r3, r1
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	4413      	add	r3, r2
 800bbee:	00db      	lsls	r3, r3, #3
 800bbf0:	4a08      	ldr	r2, [pc, #32]	; (800bc14 <etharp_tmr+0x14c>)
 800bbf2:	4413      	add	r3, r2
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	f000 fe6e 	bl	800c8d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	607b      	str	r3, [r7, #4]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b09      	cmp	r3, #9
 800bc06:	f77f af65 	ble.w	800bad4 <etharp_tmr+0xc>
      }
    }
  }
}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	2000a4a4 	.word	0x2000a4a4

0800bc18 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08a      	sub	sp, #40	; 0x28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	460b      	mov	r3, r1
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bc26:	230a      	movs	r3, #10
 800bc28:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bc2a:	230a      	movs	r3, #10
 800bc2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bc2e:	230a      	movs	r3, #10
 800bc30:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bc36:	230a      	movs	r3, #10
 800bc38:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	83bb      	strh	r3, [r7, #28]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	837b      	strh	r3, [r7, #26]
 800bc42:	2300      	movs	r3, #0
 800bc44:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc46:	2300      	movs	r3, #0
 800bc48:	843b      	strh	r3, [r7, #32]
 800bc4a:	e0ae      	b.n	800bdaa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bc4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc50:	49a6      	ldr	r1, [pc, #664]	; (800beec <etharp_find_entry+0x2d4>)
 800bc52:	4613      	mov	r3, r2
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	4413      	add	r3, r2
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	440b      	add	r3, r1
 800bc5c:	3314      	adds	r3, #20
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bc62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bc66:	2b0a      	cmp	r3, #10
 800bc68:	d105      	bne.n	800bc76 <etharp_find_entry+0x5e>
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d102      	bne.n	800bc76 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bc70:	8c3b      	ldrh	r3, [r7, #32]
 800bc72:	847b      	strh	r3, [r7, #34]	; 0x22
 800bc74:	e095      	b.n	800bda2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 8092 	beq.w	800bda2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bc7e:	7dfb      	ldrb	r3, [r7, #23]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d009      	beq.n	800bc98 <etharp_find_entry+0x80>
 800bc84:	7dfb      	ldrb	r3, [r7, #23]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d806      	bhi.n	800bc98 <etharp_find_entry+0x80>
 800bc8a:	4b99      	ldr	r3, [pc, #612]	; (800bef0 <etharp_find_entry+0x2d8>)
 800bc8c:	f240 1223 	movw	r2, #291	; 0x123
 800bc90:	4998      	ldr	r1, [pc, #608]	; (800bef4 <etharp_find_entry+0x2dc>)
 800bc92:	4899      	ldr	r0, [pc, #612]	; (800bef8 <etharp_find_entry+0x2e0>)
 800bc94:	f002 faac 	bl	800e1f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d020      	beq.n	800bce0 <etharp_find_entry+0xc8>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6819      	ldr	r1, [r3, #0]
 800bca2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bca6:	4891      	ldr	r0, [pc, #580]	; (800beec <etharp_find_entry+0x2d4>)
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	4403      	add	r3, r0
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4299      	cmp	r1, r3
 800bcb8:	d112      	bne.n	800bce0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00c      	beq.n	800bcda <etharp_find_entry+0xc2>
 800bcc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcc4:	4989      	ldr	r1, [pc, #548]	; (800beec <etharp_find_entry+0x2d4>)
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	4413      	add	r3, r2
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	440b      	add	r3, r1
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d102      	bne.n	800bce0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bcda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bcde:	e100      	b.n	800bee2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d140      	bne.n	800bd68 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bce6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcea:	4980      	ldr	r1, [pc, #512]	; (800beec <etharp_find_entry+0x2d4>)
 800bcec:	4613      	mov	r3, r2
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	4413      	add	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	440b      	add	r3, r1
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d01a      	beq.n	800bd32 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bcfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd00:	497a      	ldr	r1, [pc, #488]	; (800beec <etharp_find_entry+0x2d4>)
 800bd02:	4613      	mov	r3, r2
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	4413      	add	r3, r2
 800bd08:	00db      	lsls	r3, r3, #3
 800bd0a:	440b      	add	r3, r1
 800bd0c:	3312      	adds	r3, #18
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	8bba      	ldrh	r2, [r7, #28]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d845      	bhi.n	800bda2 <etharp_find_entry+0x18a>
            old_queue = i;
 800bd16:	8c3b      	ldrh	r3, [r7, #32]
 800bd18:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bd1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd1e:	4973      	ldr	r1, [pc, #460]	; (800beec <etharp_find_entry+0x2d4>)
 800bd20:	4613      	mov	r3, r2
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	4413      	add	r3, r2
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	440b      	add	r3, r1
 800bd2a:	3312      	adds	r3, #18
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	83bb      	strh	r3, [r7, #28]
 800bd30:	e037      	b.n	800bda2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bd32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd36:	496d      	ldr	r1, [pc, #436]	; (800beec <etharp_find_entry+0x2d4>)
 800bd38:	4613      	mov	r3, r2
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	4413      	add	r3, r2
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	440b      	add	r3, r1
 800bd42:	3312      	adds	r3, #18
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	8b7a      	ldrh	r2, [r7, #26]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d82a      	bhi.n	800bda2 <etharp_find_entry+0x18a>
            old_pending = i;
 800bd4c:	8c3b      	ldrh	r3, [r7, #32]
 800bd4e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bd50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd54:	4965      	ldr	r1, [pc, #404]	; (800beec <etharp_find_entry+0x2d4>)
 800bd56:	4613      	mov	r3, r2
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	4413      	add	r3, r2
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	440b      	add	r3, r1
 800bd60:	3312      	adds	r3, #18
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	837b      	strh	r3, [r7, #26]
 800bd66:	e01c      	b.n	800bda2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d919      	bls.n	800bda2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bd6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd72:	495e      	ldr	r1, [pc, #376]	; (800beec <etharp_find_entry+0x2d4>)
 800bd74:	4613      	mov	r3, r2
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	4413      	add	r3, r2
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	440b      	add	r3, r1
 800bd7e:	3312      	adds	r3, #18
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	8b3a      	ldrh	r2, [r7, #24]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d80c      	bhi.n	800bda2 <etharp_find_entry+0x18a>
            old_stable = i;
 800bd88:	8c3b      	ldrh	r3, [r7, #32]
 800bd8a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bd8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd90:	4956      	ldr	r1, [pc, #344]	; (800beec <etharp_find_entry+0x2d4>)
 800bd92:	4613      	mov	r3, r2
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	4413      	add	r3, r2
 800bd98:	00db      	lsls	r3, r3, #3
 800bd9a:	440b      	add	r3, r1
 800bd9c:	3312      	adds	r3, #18
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bda2:	8c3b      	ldrh	r3, [r7, #32]
 800bda4:	3301      	adds	r3, #1
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	843b      	strh	r3, [r7, #32]
 800bdaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdae:	2b09      	cmp	r3, #9
 800bdb0:	f77f af4c 	ble.w	800bc4c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bdb4:	7afb      	ldrb	r3, [r7, #11]
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d108      	bne.n	800bdd0 <etharp_find_entry+0x1b8>
 800bdbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bdc2:	2b0a      	cmp	r3, #10
 800bdc4:	d107      	bne.n	800bdd6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bdc6:	7afb      	ldrb	r3, [r7, #11]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bdd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd4:	e085      	b.n	800bee2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bdd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bdda:	2b09      	cmp	r3, #9
 800bddc:	dc02      	bgt.n	800bde4 <etharp_find_entry+0x1cc>
    i = empty;
 800bdde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bde0:	843b      	strh	r3, [r7, #32]
 800bde2:	e039      	b.n	800be58 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bde4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bde8:	2b09      	cmp	r3, #9
 800bdea:	dc14      	bgt.n	800be16 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bdec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bdf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdf4:	493d      	ldr	r1, [pc, #244]	; (800beec <etharp_find_entry+0x2d4>)
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	005b      	lsls	r3, r3, #1
 800bdfa:	4413      	add	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	440b      	add	r3, r1
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d018      	beq.n	800be38 <etharp_find_entry+0x220>
 800be06:	4b3a      	ldr	r3, [pc, #232]	; (800bef0 <etharp_find_entry+0x2d8>)
 800be08:	f240 126d 	movw	r2, #365	; 0x16d
 800be0c:	493b      	ldr	r1, [pc, #236]	; (800befc <etharp_find_entry+0x2e4>)
 800be0e:	483a      	ldr	r0, [pc, #232]	; (800bef8 <etharp_find_entry+0x2e0>)
 800be10:	f002 f9ee 	bl	800e1f0 <iprintf>
 800be14:	e010      	b.n	800be38 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800be16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800be1a:	2b09      	cmp	r3, #9
 800be1c:	dc02      	bgt.n	800be24 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800be1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be20:	843b      	strh	r3, [r7, #32]
 800be22:	e009      	b.n	800be38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800be24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800be28:	2b09      	cmp	r3, #9
 800be2a:	dc02      	bgt.n	800be32 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800be2c:	8bfb      	ldrh	r3, [r7, #30]
 800be2e:	843b      	strh	r3, [r7, #32]
 800be30:	e002      	b.n	800be38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800be32:	f04f 33ff 	mov.w	r3, #4294967295
 800be36:	e054      	b.n	800bee2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800be38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be3c:	2b09      	cmp	r3, #9
 800be3e:	dd06      	ble.n	800be4e <etharp_find_entry+0x236>
 800be40:	4b2b      	ldr	r3, [pc, #172]	; (800bef0 <etharp_find_entry+0x2d8>)
 800be42:	f240 127f 	movw	r2, #383	; 0x17f
 800be46:	492e      	ldr	r1, [pc, #184]	; (800bf00 <etharp_find_entry+0x2e8>)
 800be48:	482b      	ldr	r0, [pc, #172]	; (800bef8 <etharp_find_entry+0x2e0>)
 800be4a:	f002 f9d1 	bl	800e1f0 <iprintf>
    etharp_free_entry(i);
 800be4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be52:	4618      	mov	r0, r3
 800be54:	f7ff fe06 	bl	800ba64 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800be58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be5c:	2b09      	cmp	r3, #9
 800be5e:	dd06      	ble.n	800be6e <etharp_find_entry+0x256>
 800be60:	4b23      	ldr	r3, [pc, #140]	; (800bef0 <etharp_find_entry+0x2d8>)
 800be62:	f240 1283 	movw	r2, #387	; 0x183
 800be66:	4926      	ldr	r1, [pc, #152]	; (800bf00 <etharp_find_entry+0x2e8>)
 800be68:	4823      	ldr	r0, [pc, #140]	; (800bef8 <etharp_find_entry+0x2e0>)
 800be6a:	f002 f9c1 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800be6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be72:	491e      	ldr	r1, [pc, #120]	; (800beec <etharp_find_entry+0x2d4>)
 800be74:	4613      	mov	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	4413      	add	r3, r2
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	440b      	add	r3, r1
 800be7e:	3314      	adds	r3, #20
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d006      	beq.n	800be94 <etharp_find_entry+0x27c>
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <etharp_find_entry+0x2d8>)
 800be88:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800be8c:	491d      	ldr	r1, [pc, #116]	; (800bf04 <etharp_find_entry+0x2ec>)
 800be8e:	481a      	ldr	r0, [pc, #104]	; (800bef8 <etharp_find_entry+0x2e0>)
 800be90:	f002 f9ae 	bl	800e1f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00b      	beq.n	800beb2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800be9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6819      	ldr	r1, [r3, #0]
 800bea2:	4812      	ldr	r0, [pc, #72]	; (800beec <etharp_find_entry+0x2d4>)
 800bea4:	4613      	mov	r3, r2
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	4413      	add	r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	4403      	add	r3, r0
 800beae:	3304      	adds	r3, #4
 800beb0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800beb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800beb6:	490d      	ldr	r1, [pc, #52]	; (800beec <etharp_find_entry+0x2d4>)
 800beb8:	4613      	mov	r3, r2
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	4413      	add	r3, r2
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	440b      	add	r3, r1
 800bec2:	3312      	adds	r3, #18
 800bec4:	2200      	movs	r2, #0
 800bec6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800becc:	4907      	ldr	r1, [pc, #28]	; (800beec <etharp_find_entry+0x2d4>)
 800bece:	4613      	mov	r3, r2
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	4413      	add	r3, r2
 800bed4:	00db      	lsls	r3, r3, #3
 800bed6:	440b      	add	r3, r1
 800bed8:	3308      	adds	r3, #8
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bede:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3728      	adds	r7, #40	; 0x28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	2000a4a4 	.word	0x2000a4a4
 800bef0:	08011394 	.word	0x08011394
 800bef4:	080113cc 	.word	0x080113cc
 800bef8:	0801140c 	.word	0x0801140c
 800befc:	08011434 	.word	0x08011434
 800bf00:	0801144c 	.word	0x0801144c
 800bf04:	08011460 	.word	0x08011460

0800bf08 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf1c:	2b06      	cmp	r3, #6
 800bf1e:	d006      	beq.n	800bf2e <etharp_update_arp_entry+0x26>
 800bf20:	4b48      	ldr	r3, [pc, #288]	; (800c044 <etharp_update_arp_entry+0x13c>)
 800bf22:	f240 12a9 	movw	r2, #425	; 0x1a9
 800bf26:	4948      	ldr	r1, [pc, #288]	; (800c048 <etharp_update_arp_entry+0x140>)
 800bf28:	4848      	ldr	r0, [pc, #288]	; (800c04c <etharp_update_arp_entry+0x144>)
 800bf2a:	f002 f961 	bl	800e1f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d012      	beq.n	800bf5a <etharp_update_arp_entry+0x52>
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00e      	beq.n	800bf5a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68f9      	ldr	r1, [r7, #12]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f001 f8fe 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800bf48:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d105      	bne.n	800bf5a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf56:	2be0      	cmp	r3, #224	; 0xe0
 800bf58:	d102      	bne.n	800bf60 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bf5a:	f06f 030f 	mvn.w	r3, #15
 800bf5e:	e06c      	b.n	800c03a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	4619      	mov	r1, r3
 800bf66:	68b8      	ldr	r0, [r7, #8]
 800bf68:	f7ff fe56 	bl	800bc18 <etharp_find_entry>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bf70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	da02      	bge.n	800bf7e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bf78:	8afb      	ldrh	r3, [r7, #22]
 800bf7a:	b25b      	sxtb	r3, r3
 800bf7c:	e05d      	b.n	800c03a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bf7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf82:	4933      	ldr	r1, [pc, #204]	; (800c050 <etharp_update_arp_entry+0x148>)
 800bf84:	4613      	mov	r3, r2
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	4413      	add	r3, r2
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	440b      	add	r3, r1
 800bf8e:	3314      	adds	r3, #20
 800bf90:	2202      	movs	r2, #2
 800bf92:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bf94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf98:	492d      	ldr	r1, [pc, #180]	; (800c050 <etharp_update_arp_entry+0x148>)
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	4413      	add	r3, r2
 800bfa0:	00db      	lsls	r3, r3, #3
 800bfa2:	440b      	add	r3, r1
 800bfa4:	3308      	adds	r3, #8
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bfaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4413      	add	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	4a25      	ldr	r2, [pc, #148]	; (800c050 <etharp_update_arp_entry+0x148>)
 800bfba:	4413      	add	r3, r2
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	2206      	movs	r2, #6
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f002 f9ef 	bl	800e3a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bfc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfcc:	4920      	ldr	r1, [pc, #128]	; (800c050 <etharp_update_arp_entry+0x148>)
 800bfce:	4613      	mov	r3, r2
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	4413      	add	r3, r2
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	440b      	add	r3, r1
 800bfd8:	3312      	adds	r3, #18
 800bfda:	2200      	movs	r2, #0
 800bfdc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bfde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfe2:	491b      	ldr	r1, [pc, #108]	; (800c050 <etharp_update_arp_entry+0x148>)
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	4413      	add	r3, r2
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	440b      	add	r3, r1
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d021      	beq.n	800c038 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bff8:	4915      	ldr	r1, [pc, #84]	; (800c050 <etharp_update_arp_entry+0x148>)
 800bffa:	4613      	mov	r3, r2
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	4413      	add	r3, r2
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	440b      	add	r3, r1
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c008:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c00c:	4910      	ldr	r1, [pc, #64]	; (800c050 <etharp_update_arp_entry+0x148>)
 800c00e:	4613      	mov	r3, r2
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	4413      	add	r3, r2
 800c014:	00db      	lsls	r3, r3, #3
 800c016:	440b      	add	r3, r1
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6939      	ldr	r1, [r7, #16]
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f001 ff97 	bl	800df60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c032:	6938      	ldr	r0, [r7, #16]
 800c034:	f7f9 f9f4 	bl	8005420 <pbuf_free>
  }
  return ERR_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	08011394 	.word	0x08011394
 800c048:	0801148c 	.word	0x0801148c
 800c04c:	0801140c 	.word	0x0801140c
 800c050:	2000a4a4 	.word	0x2000a4a4

0800c054 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	e01e      	b.n	800c0a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c062:	4913      	ldr	r1, [pc, #76]	; (800c0b0 <etharp_cleanup_netif+0x5c>)
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	4613      	mov	r3, r2
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	4413      	add	r3, r2
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	440b      	add	r3, r1
 800c070:	3314      	adds	r3, #20
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c076:	7afb      	ldrb	r3, [r7, #11]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00e      	beq.n	800c09a <etharp_cleanup_netif+0x46>
 800c07c:	490c      	ldr	r1, [pc, #48]	; (800c0b0 <etharp_cleanup_netif+0x5c>)
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4613      	mov	r3, r2
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	4413      	add	r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	440b      	add	r3, r1
 800c08a:	3308      	adds	r3, #8
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	429a      	cmp	r2, r3
 800c092:	d102      	bne.n	800c09a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7ff fce5 	bl	800ba64 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	3301      	adds	r3, #1
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2b09      	cmp	r3, #9
 800c0a4:	dddd      	ble.n	800c062 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c0a6:	bf00      	nop
 800c0a8:	bf00      	nop
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	2000a4a4 	.word	0x2000a4a4

0800c0b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c0b4:	b5b0      	push	{r4, r5, r7, lr}
 800c0b6:	b08a      	sub	sp, #40	; 0x28
 800c0b8:	af04      	add	r7, sp, #16
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d107      	bne.n	800c0d4 <etharp_input+0x20>
 800c0c4:	4b3d      	ldr	r3, [pc, #244]	; (800c1bc <etharp_input+0x108>)
 800c0c6:	f240 228a 	movw	r2, #650	; 0x28a
 800c0ca:	493d      	ldr	r1, [pc, #244]	; (800c1c0 <etharp_input+0x10c>)
 800c0cc:	483d      	ldr	r0, [pc, #244]	; (800c1c4 <etharp_input+0x110>)
 800c0ce:	f002 f88f 	bl	800e1f0 <iprintf>
 800c0d2:	e06f      	b.n	800c1b4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e4:	d10c      	bne.n	800c100 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c0ea:	2b06      	cmp	r3, #6
 800c0ec:	d108      	bne.n	800c100 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c0f2:	2b04      	cmp	r3, #4
 800c0f4:	d104      	bne.n	800c100 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c0fc:	2b08      	cmp	r3, #8
 800c0fe:	d003      	beq.n	800c108 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7f9 f98d 	bl	8005420 <pbuf_free>
    return;
 800c106:	e055      	b.n	800c1b4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	330e      	adds	r3, #14
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	3318      	adds	r3, #24
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	3304      	adds	r3, #4
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d102      	bne.n	800c128 <etharp_input+0x74>
    for_us = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	75fb      	strb	r3, [r7, #23]
 800c126:	e009      	b.n	800c13c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	3304      	adds	r3, #4
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	bf0c      	ite	eq
 800c134:	2301      	moveq	r3, #1
 800c136:	2300      	movne	r3, #0
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f103 0208 	add.w	r2, r3, #8
 800c142:	7dfb      	ldrb	r3, [r7, #23]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d001      	beq.n	800c14c <etharp_input+0x98>
 800c148:	2301      	movs	r3, #1
 800c14a:	e000      	b.n	800c14e <etharp_input+0x9a>
 800c14c:	2302      	movs	r3, #2
 800c14e:	f107 010c 	add.w	r1, r7, #12
 800c152:	6838      	ldr	r0, [r7, #0]
 800c154:	f7ff fed8 	bl	800bf08 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	88db      	ldrh	r3, [r3, #6]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c162:	d003      	beq.n	800c16c <etharp_input+0xb8>
 800c164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c168:	d01e      	beq.n	800c1a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c16a:	e020      	b.n	800c1ae <etharp_input+0xfa>
      if (for_us) {
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d01c      	beq.n	800c1ac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c18c:	2102      	movs	r1, #2
 800c18e:	9103      	str	r1, [sp, #12]
 800c190:	f107 010c 	add.w	r1, r7, #12
 800c194:	9102      	str	r1, [sp, #8]
 800c196:	9201      	str	r2, [sp, #4]
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	462b      	mov	r3, r5
 800c19c:	4622      	mov	r2, r4
 800c19e:	4601      	mov	r1, r0
 800c1a0:	6838      	ldr	r0, [r7, #0]
 800c1a2:	f000 faeb 	bl	800c77c <etharp_raw>
      break;
 800c1a6:	e001      	b.n	800c1ac <etharp_input+0xf8>
      break;
 800c1a8:	bf00      	nop
 800c1aa:	e000      	b.n	800c1ae <etharp_input+0xfa>
      break;
 800c1ac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7f9 f936 	bl	8005420 <pbuf_free>
}
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bdb0      	pop	{r4, r5, r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	08011394 	.word	0x08011394
 800c1c0:	080114e4 	.word	0x080114e4
 800c1c4:	0801140c 	.word	0x0801140c

0800c1c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af02      	add	r7, sp, #8
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c1d6:	79fa      	ldrb	r2, [r7, #7]
 800c1d8:	4944      	ldr	r1, [pc, #272]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c1da:	4613      	mov	r3, r2
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	440b      	add	r3, r1
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d806      	bhi.n	800c1fa <etharp_output_to_arp_index+0x32>
 800c1ec:	4b40      	ldr	r3, [pc, #256]	; (800c2f0 <etharp_output_to_arp_index+0x128>)
 800c1ee:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c1f2:	4940      	ldr	r1, [pc, #256]	; (800c2f4 <etharp_output_to_arp_index+0x12c>)
 800c1f4:	4840      	ldr	r0, [pc, #256]	; (800c2f8 <etharp_output_to_arp_index+0x130>)
 800c1f6:	f001 fffb 	bl	800e1f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c1fa:	79fa      	ldrb	r2, [r7, #7]
 800c1fc:	493b      	ldr	r1, [pc, #236]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c1fe:	4613      	mov	r3, r2
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	4413      	add	r3, r2
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	440b      	add	r3, r1
 800c208:	3314      	adds	r3, #20
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d153      	bne.n	800c2b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c210:	79fa      	ldrb	r2, [r7, #7]
 800c212:	4936      	ldr	r1, [pc, #216]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c214:	4613      	mov	r3, r2
 800c216:	005b      	lsls	r3, r3, #1
 800c218:	4413      	add	r3, r2
 800c21a:	00db      	lsls	r3, r3, #3
 800c21c:	440b      	add	r3, r1
 800c21e:	3312      	adds	r3, #18
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c226:	d919      	bls.n	800c25c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c228:	79fa      	ldrb	r2, [r7, #7]
 800c22a:	4613      	mov	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	4413      	add	r3, r2
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	4a2e      	ldr	r2, [pc, #184]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c234:	4413      	add	r3, r2
 800c236:	3304      	adds	r3, #4
 800c238:	4619      	mov	r1, r3
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 fb4c 	bl	800c8d8 <etharp_request>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d138      	bne.n	800c2b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c246:	79fa      	ldrb	r2, [r7, #7]
 800c248:	4928      	ldr	r1, [pc, #160]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c24a:	4613      	mov	r3, r2
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4413      	add	r3, r2
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	440b      	add	r3, r1
 800c254:	3314      	adds	r3, #20
 800c256:	2203      	movs	r2, #3
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	e02d      	b.n	800c2b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c25c:	79fa      	ldrb	r2, [r7, #7]
 800c25e:	4923      	ldr	r1, [pc, #140]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c260:	4613      	mov	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	440b      	add	r3, r1
 800c26a:	3312      	adds	r3, #18
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c272:	d321      	bcc.n	800c2b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c274:	79fa      	ldrb	r2, [r7, #7]
 800c276:	4613      	mov	r3, r2
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	4413      	add	r3, r2
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	4a1b      	ldr	r2, [pc, #108]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c280:	4413      	add	r3, r2
 800c282:	1d19      	adds	r1, r3, #4
 800c284:	79fa      	ldrb	r2, [r7, #7]
 800c286:	4613      	mov	r3, r2
 800c288:	005b      	lsls	r3, r3, #1
 800c28a:	4413      	add	r3, r2
 800c28c:	00db      	lsls	r3, r3, #3
 800c28e:	3308      	adds	r3, #8
 800c290:	4a16      	ldr	r2, [pc, #88]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c292:	4413      	add	r3, r2
 800c294:	3304      	adds	r3, #4
 800c296:	461a      	mov	r2, r3
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f000 fafb 	bl	800c894 <etharp_request_dst>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d109      	bne.n	800c2b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c2a4:	79fa      	ldrb	r2, [r7, #7]
 800c2a6:	4911      	ldr	r1, [pc, #68]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	4413      	add	r3, r2
 800c2ae:	00db      	lsls	r3, r3, #3
 800c2b0:	440b      	add	r3, r1
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c2be:	79fa      	ldrb	r2, [r7, #7]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	005b      	lsls	r3, r3, #1
 800c2c4:	4413      	add	r3, r2
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	3308      	adds	r3, #8
 800c2ca:	4a08      	ldr	r2, [pc, #32]	; (800c2ec <etharp_output_to_arp_index+0x124>)
 800c2cc:	4413      	add	r3, r2
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2d4:	9200      	str	r2, [sp, #0]
 800c2d6:	460a      	mov	r2, r1
 800c2d8:	68b9      	ldr	r1, [r7, #8]
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f001 fe40 	bl	800df60 <ethernet_output>
 800c2e0:	4603      	mov	r3, r0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2000a4a4 	.word	0x2000a4a4
 800c2f0:	08011394 	.word	0x08011394
 800c2f4:	08011504 	.word	0x08011504
 800c2f8:	0801140c 	.word	0x0801140c

0800c2fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08a      	sub	sp, #40	; 0x28
 800c300:	af02      	add	r7, sp, #8
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d106      	bne.n	800c320 <etharp_output+0x24>
 800c312:	4b73      	ldr	r3, [pc, #460]	; (800c4e0 <etharp_output+0x1e4>)
 800c314:	f240 321e 	movw	r2, #798	; 0x31e
 800c318:	4972      	ldr	r1, [pc, #456]	; (800c4e4 <etharp_output+0x1e8>)
 800c31a:	4873      	ldr	r0, [pc, #460]	; (800c4e8 <etharp_output+0x1ec>)
 800c31c:	f001 ff68 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d106      	bne.n	800c334 <etharp_output+0x38>
 800c326:	4b6e      	ldr	r3, [pc, #440]	; (800c4e0 <etharp_output+0x1e4>)
 800c328:	f240 321f 	movw	r2, #799	; 0x31f
 800c32c:	496f      	ldr	r1, [pc, #444]	; (800c4ec <etharp_output+0x1f0>)
 800c32e:	486e      	ldr	r0, [pc, #440]	; (800c4e8 <etharp_output+0x1ec>)
 800c330:	f001 ff5e 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <etharp_output+0x4c>
 800c33a:	4b69      	ldr	r3, [pc, #420]	; (800c4e0 <etharp_output+0x1e4>)
 800c33c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c340:	496b      	ldr	r1, [pc, #428]	; (800c4f0 <etharp_output+0x1f4>)
 800c342:	4869      	ldr	r0, [pc, #420]	; (800c4e8 <etharp_output+0x1ec>)
 800c344:	f001 ff54 	bl	800e1f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68f9      	ldr	r1, [r7, #12]
 800c34e:	4618      	mov	r0, r3
 800c350:	f000 fef8 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c35a:	4b66      	ldr	r3, [pc, #408]	; (800c4f4 <etharp_output+0x1f8>)
 800c35c:	61fb      	str	r3, [r7, #28]
 800c35e:	e0af      	b.n	800c4c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c368:	2be0      	cmp	r3, #224	; 0xe0
 800c36a:	d118      	bne.n	800c39e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c36c:	2301      	movs	r3, #1
 800c36e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c370:	2300      	movs	r3, #0
 800c372:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c374:	235e      	movs	r3, #94	; 0x5e
 800c376:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3301      	adds	r3, #1
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c382:	b2db      	uxtb	r3, r3
 800c384:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3302      	adds	r3, #2
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3303      	adds	r3, #3
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c396:	f107 0310 	add.w	r3, r7, #16
 800c39a:	61fb      	str	r3, [r7, #28]
 800c39c:	e090      	b.n	800c4c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	405a      	eors	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d012      	beq.n	800c3dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c3bc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d00b      	beq.n	800c3dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	330c      	adds	r3, #12
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	330c      	adds	r3, #12
 800c3d2:	61bb      	str	r3, [r7, #24]
 800c3d4:	e002      	b.n	800c3dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c3d6:	f06f 0303 	mvn.w	r3, #3
 800c3da:	e07d      	b.n	800c4d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c3dc:	4b46      	ldr	r3, [pc, #280]	; (800c4f8 <etharp_output+0x1fc>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4a46      	ldr	r2, [pc, #280]	; (800c4fc <etharp_output+0x200>)
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	440b      	add	r3, r1
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3314      	adds	r3, #20
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d925      	bls.n	800c442 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c3f6:	4b40      	ldr	r3, [pc, #256]	; (800c4f8 <etharp_output+0x1fc>)
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4a3f      	ldr	r2, [pc, #252]	; (800c4fc <etharp_output+0x200>)
 800c3fe:	460b      	mov	r3, r1
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	440b      	add	r3, r1
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	4413      	add	r3, r2
 800c408:	3308      	adds	r3, #8
 800c40a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d117      	bne.n	800c442 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	4b38      	ldr	r3, [pc, #224]	; (800c4f8 <etharp_output+0x1fc>)
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	4618      	mov	r0, r3
 800c41c:	4937      	ldr	r1, [pc, #220]	; (800c4fc <etharp_output+0x200>)
 800c41e:	4603      	mov	r3, r0
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	4403      	add	r3, r0
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	440b      	add	r3, r1
 800c428:	3304      	adds	r3, #4
 800c42a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d108      	bne.n	800c442 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c430:	4b31      	ldr	r3, [pc, #196]	; (800c4f8 <etharp_output+0x1fc>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	461a      	mov	r2, r3
 800c436:	68b9      	ldr	r1, [r7, #8]
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f7ff fec5 	bl	800c1c8 <etharp_output_to_arp_index>
 800c43e:	4603      	mov	r3, r0
 800c440:	e04a      	b.n	800c4d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c442:	2300      	movs	r3, #0
 800c444:	75fb      	strb	r3, [r7, #23]
 800c446:	e031      	b.n	800c4ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c448:	7dfa      	ldrb	r2, [r7, #23]
 800c44a:	492c      	ldr	r1, [pc, #176]	; (800c4fc <etharp_output+0x200>)
 800c44c:	4613      	mov	r3, r2
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	4413      	add	r3, r2
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	440b      	add	r3, r1
 800c456:	3314      	adds	r3, #20
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d923      	bls.n	800c4a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c45e:	7dfa      	ldrb	r2, [r7, #23]
 800c460:	4926      	ldr	r1, [pc, #152]	; (800c4fc <etharp_output+0x200>)
 800c462:	4613      	mov	r3, r2
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	4413      	add	r3, r2
 800c468:	00db      	lsls	r3, r3, #3
 800c46a:	440b      	add	r3, r1
 800c46c:	3308      	adds	r3, #8
 800c46e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	429a      	cmp	r2, r3
 800c474:	d117      	bne.n	800c4a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	6819      	ldr	r1, [r3, #0]
 800c47a:	7dfa      	ldrb	r2, [r7, #23]
 800c47c:	481f      	ldr	r0, [pc, #124]	; (800c4fc <etharp_output+0x200>)
 800c47e:	4613      	mov	r3, r2
 800c480:	005b      	lsls	r3, r3, #1
 800c482:	4413      	add	r3, r2
 800c484:	00db      	lsls	r3, r3, #3
 800c486:	4403      	add	r3, r0
 800c488:	3304      	adds	r3, #4
 800c48a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c48c:	4299      	cmp	r1, r3
 800c48e:	d10a      	bne.n	800c4a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c490:	4a19      	ldr	r2, [pc, #100]	; (800c4f8 <etharp_output+0x1fc>)
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c496:	7dfb      	ldrb	r3, [r7, #23]
 800c498:	461a      	mov	r2, r3
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff fe93 	bl	800c1c8 <etharp_output_to_arp_index>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	e018      	b.n	800c4d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	75fb      	strb	r3, [r7, #23]
 800c4ac:	7dfb      	ldrb	r3, [r7, #23]
 800c4ae:	2b09      	cmp	r3, #9
 800c4b0:	d9ca      	bls.n	800c448 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	69b9      	ldr	r1, [r7, #24]
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 f822 	bl	800c500 <etharp_query>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	e00b      	b.n	800c4d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c4c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f001 fd45 	bl	800df60 <ethernet_output>
 800c4d6:	4603      	mov	r3, r0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3720      	adds	r7, #32
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	08011394 	.word	0x08011394
 800c4e4:	080114e4 	.word	0x080114e4
 800c4e8:	0801140c 	.word	0x0801140c
 800c4ec:	08011534 	.word	0x08011534
 800c4f0:	080114d4 	.word	0x080114d4
 800c4f4:	08011b48 	.word	0x08011b48
 800c4f8:	2000a594 	.word	0x2000a594
 800c4fc:	2000a4a4 	.word	0x2000a4a4

0800c500 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08c      	sub	sp, #48	; 0x30
 800c504:	af02      	add	r7, sp, #8
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	3326      	adds	r3, #38	; 0x26
 800c510:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c512:	23ff      	movs	r3, #255	; 0xff
 800c514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68f9      	ldr	r1, [r7, #12]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fe0e 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10c      	bne.n	800c548 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c536:	2be0      	cmp	r3, #224	; 0xe0
 800c538:	d006      	beq.n	800c548 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d102      	bne.n	800c54e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c548:	f06f 030f 	mvn.w	r3, #15
 800c54c:	e101      	b.n	800c752 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	2101      	movs	r1, #1
 800c552:	68b8      	ldr	r0, [r7, #8]
 800c554:	f7ff fb60 	bl	800bc18 <etharp_find_entry>
 800c558:	4603      	mov	r3, r0
 800c55a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c55c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c560:	2b00      	cmp	r3, #0
 800c562:	da02      	bge.n	800c56a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c564:	8a7b      	ldrh	r3, [r7, #18]
 800c566:	b25b      	sxtb	r3, r3
 800c568:	e0f3      	b.n	800c752 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c56a:	8a7b      	ldrh	r3, [r7, #18]
 800c56c:	2b7e      	cmp	r3, #126	; 0x7e
 800c56e:	d906      	bls.n	800c57e <etharp_query+0x7e>
 800c570:	4b7a      	ldr	r3, [pc, #488]	; (800c75c <etharp_query+0x25c>)
 800c572:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c576:	497a      	ldr	r1, [pc, #488]	; (800c760 <etharp_query+0x260>)
 800c578:	487a      	ldr	r0, [pc, #488]	; (800c764 <etharp_query+0x264>)
 800c57a:	f001 fe39 	bl	800e1f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c57e:	8a7b      	ldrh	r3, [r7, #18]
 800c580:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c582:	7c7a      	ldrb	r2, [r7, #17]
 800c584:	4978      	ldr	r1, [pc, #480]	; (800c768 <etharp_query+0x268>)
 800c586:	4613      	mov	r3, r2
 800c588:	005b      	lsls	r3, r3, #1
 800c58a:	4413      	add	r3, r2
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	440b      	add	r3, r1
 800c590:	3314      	adds	r3, #20
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d115      	bne.n	800c5c4 <etharp_query+0xc4>
    is_new_entry = 1;
 800c598:	2301      	movs	r3, #1
 800c59a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c59c:	7c7a      	ldrb	r2, [r7, #17]
 800c59e:	4972      	ldr	r1, [pc, #456]	; (800c768 <etharp_query+0x268>)
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	4413      	add	r3, r2
 800c5a6:	00db      	lsls	r3, r3, #3
 800c5a8:	440b      	add	r3, r1
 800c5aa:	3314      	adds	r3, #20
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c5b0:	7c7a      	ldrb	r2, [r7, #17]
 800c5b2:	496d      	ldr	r1, [pc, #436]	; (800c768 <etharp_query+0x268>)
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	4413      	add	r3, r2
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	440b      	add	r3, r1
 800c5be:	3308      	adds	r3, #8
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c5c4:	7c7a      	ldrb	r2, [r7, #17]
 800c5c6:	4968      	ldr	r1, [pc, #416]	; (800c768 <etharp_query+0x268>)
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	4413      	add	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	440b      	add	r3, r1
 800c5d2:	3314      	adds	r3, #20
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d011      	beq.n	800c5fe <etharp_query+0xfe>
 800c5da:	7c7a      	ldrb	r2, [r7, #17]
 800c5dc:	4962      	ldr	r1, [pc, #392]	; (800c768 <etharp_query+0x268>)
 800c5de:	4613      	mov	r3, r2
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	4413      	add	r3, r2
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	440b      	add	r3, r1
 800c5e8:	3314      	adds	r3, #20
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d806      	bhi.n	800c5fe <etharp_query+0xfe>
 800c5f0:	4b5a      	ldr	r3, [pc, #360]	; (800c75c <etharp_query+0x25c>)
 800c5f2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c5f6:	495d      	ldr	r1, [pc, #372]	; (800c76c <etharp_query+0x26c>)
 800c5f8:	485a      	ldr	r0, [pc, #360]	; (800c764 <etharp_query+0x264>)
 800c5fa:	f001 fdf9 	bl	800e1f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d102      	bne.n	800c60a <etharp_query+0x10a>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10c      	bne.n	800c624 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c60a:	68b9      	ldr	r1, [r7, #8]
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f000 f963 	bl	800c8d8 <etharp_request>
 800c612:	4603      	mov	r3, r0
 800c614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <etharp_query+0x124>
      return result;
 800c61e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c622:	e096      	b.n	800c752 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d106      	bne.n	800c638 <etharp_query+0x138>
 800c62a:	4b4c      	ldr	r3, [pc, #304]	; (800c75c <etharp_query+0x25c>)
 800c62c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c630:	494f      	ldr	r1, [pc, #316]	; (800c770 <etharp_query+0x270>)
 800c632:	484c      	ldr	r0, [pc, #304]	; (800c764 <etharp_query+0x264>)
 800c634:	f001 fddc 	bl	800e1f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c638:	7c7a      	ldrb	r2, [r7, #17]
 800c63a:	494b      	ldr	r1, [pc, #300]	; (800c768 <etharp_query+0x268>)
 800c63c:	4613      	mov	r3, r2
 800c63e:	005b      	lsls	r3, r3, #1
 800c640:	4413      	add	r3, r2
 800c642:	00db      	lsls	r3, r3, #3
 800c644:	440b      	add	r3, r1
 800c646:	3314      	adds	r3, #20
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d917      	bls.n	800c67e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c64e:	4a49      	ldr	r2, [pc, #292]	; (800c774 <etharp_query+0x274>)
 800c650:	7c7b      	ldrb	r3, [r7, #17]
 800c652:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c654:	7c7a      	ldrb	r2, [r7, #17]
 800c656:	4613      	mov	r3, r2
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	4413      	add	r3, r2
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	3308      	adds	r3, #8
 800c660:	4a41      	ldr	r2, [pc, #260]	; (800c768 <etharp_query+0x268>)
 800c662:	4413      	add	r3, r2
 800c664:	3304      	adds	r3, #4
 800c666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c66a:	9200      	str	r2, [sp, #0]
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f001 fc75 	bl	800df60 <ethernet_output>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c67c:	e067      	b.n	800c74e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c67e:	7c7a      	ldrb	r2, [r7, #17]
 800c680:	4939      	ldr	r1, [pc, #228]	; (800c768 <etharp_query+0x268>)
 800c682:	4613      	mov	r3, r2
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	4413      	add	r3, r2
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	440b      	add	r3, r1
 800c68c:	3314      	adds	r3, #20
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d15c      	bne.n	800c74e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c69c:	e01c      	b.n	800c6d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	895a      	ldrh	r2, [r3, #10]
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	891b      	ldrh	r3, [r3, #8]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d10a      	bne.n	800c6c0 <etharp_query+0x1c0>
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d006      	beq.n	800c6c0 <etharp_query+0x1c0>
 800c6b2:	4b2a      	ldr	r3, [pc, #168]	; (800c75c <etharp_query+0x25c>)
 800c6b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c6b8:	492f      	ldr	r1, [pc, #188]	; (800c778 <etharp_query+0x278>)
 800c6ba:	482a      	ldr	r0, [pc, #168]	; (800c764 <etharp_query+0x264>)
 800c6bc:	f001 fd98 	bl	800e1f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	7b1b      	ldrb	r3, [r3, #12]
 800c6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <etharp_query+0x1d2>
        copy_needed = 1;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	61bb      	str	r3, [r7, #24]
        break;
 800c6d0:	e005      	b.n	800c6de <etharp_query+0x1de>
      }
      p = p->next;
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1df      	bne.n	800c69e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d007      	beq.n	800c6f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c6ea:	200e      	movs	r0, #14
 800c6ec:	f7f9 f996 	bl	8005a1c <pbuf_clone>
 800c6f0:	61f8      	str	r0, [r7, #28]
 800c6f2:	e004      	b.n	800c6fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c6f8:	69f8      	ldr	r0, [r7, #28]
 800c6fa:	f7f8 ff31 	bl	8005560 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d021      	beq.n	800c748 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c704:	7c7a      	ldrb	r2, [r7, #17]
 800c706:	4918      	ldr	r1, [pc, #96]	; (800c768 <etharp_query+0x268>)
 800c708:	4613      	mov	r3, r2
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	4413      	add	r3, r2
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	440b      	add	r3, r1
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00a      	beq.n	800c72e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c718:	7c7a      	ldrb	r2, [r7, #17]
 800c71a:	4913      	ldr	r1, [pc, #76]	; (800c768 <etharp_query+0x268>)
 800c71c:	4613      	mov	r3, r2
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	4413      	add	r3, r2
 800c722:	00db      	lsls	r3, r3, #3
 800c724:	440b      	add	r3, r1
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4618      	mov	r0, r3
 800c72a:	f7f8 fe79 	bl	8005420 <pbuf_free>
      }
      arp_table[i].q = p;
 800c72e:	7c7a      	ldrb	r2, [r7, #17]
 800c730:	490d      	ldr	r1, [pc, #52]	; (800c768 <etharp_query+0x268>)
 800c732:	4613      	mov	r3, r2
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	4413      	add	r3, r2
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	440b      	add	r3, r1
 800c73c:	69fa      	ldr	r2, [r7, #28]
 800c73e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c746:	e002      	b.n	800c74e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c748:	23ff      	movs	r3, #255	; 0xff
 800c74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c74e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c752:	4618      	mov	r0, r3
 800c754:	3728      	adds	r7, #40	; 0x28
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	08011394 	.word	0x08011394
 800c760:	08011540 	.word	0x08011540
 800c764:	0801140c 	.word	0x0801140c
 800c768:	2000a4a4 	.word	0x2000a4a4
 800c76c:	08011550 	.word	0x08011550
 800c770:	08011534 	.word	0x08011534
 800c774:	2000a594 	.word	0x2000a594
 800c778:	08011578 	.word	0x08011578

0800c77c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08a      	sub	sp, #40	; 0x28
 800c780:	af02      	add	r7, sp, #8
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d106      	bne.n	800c7a2 <etharp_raw+0x26>
 800c794:	4b3a      	ldr	r3, [pc, #232]	; (800c880 <etharp_raw+0x104>)
 800c796:	f240 4257 	movw	r2, #1111	; 0x457
 800c79a:	493a      	ldr	r1, [pc, #232]	; (800c884 <etharp_raw+0x108>)
 800c79c:	483a      	ldr	r0, [pc, #232]	; (800c888 <etharp_raw+0x10c>)
 800c79e:	f001 fd27 	bl	800e1f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c7a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c7a6:	211c      	movs	r1, #28
 800c7a8:	200e      	movs	r0, #14
 800c7aa:	f7f8 fb55 	bl	8004e58 <pbuf_alloc>
 800c7ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d102      	bne.n	800c7bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	e05d      	b.n	800c878 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	895b      	ldrh	r3, [r3, #10]
 800c7c0:	2b1b      	cmp	r3, #27
 800c7c2:	d806      	bhi.n	800c7d2 <etharp_raw+0x56>
 800c7c4:	4b2e      	ldr	r3, [pc, #184]	; (800c880 <etharp_raw+0x104>)
 800c7c6:	f240 4262 	movw	r2, #1122	; 0x462
 800c7ca:	4930      	ldr	r1, [pc, #192]	; (800c88c <etharp_raw+0x110>)
 800c7cc:	482e      	ldr	r0, [pc, #184]	; (800c888 <etharp_raw+0x10c>)
 800c7ce:	f001 fd0f 	bl	800e1f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c7d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f7 fac2 	bl	8003d64 <lwip_htons>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7ee:	2b06      	cmp	r3, #6
 800c7f0:	d006      	beq.n	800c800 <etharp_raw+0x84>
 800c7f2:	4b23      	ldr	r3, [pc, #140]	; (800c880 <etharp_raw+0x104>)
 800c7f4:	f240 4269 	movw	r2, #1129	; 0x469
 800c7f8:	4925      	ldr	r1, [pc, #148]	; (800c890 <etharp_raw+0x114>)
 800c7fa:	4823      	ldr	r0, [pc, #140]	; (800c888 <etharp_raw+0x10c>)
 800c7fc:	f001 fcf8 	bl	800e1f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	3308      	adds	r3, #8
 800c804:	2206      	movs	r2, #6
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	4618      	mov	r0, r3
 800c80a:	f001 fdcc 	bl	800e3a6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	3312      	adds	r3, #18
 800c812:	2206      	movs	r2, #6
 800c814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c816:	4618      	mov	r0, r3
 800c818:	f001 fdc5 	bl	800e3a6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	330e      	adds	r3, #14
 800c820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c822:	6812      	ldr	r2, [r2, #0]
 800c824:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	3318      	adds	r3, #24
 800c82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c82c:	6812      	ldr	r2, [r2, #0]
 800c82e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	2200      	movs	r2, #0
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	2200      	movs	r2, #0
 800c838:	f042 0201 	orr.w	r2, r2, #1
 800c83c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	2200      	movs	r2, #0
 800c842:	f042 0208 	orr.w	r2, r2, #8
 800c846:	709a      	strb	r2, [r3, #2]
 800c848:	2200      	movs	r2, #0
 800c84a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	2206      	movs	r2, #6
 800c850:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2204      	movs	r2, #4
 800c856:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c858:	f640 0306 	movw	r3, #2054	; 0x806
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	69b9      	ldr	r1, [r7, #24]
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f001 fb7b 	bl	800df60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c86a:	69b8      	ldr	r0, [r7, #24]
 800c86c:	f7f8 fdd8 	bl	8005420 <pbuf_free>
  p = NULL;
 800c870:	2300      	movs	r3, #0
 800c872:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c874:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3720      	adds	r7, #32
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08011394 	.word	0x08011394
 800c884:	080114e4 	.word	0x080114e4
 800c888:	0801140c 	.word	0x0801140c
 800c88c:	08011594 	.word	0x08011594
 800c890:	080115c8 	.word	0x080115c8

0800c894 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af04      	add	r7, sp, #16
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	9203      	str	r2, [sp, #12]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	9202      	str	r2, [sp, #8]
 800c8b8:	4a06      	ldr	r2, [pc, #24]	; (800c8d4 <etharp_request_dst+0x40>)
 800c8ba:	9201      	str	r2, [sp, #4]
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	4603      	mov	r3, r0
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f7ff ff5a 	bl	800c77c <etharp_raw>
 800c8c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	08011b50 	.word	0x08011b50

0800c8d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c8e2:	4a05      	ldr	r2, [pc, #20]	; (800c8f8 <etharp_request+0x20>)
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff ffd4 	bl	800c894 <etharp_request_dst>
 800c8ec:	4603      	mov	r3, r0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	08011b48 	.word	0x08011b48

0800c8fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08e      	sub	sp, #56	; 0x38
 800c900:	af04      	add	r7, sp, #16
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c906:	4b79      	ldr	r3, [pc, #484]	; (800caec <icmp_input+0x1f0>)
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	f003 030f 	and.w	r3, r3, #15
 800c914:	b2db      	uxtb	r3, r3
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c91c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c91e:	2b13      	cmp	r3, #19
 800c920:	f240 80cd 	bls.w	800cabe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	895b      	ldrh	r3, [r3, #10]
 800c928:	2b03      	cmp	r3, #3
 800c92a:	f240 80ca 	bls.w	800cac2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c938:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 80b7 	beq.w	800cab0 <icmp_input+0x1b4>
 800c942:	2b08      	cmp	r3, #8
 800c944:	f040 80b7 	bne.w	800cab6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c948:	4b69      	ldr	r3, [pc, #420]	; (800caf0 <icmp_input+0x1f4>)
 800c94a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c94c:	4b67      	ldr	r3, [pc, #412]	; (800caec <icmp_input+0x1f0>)
 800c94e:	695b      	ldr	r3, [r3, #20]
 800c950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c954:	2be0      	cmp	r3, #224	; 0xe0
 800c956:	f000 80bb 	beq.w	800cad0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c95a:	4b64      	ldr	r3, [pc, #400]	; (800caec <icmp_input+0x1f0>)
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	4a63      	ldr	r2, [pc, #396]	; (800caec <icmp_input+0x1f0>)
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fbed 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f040 80b1 	bne.w	800cad4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	891b      	ldrh	r3, [r3, #8]
 800c976:	2b07      	cmp	r3, #7
 800c978:	f240 80a5 	bls.w	800cac6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c97c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c97e:	330e      	adds	r3, #14
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7f8 fcb6 	bl	80052f4 <pbuf_add_header>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d04b      	beq.n	800ca26 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	891a      	ldrh	r2, [r3, #8]
 800c992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c994:	4413      	add	r3, r2
 800c996:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	891b      	ldrh	r3, [r3, #8]
 800c99c:	8b7a      	ldrh	r2, [r7, #26]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	f0c0 809a 	bcc.w	800cad8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c9a4:	8b7b      	ldrh	r3, [r7, #26]
 800c9a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	200e      	movs	r0, #14
 800c9ae:	f7f8 fa53 	bl	8004e58 <pbuf_alloc>
 800c9b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 8090 	beq.w	800cadc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	895b      	ldrh	r3, [r3, #10]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d203      	bcs.n	800c9d2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c9ca:	6978      	ldr	r0, [r7, #20]
 800c9cc:	f7f8 fd28 	bl	8005420 <pbuf_free>
          goto icmperr;
 800c9d0:	e085      	b.n	800cade <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c9d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f001 fce3 	bl	800e3a6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c9e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6978      	ldr	r0, [r7, #20]
 800c9e6:	f7f8 fc95 	bl	8005314 <pbuf_remove_header>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d009      	beq.n	800ca04 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c9f0:	4b40      	ldr	r3, [pc, #256]	; (800caf4 <icmp_input+0x1f8>)
 800c9f2:	22b6      	movs	r2, #182	; 0xb6
 800c9f4:	4940      	ldr	r1, [pc, #256]	; (800caf8 <icmp_input+0x1fc>)
 800c9f6:	4841      	ldr	r0, [pc, #260]	; (800cafc <icmp_input+0x200>)
 800c9f8:	f001 fbfa 	bl	800e1f0 <iprintf>
          pbuf_free(r);
 800c9fc:	6978      	ldr	r0, [r7, #20]
 800c9fe:	f7f8 fd0f 	bl	8005420 <pbuf_free>
          goto icmperr;
 800ca02:	e06c      	b.n	800cade <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	6978      	ldr	r0, [r7, #20]
 800ca08:	f7f8 fe32 	bl	8005670 <pbuf_copy>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d003      	beq.n	800ca1a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ca12:	6978      	ldr	r0, [r7, #20]
 800ca14:	f7f8 fd04 	bl	8005420 <pbuf_free>
          goto icmperr;
 800ca18:	e061      	b.n	800cade <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7f8 fd00 	bl	8005420 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	607b      	str	r3, [r7, #4]
 800ca24:	e00f      	b.n	800ca46 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ca26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca28:	330e      	adds	r3, #14
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7f8 fc71 	bl	8005314 <pbuf_remove_header>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d006      	beq.n	800ca46 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ca38:	4b2e      	ldr	r3, [pc, #184]	; (800caf4 <icmp_input+0x1f8>)
 800ca3a:	22c7      	movs	r2, #199	; 0xc7
 800ca3c:	4930      	ldr	r1, [pc, #192]	; (800cb00 <icmp_input+0x204>)
 800ca3e:	482f      	ldr	r0, [pc, #188]	; (800cafc <icmp_input+0x200>)
 800ca40:	f001 fbd6 	bl	800e1f0 <iprintf>
          goto icmperr;
 800ca44:	e04b      	b.n	800cade <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ca4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7f8 fc4f 	bl	80052f4 <pbuf_add_header>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d12b      	bne.n	800cab4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ca6a:	4b20      	ldr	r3, [pc, #128]	; (800caec <icmp_input+0x1f0>)
 800ca6c:	691a      	ldr	r2, [r3, #16]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2200      	movs	r2, #0
 800ca76:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	709a      	strb	r2, [r3, #2]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	22ff      	movs	r2, #255	; 0xff
 800ca86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	729a      	strb	r2, [r3, #10]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	9302      	str	r3, [sp, #8]
 800ca96:	2301      	movs	r3, #1
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	23ff      	movs	r3, #255	; 0xff
 800caa0:	2200      	movs	r2, #0
 800caa2:	69f9      	ldr	r1, [r7, #28]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fa75 	bl	800cf94 <ip4_output_if>
 800caaa:	4603      	mov	r3, r0
 800caac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800caae:	e001      	b.n	800cab4 <icmp_input+0x1b8>
      break;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <icmp_input+0x1ba>
      break;
 800cab4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7f8 fcb2 	bl	8005420 <pbuf_free>
  return;
 800cabc:	e013      	b.n	800cae6 <icmp_input+0x1ea>
    goto lenerr;
 800cabe:	bf00      	nop
 800cac0:	e002      	b.n	800cac8 <icmp_input+0x1cc>
    goto lenerr;
 800cac2:	bf00      	nop
 800cac4:	e000      	b.n	800cac8 <icmp_input+0x1cc>
        goto lenerr;
 800cac6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7f8 fca9 	bl	8005420 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cace:	e00a      	b.n	800cae6 <icmp_input+0x1ea>
        goto icmperr;
 800cad0:	bf00      	nop
 800cad2:	e004      	b.n	800cade <icmp_input+0x1e2>
        goto icmperr;
 800cad4:	bf00      	nop
 800cad6:	e002      	b.n	800cade <icmp_input+0x1e2>
          goto icmperr;
 800cad8:	bf00      	nop
 800cada:	e000      	b.n	800cade <icmp_input+0x1e2>
          goto icmperr;
 800cadc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7f8 fc9e 	bl	8005420 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cae4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cae6:	3728      	adds	r7, #40	; 0x28
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20004d14 	.word	0x20004d14
 800caf0:	20004d28 	.word	0x20004d28
 800caf4:	0801160c 	.word	0x0801160c
 800caf8:	08011644 	.word	0x08011644
 800cafc:	0801167c 	.word	0x0801167c
 800cb00:	080116a4 	.word	0x080116a4

0800cb04 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cb10:	78fb      	ldrb	r3, [r7, #3]
 800cb12:	461a      	mov	r2, r3
 800cb14:	2103      	movs	r1, #3
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f814 	bl	800cb44 <icmp_send_response>
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	461a      	mov	r2, r3
 800cb34:	210b      	movs	r1, #11
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f804 	bl	800cb44 <icmp_send_response>
}
 800cb3c:	bf00      	nop
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08c      	sub	sp, #48	; 0x30
 800cb48:	af04      	add	r7, sp, #16
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	70fb      	strb	r3, [r7, #3]
 800cb50:	4613      	mov	r3, r2
 800cb52:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cb54:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb58:	2124      	movs	r1, #36	; 0x24
 800cb5a:	2022      	movs	r0, #34	; 0x22
 800cb5c:	f7f8 f97c 	bl	8004e58 <pbuf_alloc>
 800cb60:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d04c      	beq.n	800cc02 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	895b      	ldrh	r3, [r3, #10]
 800cb6c:	2b23      	cmp	r3, #35	; 0x23
 800cb6e:	d806      	bhi.n	800cb7e <icmp_send_response+0x3a>
 800cb70:	4b26      	ldr	r3, [pc, #152]	; (800cc0c <icmp_send_response+0xc8>)
 800cb72:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cb76:	4926      	ldr	r1, [pc, #152]	; (800cc10 <icmp_send_response+0xcc>)
 800cb78:	4826      	ldr	r0, [pc, #152]	; (800cc14 <icmp_send_response+0xd0>)
 800cb7a:	f001 fb39 	bl	800e1f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	78fa      	ldrb	r2, [r7, #3]
 800cb8e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	78ba      	ldrb	r2, [r7, #2]
 800cb94:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	711a      	strb	r2, [r3, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2200      	movs	r2, #0
 800cba4:	719a      	strb	r2, [r3, #6]
 800cba6:	2200      	movs	r2, #0
 800cba8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f103 0008 	add.w	r0, r3, #8
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	221c      	movs	r2, #28
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f001 fbf4 	bl	800e3a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cbc4:	f107 030c 	add.w	r3, r7, #12
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 f825 	bl	800cc18 <ip4_route>
 800cbce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d011      	beq.n	800cbfa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	709a      	strb	r2, [r3, #2]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cbe0:	f107 020c 	add.w	r2, r7, #12
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	9302      	str	r3, [sp, #8]
 800cbe8:	2301      	movs	r3, #1
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	2300      	movs	r3, #0
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	23ff      	movs	r3, #255	; 0xff
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	69f8      	ldr	r0, [r7, #28]
 800cbf6:	f000 f9cd 	bl	800cf94 <ip4_output_if>
  }
  pbuf_free(q);
 800cbfa:	69f8      	ldr	r0, [r7, #28]
 800cbfc:	f7f8 fc10 	bl	8005420 <pbuf_free>
 800cc00:	e000      	b.n	800cc04 <icmp_send_response+0xc0>
    return;
 800cc02:	bf00      	nop
}
 800cc04:	3720      	adds	r7, #32
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	0801160c 	.word	0x0801160c
 800cc10:	080116d8 	.word	0x080116d8
 800cc14:	0801167c 	.word	0x0801167c

0800cc18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cc20:	4b33      	ldr	r3, [pc, #204]	; (800ccf0 <ip4_route+0xd8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60fb      	str	r3, [r7, #12]
 800cc26:	e036      	b.n	800cc96 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d02b      	beq.n	800cc90 <ip4_route+0x78>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc3e:	089b      	lsrs	r3, r3, #2
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d022      	beq.n	800cc90 <ip4_route+0x78>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d01d      	beq.n	800cc90 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	405a      	eors	r2, r3
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	3308      	adds	r3, #8
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4013      	ands	r3, r2
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	e038      	b.n	800cce2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc76:	f003 0302 	and.w	r3, r3, #2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d108      	bne.n	800cc90 <ip4_route+0x78>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	330c      	adds	r3, #12
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d101      	bne.n	800cc90 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	e028      	b.n	800cce2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	60fb      	str	r3, [r7, #12]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1c5      	bne.n	800cc28 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cc9c:	4b15      	ldr	r3, [pc, #84]	; (800ccf4 <ip4_route+0xdc>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d01a      	beq.n	800ccda <ip4_route+0xc2>
 800cca4:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <ip4_route+0xdc>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccac:	f003 0301 	and.w	r3, r3, #1
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d012      	beq.n	800ccda <ip4_route+0xc2>
 800ccb4:	4b0f      	ldr	r3, [pc, #60]	; (800ccf4 <ip4_route+0xdc>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccbc:	f003 0304 	and.w	r3, r3, #4
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00a      	beq.n	800ccda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ccc4:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <ip4_route+0xdc>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3304      	adds	r3, #4
 800ccca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d004      	beq.n	800ccda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b7f      	cmp	r3, #127	; 0x7f
 800ccd8:	d101      	bne.n	800ccde <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e001      	b.n	800cce2 <ip4_route+0xca>
  }

  return netif_default;
 800ccde:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <ip4_route+0xdc>)
 800cce0:	681b      	ldr	r3, [r3, #0]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	2000a438 	.word	0x2000a438
 800ccf4:	2000a43c 	.word	0x2000a43c

0800ccf8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d016      	beq.n	800cd3e <ip4_input_accept+0x46>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d011      	beq.n	800cd3e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cd1a:	4b0b      	ldr	r3, [pc, #44]	; (800cd48 <ip4_input_accept+0x50>)
 800cd1c:	695a      	ldr	r2, [r3, #20]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3304      	adds	r3, #4
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d008      	beq.n	800cd3a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cd28:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <ip4_input_accept+0x50>)
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 fa08 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800cd34:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e000      	b.n	800cd40 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20004d14 	.word	0x20004d14

0800cd4c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	091b      	lsrs	r3, r3, #4
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	d004      	beq.n	800cd72 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f7f8 fb59 	bl	8005420 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e107      	b.n	800cf82 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	f003 030f 	and.w	r3, r3, #15
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	885b      	ldrh	r3, [r3, #2]
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7f6 ffeb 	bl	8003d64 <lwip_htons>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	891b      	ldrh	r3, [r3, #8]
 800cd96:	89ba      	ldrh	r2, [r7, #12]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d204      	bcs.n	800cda6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cd9c:	89bb      	ldrh	r3, [r7, #12]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7f8 f9b7 	bl	8005114 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	895b      	ldrh	r3, [r3, #10]
 800cdaa:	89fa      	ldrh	r2, [r7, #14]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d807      	bhi.n	800cdc0 <ip4_input+0x74>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	891b      	ldrh	r3, [r3, #8]
 800cdb4:	89ba      	ldrh	r2, [r7, #12]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d802      	bhi.n	800cdc0 <ip4_input+0x74>
 800cdba:	89fb      	ldrh	r3, [r7, #14]
 800cdbc:	2b13      	cmp	r3, #19
 800cdbe:	d804      	bhi.n	800cdca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7f8 fb2d 	bl	8005420 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e0db      	b.n	800cf82 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	4a6f      	ldr	r2, [pc, #444]	; (800cf8c <ip4_input+0x240>)
 800cdd0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	4a6d      	ldr	r2, [pc, #436]	; (800cf8c <ip4_input+0x240>)
 800cdd8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cdda:	4b6c      	ldr	r3, [pc, #432]	; (800cf8c <ip4_input+0x240>)
 800cddc:	695b      	ldr	r3, [r3, #20]
 800cdde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cde2:	2be0      	cmp	r3, #224	; 0xe0
 800cde4:	d112      	bne.n	800ce0c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d007      	beq.n	800ce06 <ip4_input+0xba>
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <ip4_input+0xba>
      netif = inp;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	613b      	str	r3, [r7, #16]
 800ce04:	e02a      	b.n	800ce5c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	613b      	str	r3, [r7, #16]
 800ce0a:	e027      	b.n	800ce5c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ce0c:	6838      	ldr	r0, [r7, #0]
 800ce0e:	f7ff ff73 	bl	800ccf8 <ip4_input_accept>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <ip4_input+0xd2>
      netif = inp;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	613b      	str	r3, [r7, #16]
 800ce1c:	e01e      	b.n	800ce5c <ip4_input+0x110>
    } else {
      netif = NULL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ce22:	4b5a      	ldr	r3, [pc, #360]	; (800cf8c <ip4_input+0x240>)
 800ce24:	695b      	ldr	r3, [r3, #20]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b7f      	cmp	r3, #127	; 0x7f
 800ce2a:	d017      	beq.n	800ce5c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ce2c:	4b58      	ldr	r3, [pc, #352]	; (800cf90 <ip4_input+0x244>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	613b      	str	r3, [r7, #16]
 800ce32:	e00e      	b.n	800ce52 <ip4_input+0x106>
          if (netif == inp) {
 800ce34:	693a      	ldr	r2, [r7, #16]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d006      	beq.n	800ce4a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ce3c:	6938      	ldr	r0, [r7, #16]
 800ce3e:	f7ff ff5b 	bl	800ccf8 <ip4_input_accept>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d108      	bne.n	800ce5a <ip4_input+0x10e>
 800ce48:	e000      	b.n	800ce4c <ip4_input+0x100>
            continue;
 800ce4a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	613b      	str	r3, [r7, #16]
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1ed      	bne.n	800ce34 <ip4_input+0xe8>
 800ce58:	e000      	b.n	800ce5c <ip4_input+0x110>
            break;
 800ce5a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ce5c:	4b4b      	ldr	r3, [pc, #300]	; (800cf8c <ip4_input+0x240>)
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 f96e 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d105      	bne.n	800ce7a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ce6e:	4b47      	ldr	r3, [pc, #284]	; (800cf8c <ip4_input+0x240>)
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ce76:	2be0      	cmp	r3, #224	; 0xe0
 800ce78:	d104      	bne.n	800ce84 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7f8 fad0 	bl	8005420 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e07e      	b.n	800cf82 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d104      	bne.n	800ce94 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7f8 fac8 	bl	8005420 <pbuf_free>
    return ERR_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	e076      	b.n	800cf82 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	88db      	ldrh	r3, [r3, #6]
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cea0:	4013      	ands	r3, r2
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00b      	beq.n	800cebe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fc92 	bl	800d7d0 <ip4_reass>
 800ceac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <ip4_input+0x16c>
      return ERR_OK;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	e064      	b.n	800cf82 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cebe:	4a33      	ldr	r2, [pc, #204]	; (800cf8c <ip4_input+0x240>)
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cec4:	4a31      	ldr	r2, [pc, #196]	; (800cf8c <ip4_input+0x240>)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ceca:	4a30      	ldr	r2, [pc, #192]	; (800cf8c <ip4_input+0x240>)
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	f003 030f 	and.w	r3, r3, #15
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	b29a      	uxth	r2, r3
 800cee0:	4b2a      	ldr	r3, [pc, #168]	; (800cf8c <ip4_input+0x240>)
 800cee2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cee4:	89fb      	ldrh	r3, [r7, #14]
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f8 fa13 	bl	8005314 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	7a5b      	ldrb	r3, [r3, #9]
 800cef2:	2b11      	cmp	r3, #17
 800cef4:	d006      	beq.n	800cf04 <ip4_input+0x1b8>
 800cef6:	2b11      	cmp	r3, #17
 800cef8:	dc13      	bgt.n	800cf22 <ip4_input+0x1d6>
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d00c      	beq.n	800cf18 <ip4_input+0x1cc>
 800cefe:	2b06      	cmp	r3, #6
 800cf00:	d005      	beq.n	800cf0e <ip4_input+0x1c2>
 800cf02:	e00e      	b.n	800cf22 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7fe f90e 	bl	800b128 <udp_input>
        break;
 800cf0c:	e026      	b.n	800cf5c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800cf0e:	6839      	ldr	r1, [r7, #0]
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7fa f94f 	bl	80071b4 <tcp_input>
        break;
 800cf16:	e021      	b.n	800cf5c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fcee 	bl	800c8fc <icmp_input>
        break;
 800cf20:	e01c      	b.n	800cf5c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cf22:	4b1a      	ldr	r3, [pc, #104]	; (800cf8c <ip4_input+0x240>)
 800cf24:	695b      	ldr	r3, [r3, #20]
 800cf26:	6939      	ldr	r1, [r7, #16]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 f90b 	bl	800d144 <ip4_addr_isbroadcast_u32>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d10f      	bne.n	800cf54 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cf34:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <ip4_input+0x240>)
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cf3c:	2be0      	cmp	r3, #224	; 0xe0
 800cf3e:	d009      	beq.n	800cf54 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800cf40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7f8 fa57 	bl	80053fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cf4c:	2102      	movs	r1, #2
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff fdd8 	bl	800cb04 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f8 fa63 	bl	8005420 <pbuf_free>
        break;
 800cf5a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cf5c:	4b0b      	ldr	r3, [pc, #44]	; (800cf8c <ip4_input+0x240>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cf62:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <ip4_input+0x240>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cf68:	4b08      	ldr	r3, [pc, #32]	; (800cf8c <ip4_input+0x240>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cf6e:	4b07      	ldr	r3, [pc, #28]	; (800cf8c <ip4_input+0x240>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cf74:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <ip4_input+0x240>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cf7a:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <ip4_input+0x240>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3718      	adds	r7, #24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20004d14 	.word	0x20004d14
 800cf90:	2000a438 	.word	0x2000a438

0800cf94 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b08a      	sub	sp, #40	; 0x28
 800cf98:	af04      	add	r7, sp, #16
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d009      	beq.n	800cfc0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d003      	beq.n	800cfba <ip4_output_if+0x26>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d102      	bne.n	800cfc0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cfc0:	78fa      	ldrb	r2, [r7, #3]
 800cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc4:	9302      	str	r3, [sp, #8]
 800cfc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cfca:	9301      	str	r3, [sp, #4]
 800cfcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	6979      	ldr	r1, [r7, #20]
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 f805 	bl	800cfe8 <ip4_output_if_src>
 800cfde:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3718      	adds	r7, #24
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b088      	sub	sp, #32
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
 800cff4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	7b9b      	ldrb	r3, [r3, #14]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d006      	beq.n	800d00c <ip4_output_if_src+0x24>
 800cffe:	4b4b      	ldr	r3, [pc, #300]	; (800d12c <ip4_output_if_src+0x144>)
 800d000:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d004:	494a      	ldr	r1, [pc, #296]	; (800d130 <ip4_output_if_src+0x148>)
 800d006:	484b      	ldr	r0, [pc, #300]	; (800d134 <ip4_output_if_src+0x14c>)
 800d008:	f001 f8f2 	bl	800e1f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d060      	beq.n	800d0d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d012:	2314      	movs	r3, #20
 800d014:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d016:	2114      	movs	r1, #20
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f7f8 f96b 	bl	80052f4 <pbuf_add_header>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d024:	f06f 0301 	mvn.w	r3, #1
 800d028:	e07c      	b.n	800d124 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	895b      	ldrh	r3, [r3, #10]
 800d034:	2b13      	cmp	r3, #19
 800d036:	d806      	bhi.n	800d046 <ip4_output_if_src+0x5e>
 800d038:	4b3c      	ldr	r3, [pc, #240]	; (800d12c <ip4_output_if_src+0x144>)
 800d03a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d03e:	493e      	ldr	r1, [pc, #248]	; (800d138 <ip4_output_if_src+0x150>)
 800d040:	483c      	ldr	r0, [pc, #240]	; (800d134 <ip4_output_if_src+0x14c>)
 800d042:	f001 f8d5 	bl	800e1f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	78fa      	ldrb	r2, [r7, #3]
 800d04a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d052:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d05c:	8b7b      	ldrh	r3, [r7, #26]
 800d05e:	089b      	lsrs	r3, r3, #2
 800d060:	b29b      	uxth	r3, r3
 800d062:	b2db      	uxtb	r3, r3
 800d064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d074:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	891b      	ldrh	r3, [r3, #8]
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7f6 fe72 	bl	8003d64 <lwip_htons>
 800d080:	4603      	mov	r3, r0
 800d082:	461a      	mov	r2, r3
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	2200      	movs	r2, #0
 800d08c:	719a      	strb	r2, [r3, #6]
 800d08e:	2200      	movs	r2, #0
 800d090:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d092:	4b2a      	ldr	r3, [pc, #168]	; (800d13c <ip4_output_if_src+0x154>)
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f7f6 fe64 	bl	8003d64 <lwip_htons>
 800d09c:	4603      	mov	r3, r0
 800d09e:	461a      	mov	r2, r3
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d0a4:	4b25      	ldr	r3, [pc, #148]	; (800d13c <ip4_output_if_src+0x154>)
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	4b23      	ldr	r3, [pc, #140]	; (800d13c <ip4_output_if_src+0x154>)
 800d0ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d104      	bne.n	800d0c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d0b6:	4b22      	ldr	r3, [pc, #136]	; (800d140 <ip4_output_if_src+0x158>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	60da      	str	r2, [r3, #12]
 800d0be:	e003      	b.n	800d0c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	729a      	strb	r2, [r3, #10]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	72da      	strb	r2, [r3, #11]
 800d0d2:	e00f      	b.n	800d0f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	895b      	ldrh	r3, [r3, #10]
 800d0d8:	2b13      	cmp	r3, #19
 800d0da:	d802      	bhi.n	800d0e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d0dc:	f06f 0301 	mvn.w	r3, #1
 800d0e0:	e020      	b.n	800d124 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d0ee:	f107 0314 	add.w	r3, r7, #20
 800d0f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00c      	beq.n	800d116 <ip4_output_if_src+0x12e>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	891a      	ldrh	r2, [r3, #8]
 800d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d102:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d104:	429a      	cmp	r2, r3
 800d106:	d906      	bls.n	800d116 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 fd53 	bl	800dbb8 <ip4_frag>
 800d112:	4603      	mov	r3, r0
 800d114:	e006      	b.n	800d124 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	68f9      	ldr	r1, [r7, #12]
 800d11e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d120:	4798      	blx	r3
 800d122:	4603      	mov	r3, r0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	08011704 	.word	0x08011704
 800d130:	08011738 	.word	0x08011738
 800d134:	08011744 	.word	0x08011744
 800d138:	0801176c 	.word	0x0801176c
 800d13c:	2000a596 	.word	0x2000a596
 800d140:	08011b44 	.word	0x08011b44

0800d144 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d158:	d002      	beq.n	800d160 <ip4_addr_isbroadcast_u32+0x1c>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d160:	2301      	movs	r3, #1
 800d162:	e02a      	b.n	800d1ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d16a:	f003 0302 	and.w	r3, r3, #2
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d172:	2300      	movs	r3, #0
 800d174:	e021      	b.n	800d1ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	3304      	adds	r3, #4
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d101      	bne.n	800d186 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d182:	2300      	movs	r3, #0
 800d184:	e019      	b.n	800d1ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	3304      	adds	r3, #4
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	405a      	eors	r2, r3
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	3308      	adds	r3, #8
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4013      	ands	r3, r2
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10d      	bne.n	800d1b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	3308      	adds	r3, #8
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	43da      	mvns	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	3308      	adds	r3, #8
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d101      	bne.n	800d1b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e000      	b.n	800d1ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d1b8:	2300      	movs	r3, #0
  }
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
	...

0800d1c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d1d2:	4b12      	ldr	r3, [pc, #72]	; (800d21c <ip_reass_tmr+0x54>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d1d8:	e018      	b.n	800d20c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	7fdb      	ldrb	r3, [r3, #31]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00b      	beq.n	800d1fa <ip_reass_tmr+0x32>
      r->timer--;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	7fdb      	ldrb	r3, [r3, #31]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	60fb      	str	r3, [r7, #12]
 800d1f8:	e008      	b.n	800d20c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d204:	68b9      	ldr	r1, [r7, #8]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f80a 	bl	800d220 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1e3      	bne.n	800d1da <ip_reass_tmr+0x12>
    }
  }
}
 800d212:	bf00      	nop
 800d214:	bf00      	nop
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	2000a598 	.word	0x2000a598

0800d220 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d22a:	2300      	movs	r3, #0
 800d22c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d22e:	683a      	ldr	r2, [r7, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	429a      	cmp	r2, r3
 800d234:	d105      	bne.n	800d242 <ip_reass_free_complete_datagram+0x22>
 800d236:	4b45      	ldr	r3, [pc, #276]	; (800d34c <ip_reass_free_complete_datagram+0x12c>)
 800d238:	22ab      	movs	r2, #171	; 0xab
 800d23a:	4945      	ldr	r1, [pc, #276]	; (800d350 <ip_reass_free_complete_datagram+0x130>)
 800d23c:	4845      	ldr	r0, [pc, #276]	; (800d354 <ip_reass_free_complete_datagram+0x134>)
 800d23e:	f000 ffd7 	bl	800e1f0 <iprintf>
  if (prev != NULL) {
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00a      	beq.n	800d25e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d005      	beq.n	800d25e <ip_reass_free_complete_datagram+0x3e>
 800d252:	4b3e      	ldr	r3, [pc, #248]	; (800d34c <ip_reass_free_complete_datagram+0x12c>)
 800d254:	22ad      	movs	r2, #173	; 0xad
 800d256:	4940      	ldr	r1, [pc, #256]	; (800d358 <ip_reass_free_complete_datagram+0x138>)
 800d258:	483e      	ldr	r0, [pc, #248]	; (800d354 <ip_reass_free_complete_datagram+0x134>)
 800d25a:	f000 ffc9 	bl	800e1f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	889b      	ldrh	r3, [r3, #4]
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d12a      	bne.n	800d2c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	6858      	ldr	r0, [r3, #4]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3308      	adds	r3, #8
 800d286:	2214      	movs	r2, #20
 800d288:	4619      	mov	r1, r3
 800d28a:	f001 f88c 	bl	800e3a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d28e:	2101      	movs	r1, #1
 800d290:	69b8      	ldr	r0, [r7, #24]
 800d292:	f7ff fc47 	bl	800cb24 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d296:	69b8      	ldr	r0, [r7, #24]
 800d298:	f7f8 f94a 	bl	8005530 <pbuf_clen>
 800d29c:	4603      	mov	r3, r0
 800d29e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d2a0:	8bfa      	ldrh	r2, [r7, #30]
 800d2a2:	8a7b      	ldrh	r3, [r7, #18]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2aa:	db05      	blt.n	800d2b8 <ip_reass_free_complete_datagram+0x98>
 800d2ac:	4b27      	ldr	r3, [pc, #156]	; (800d34c <ip_reass_free_complete_datagram+0x12c>)
 800d2ae:	22bc      	movs	r2, #188	; 0xbc
 800d2b0:	492a      	ldr	r1, [pc, #168]	; (800d35c <ip_reass_free_complete_datagram+0x13c>)
 800d2b2:	4828      	ldr	r0, [pc, #160]	; (800d354 <ip_reass_free_complete_datagram+0x134>)
 800d2b4:	f000 ff9c 	bl	800e1f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d2b8:	8bfa      	ldrh	r2, [r7, #30]
 800d2ba:	8a7b      	ldrh	r3, [r7, #18]
 800d2bc:	4413      	add	r3, r2
 800d2be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d2c0:	69b8      	ldr	r0, [r7, #24]
 800d2c2:	f7f8 f8ad 	bl	8005420 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d2cc:	e01f      	b.n	800d30e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7f8 f926 	bl	8005530 <pbuf_clen>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d2e8:	8bfa      	ldrh	r2, [r7, #30]
 800d2ea:	8a7b      	ldrh	r3, [r7, #18]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2f2:	db05      	blt.n	800d300 <ip_reass_free_complete_datagram+0xe0>
 800d2f4:	4b15      	ldr	r3, [pc, #84]	; (800d34c <ip_reass_free_complete_datagram+0x12c>)
 800d2f6:	22cc      	movs	r2, #204	; 0xcc
 800d2f8:	4918      	ldr	r1, [pc, #96]	; (800d35c <ip_reass_free_complete_datagram+0x13c>)
 800d2fa:	4816      	ldr	r0, [pc, #88]	; (800d354 <ip_reass_free_complete_datagram+0x134>)
 800d2fc:	f000 ff78 	bl	800e1f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d300:	8bfa      	ldrh	r2, [r7, #30]
 800d302:	8a7b      	ldrh	r3, [r7, #18]
 800d304:	4413      	add	r3, r2
 800d306:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f7f8 f889 	bl	8005420 <pbuf_free>
  while (p != NULL) {
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1dc      	bne.n	800d2ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f8c2 	bl	800d4a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d31c:	4b10      	ldr	r3, [pc, #64]	; (800d360 <ip_reass_free_complete_datagram+0x140>)
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	8bfa      	ldrh	r2, [r7, #30]
 800d322:	429a      	cmp	r2, r3
 800d324:	d905      	bls.n	800d332 <ip_reass_free_complete_datagram+0x112>
 800d326:	4b09      	ldr	r3, [pc, #36]	; (800d34c <ip_reass_free_complete_datagram+0x12c>)
 800d328:	22d2      	movs	r2, #210	; 0xd2
 800d32a:	490e      	ldr	r1, [pc, #56]	; (800d364 <ip_reass_free_complete_datagram+0x144>)
 800d32c:	4809      	ldr	r0, [pc, #36]	; (800d354 <ip_reass_free_complete_datagram+0x134>)
 800d32e:	f000 ff5f 	bl	800e1f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d332:	4b0b      	ldr	r3, [pc, #44]	; (800d360 <ip_reass_free_complete_datagram+0x140>)
 800d334:	881a      	ldrh	r2, [r3, #0]
 800d336:	8bfb      	ldrh	r3, [r7, #30]
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	4b08      	ldr	r3, [pc, #32]	; (800d360 <ip_reass_free_complete_datagram+0x140>)
 800d33e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d340:	8bfb      	ldrh	r3, [r7, #30]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3720      	adds	r7, #32
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	0801179c 	.word	0x0801179c
 800d350:	080117d8 	.word	0x080117d8
 800d354:	080117e4 	.word	0x080117e4
 800d358:	0801180c 	.word	0x0801180c
 800d35c:	08011820 	.word	0x08011820
 800d360:	2000a59c 	.word	0x2000a59c
 800d364:	08011840 	.word	0x08011840

0800d368 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b08a      	sub	sp, #40	; 0x28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d372:	2300      	movs	r3, #0
 800d374:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d376:	2300      	movs	r3, #0
 800d378:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d386:	4b28      	ldr	r3, [pc, #160]	; (800d428 <ip_reass_remove_oldest_datagram+0xc0>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d38c:	e030      	b.n	800d3f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d390:	695a      	ldr	r2, [r3, #20]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	429a      	cmp	r2, r3
 800d398:	d10c      	bne.n	800d3b4 <ip_reass_remove_oldest_datagram+0x4c>
 800d39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39c:	699a      	ldr	r2, [r3, #24]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d106      	bne.n	800d3b4 <ip_reass_remove_oldest_datagram+0x4c>
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a8:	899a      	ldrh	r2, [r3, #12]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	889b      	ldrh	r3, [r3, #4]
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d014      	beq.n	800d3de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d104      	bne.n	800d3ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	61bb      	str	r3, [r7, #24]
 800d3c8:	e009      	b.n	800d3de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3cc:	7fda      	ldrb	r2, [r3, #31]
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	7fdb      	ldrb	r3, [r3, #31]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d803      	bhi.n	800d3de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1cb      	bne.n	800d38e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d008      	beq.n	800d40e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d3fc:	69b9      	ldr	r1, [r7, #24]
 800d3fe:	6a38      	ldr	r0, [r7, #32]
 800d400:	f7ff ff0e 	bl	800d220 <ip_reass_free_complete_datagram>
 800d404:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4413      	add	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	429a      	cmp	r2, r3
 800d414:	da02      	bge.n	800d41c <ip_reass_remove_oldest_datagram+0xb4>
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	dcac      	bgt.n	800d376 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d41c:	697b      	ldr	r3, [r7, #20]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3728      	adds	r7, #40	; 0x28
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	2000a598 	.word	0x2000a598

0800d42c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d436:	2004      	movs	r0, #4
 800d438:	f7f7 f90c 	bl	8004654 <memp_malloc>
 800d43c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d110      	bne.n	800d466 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7ff ff8e 	bl	800d368 <ip_reass_remove_oldest_datagram>
 800d44c:	4602      	mov	r2, r0
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	4293      	cmp	r3, r2
 800d452:	dc03      	bgt.n	800d45c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d454:	2004      	movs	r0, #4
 800d456:	f7f7 f8fd 	bl	8004654 <memp_malloc>
 800d45a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d101      	bne.n	800d466 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	e016      	b.n	800d494 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d466:	2220      	movs	r2, #32
 800d468:	2100      	movs	r1, #0
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f000 ff25 	bl	800e2ba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	220f      	movs	r2, #15
 800d474:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d476:	4b09      	ldr	r3, [pc, #36]	; (800d49c <ip_reass_enqueue_new_datagram+0x70>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d47e:	4a07      	ldr	r2, [pc, #28]	; (800d49c <ip_reass_enqueue_new_datagram+0x70>)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3308      	adds	r3, #8
 800d488:	2214      	movs	r2, #20
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f000 ff8a 	bl	800e3a6 <memcpy>
  return ipr;
 800d492:	68fb      	ldr	r3, [r7, #12]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	2000a598 	.word	0x2000a598

0800d4a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d4aa:	4b10      	ldr	r3, [pc, #64]	; (800d4ec <ip_reass_dequeue_datagram+0x4c>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d104      	bne.n	800d4be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a0c      	ldr	r2, [pc, #48]	; (800d4ec <ip_reass_dequeue_datagram+0x4c>)
 800d4ba:	6013      	str	r3, [r2, #0]
 800d4bc:	e00d      	b.n	800d4da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d106      	bne.n	800d4d2 <ip_reass_dequeue_datagram+0x32>
 800d4c4:	4b0a      	ldr	r3, [pc, #40]	; (800d4f0 <ip_reass_dequeue_datagram+0x50>)
 800d4c6:	f240 1245 	movw	r2, #325	; 0x145
 800d4ca:	490a      	ldr	r1, [pc, #40]	; (800d4f4 <ip_reass_dequeue_datagram+0x54>)
 800d4cc:	480a      	ldr	r0, [pc, #40]	; (800d4f8 <ip_reass_dequeue_datagram+0x58>)
 800d4ce:	f000 fe8f 	bl	800e1f0 <iprintf>
    prev->next = ipr->next;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d4da:	6879      	ldr	r1, [r7, #4]
 800d4dc:	2004      	movs	r0, #4
 800d4de:	f7f7 f929 	bl	8004734 <memp_free>
}
 800d4e2:	bf00      	nop
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	2000a598 	.word	0x2000a598
 800d4f0:	0801179c 	.word	0x0801179c
 800d4f4:	08011864 	.word	0x08011864
 800d4f8:	080117e4 	.word	0x080117e4

0800d4fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b08c      	sub	sp, #48	; 0x30
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d508:	2300      	movs	r3, #0
 800d50a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d50c:	2301      	movs	r3, #1
 800d50e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	885b      	ldrh	r3, [r3, #2]
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7f6 fc21 	bl	8003d64 <lwip_htons>
 800d522:	4603      	mov	r3, r0
 800d524:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	f003 030f 	and.w	r3, r3, #15
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d534:	7e7b      	ldrb	r3, [r7, #25]
 800d536:	b29b      	uxth	r3, r3
 800d538:	8b7a      	ldrh	r2, [r7, #26]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d202      	bcs.n	800d544 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d53e:	f04f 33ff 	mov.w	r3, #4294967295
 800d542:	e135      	b.n	800d7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d544:	7e7b      	ldrb	r3, [r7, #25]
 800d546:	b29b      	uxth	r3, r3
 800d548:	8b7a      	ldrh	r2, [r7, #26]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	88db      	ldrh	r3, [r3, #6]
 800d552:	b29b      	uxth	r3, r3
 800d554:	4618      	mov	r0, r3
 800d556:	f7f6 fc05 	bl	8003d64 <lwip_htons>
 800d55a:	4603      	mov	r3, r0
 800d55c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d560:	b29b      	uxth	r3, r3
 800d562:	00db      	lsls	r3, r3, #3
 800d564:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56e:	2200      	movs	r2, #0
 800d570:	701a      	strb	r2, [r3, #0]
 800d572:	2200      	movs	r2, #0
 800d574:	705a      	strb	r2, [r3, #1]
 800d576:	2200      	movs	r2, #0
 800d578:	709a      	strb	r2, [r3, #2]
 800d57a:	2200      	movs	r2, #0
 800d57c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d580:	8afa      	ldrh	r2, [r7, #22]
 800d582:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d584:	8afa      	ldrh	r2, [r7, #22]
 800d586:	8b7b      	ldrh	r3, [r7, #26]
 800d588:	4413      	add	r3, r2
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	88db      	ldrh	r3, [r3, #6]
 800d594:	b29b      	uxth	r3, r3
 800d596:	8afa      	ldrh	r2, [r7, #22]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d902      	bls.n	800d5a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d59c:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a0:	e106      	b.n	800d7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5a8:	e068      	b.n	800d67c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	889b      	ldrh	r3, [r3, #4]
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	889b      	ldrh	r3, [r3, #4]
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d235      	bcs.n	800d62c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d020      	beq.n	800d60e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ce:	889b      	ldrh	r3, [r3, #4]
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d4:	88db      	ldrh	r3, [r3, #6]
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d307      	bcc.n	800d5ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	88db      	ldrh	r3, [r3, #6]
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	889b      	ldrh	r3, [r3, #4]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d902      	bls.n	800d5f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f0:	e0de      	b.n	800d7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	88db      	ldrh	r3, [r3, #6]
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	889b      	ldrh	r3, [r3, #4]
 800d602:	b29b      	uxth	r3, r3
 800d604:	429a      	cmp	r2, r3
 800d606:	d03d      	beq.n	800d684 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d608:	2300      	movs	r3, #0
 800d60a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d60c:	e03a      	b.n	800d684 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d610:	88db      	ldrh	r3, [r3, #6]
 800d612:	b29a      	uxth	r2, r3
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	889b      	ldrh	r3, [r3, #4]
 800d618:	b29b      	uxth	r3, r3
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d902      	bls.n	800d624 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d61e:	f04f 33ff 	mov.w	r3, #4294967295
 800d622:	e0c5      	b.n	800d7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	605a      	str	r2, [r3, #4]
      break;
 800d62a:	e02b      	b.n	800d684 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62e:	889b      	ldrh	r3, [r3, #4]
 800d630:	b29a      	uxth	r2, r3
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	889b      	ldrh	r3, [r3, #4]
 800d636:	b29b      	uxth	r3, r3
 800d638:	429a      	cmp	r2, r3
 800d63a:	d102      	bne.n	800d642 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d63c:	f04f 33ff 	mov.w	r3, #4294967295
 800d640:	e0b6      	b.n	800d7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	889b      	ldrh	r3, [r3, #4]
 800d646:	b29a      	uxth	r2, r3
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	88db      	ldrh	r3, [r3, #6]
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	429a      	cmp	r2, r3
 800d650:	d202      	bcs.n	800d658 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d652:	f04f 33ff 	mov.w	r3, #4294967295
 800d656:	e0ab      	b.n	800d7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d009      	beq.n	800d672 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d660:	88db      	ldrh	r3, [r3, #6]
 800d662:	b29a      	uxth	r2, r3
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	889b      	ldrh	r3, [r3, #4]
 800d668:	b29b      	uxth	r3, r3
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d001      	beq.n	800d672 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d193      	bne.n	800d5aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d682:	e000      	b.n	800d686 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d684:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d12d      	bne.n	800d6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d01c      	beq.n	800d6cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d694:	88db      	ldrh	r3, [r3, #6]
 800d696:	b29a      	uxth	r2, r3
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	889b      	ldrh	r3, [r3, #4]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d906      	bls.n	800d6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d6a2:	4b45      	ldr	r3, [pc, #276]	; (800d7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d6a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d6a8:	4944      	ldr	r1, [pc, #272]	; (800d7bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d6aa:	4845      	ldr	r0, [pc, #276]	; (800d7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d6ac:	f000 fda0 	bl	800e1f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b8:	88db      	ldrh	r3, [r3, #6]
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	889b      	ldrh	r3, [r3, #4]
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d010      	beq.n	800d6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	623b      	str	r3, [r7, #32]
 800d6ca:	e00d      	b.n	800d6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d006      	beq.n	800d6e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d6d4:	4b38      	ldr	r3, [pc, #224]	; (800d7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d6d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d6da:	493a      	ldr	r1, [pc, #232]	; (800d7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d6dc:	4838      	ldr	r0, [pc, #224]	; (800d7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d6de:	f000 fd87 	bl	800e1f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d105      	bne.n	800d6fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	7f9b      	ldrb	r3, [r3, #30]
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d059      	beq.n	800d7ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d04f      	beq.n	800d7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	889b      	ldrh	r3, [r3, #4]
 800d710:	b29b      	uxth	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d002      	beq.n	800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d716:	2300      	movs	r3, #0
 800d718:	623b      	str	r3, [r7, #32]
 800d71a:	e041      	b.n	800d7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d726:	e012      	b.n	800d74e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	88db      	ldrh	r3, [r3, #6]
 800d732:	b29a      	uxth	r2, r3
 800d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d736:	889b      	ldrh	r3, [r3, #4]
 800d738:	b29b      	uxth	r3, r3
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d002      	beq.n	800d744 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d73e:	2300      	movs	r3, #0
 800d740:	623b      	str	r3, [r7, #32]
            break;
 800d742:	e007      	b.n	800d754 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d746:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1e9      	bne.n	800d728 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d754:	6a3b      	ldr	r3, [r7, #32]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d022      	beq.n	800d7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d106      	bne.n	800d770 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d762:	4b15      	ldr	r3, [pc, #84]	; (800d7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d764:	f240 12df 	movw	r2, #479	; 0x1df
 800d768:	4917      	ldr	r1, [pc, #92]	; (800d7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d76a:	4815      	ldr	r0, [pc, #84]	; (800d7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d76c:	f000 fd40 	bl	800e1f0 <iprintf>
          LWIP_ASSERT("sanity check",
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d778:	429a      	cmp	r2, r3
 800d77a:	d106      	bne.n	800d78a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d77c:	4b0e      	ldr	r3, [pc, #56]	; (800d7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d77e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d782:	4911      	ldr	r1, [pc, #68]	; (800d7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d784:	480e      	ldr	r0, [pc, #56]	; (800d7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d786:	f000 fd33 	bl	800e1f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d006      	beq.n	800d7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d792:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d794:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d798:	490c      	ldr	r1, [pc, #48]	; (800d7cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d79a:	4809      	ldr	r0, [pc, #36]	; (800d7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d79c:	f000 fd28 	bl	800e1f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	bf14      	ite	ne
 800d7a6:	2301      	movne	r3, #1
 800d7a8:	2300      	moveq	r3, #0
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	e000      	b.n	800d7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3730      	adds	r7, #48	; 0x30
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	0801179c 	.word	0x0801179c
 800d7bc:	08011880 	.word	0x08011880
 800d7c0:	080117e4 	.word	0x080117e4
 800d7c4:	080118a0 	.word	0x080118a0
 800d7c8:	080118d8 	.word	0x080118d8
 800d7cc:	080118e8 	.word	0x080118e8

0800d7d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08e      	sub	sp, #56	; 0x38
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	f003 030f 	and.w	r3, r3, #15
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	2b14      	cmp	r3, #20
 800d7ee:	f040 8171 	bne.w	800dad4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	88db      	ldrh	r3, [r3, #6]
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7f6 fab3 	bl	8003d64 <lwip_htons>
 800d7fe:	4603      	mov	r3, r0
 800d800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d804:	b29b      	uxth	r3, r3
 800d806:	00db      	lsls	r3, r3, #3
 800d808:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	885b      	ldrh	r3, [r3, #2]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	4618      	mov	r0, r3
 800d812:	f7f6 faa7 	bl	8003d64 <lwip_htons>
 800d816:	4603      	mov	r3, r0
 800d818:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	f003 030f 	and.w	r3, r3, #15
 800d822:	b2db      	uxtb	r3, r3
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d82a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d82e:	b29b      	uxth	r3, r3
 800d830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d832:	429a      	cmp	r2, r3
 800d834:	f0c0 8150 	bcc.w	800dad8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7f7 fe73 	bl	8005530 <pbuf_clen>
 800d84a:	4603      	mov	r3, r0
 800d84c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d84e:	4b8c      	ldr	r3, [pc, #560]	; (800da80 <ip4_reass+0x2b0>)
 800d850:	881b      	ldrh	r3, [r3, #0]
 800d852:	461a      	mov	r2, r3
 800d854:	8c3b      	ldrh	r3, [r7, #32]
 800d856:	4413      	add	r3, r2
 800d858:	2b0a      	cmp	r3, #10
 800d85a:	dd10      	ble.n	800d87e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d85c:	8c3b      	ldrh	r3, [r7, #32]
 800d85e:	4619      	mov	r1, r3
 800d860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d862:	f7ff fd81 	bl	800d368 <ip_reass_remove_oldest_datagram>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f000 8137 	beq.w	800dadc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d86e:	4b84      	ldr	r3, [pc, #528]	; (800da80 <ip4_reass+0x2b0>)
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	8c3b      	ldrh	r3, [r7, #32]
 800d876:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d878:	2b0a      	cmp	r3, #10
 800d87a:	f300 812f 	bgt.w	800dadc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d87e:	4b81      	ldr	r3, [pc, #516]	; (800da84 <ip4_reass+0x2b4>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	633b      	str	r3, [r7, #48]	; 0x30
 800d884:	e015      	b.n	800d8b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	695a      	ldr	r2, [r3, #20]
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d10c      	bne.n	800d8ac <ip4_reass+0xdc>
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	699a      	ldr	r2, [r3, #24]
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d106      	bne.n	800d8ac <ip4_reass+0xdc>
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	899a      	ldrh	r2, [r3, #12]
 800d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a4:	889b      	ldrh	r3, [r3, #4]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d006      	beq.n	800d8ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	633b      	str	r3, [r7, #48]	; 0x30
 800d8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1e6      	bne.n	800d886 <ip4_reass+0xb6>
 800d8b8:	e000      	b.n	800d8bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d8ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d109      	bne.n	800d8d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d8c2:	8c3b      	ldrh	r3, [r7, #32]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8c8:	f7ff fdb0 	bl	800d42c <ip_reass_enqueue_new_datagram>
 800d8cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d11c      	bne.n	800d90e <ip4_reass+0x13e>
      goto nullreturn;
 800d8d4:	e105      	b.n	800dae2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	88db      	ldrh	r3, [r3, #6]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7f6 fa41 	bl	8003d64 <lwip_htons>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d110      	bne.n	800d90e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	89db      	ldrh	r3, [r3, #14]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7f6 fa37 	bl	8003d64 <lwip_htons>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d006      	beq.n	800d90e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	3308      	adds	r3, #8
 800d904:	2214      	movs	r2, #20
 800d906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fd4c 	bl	800e3a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d910:	88db      	ldrh	r3, [r3, #6]
 800d912:	b29b      	uxth	r3, r3
 800d914:	f003 0320 	and.w	r3, r3, #32
 800d918:	2b00      	cmp	r3, #0
 800d91a:	bf0c      	ite	eq
 800d91c:	2301      	moveq	r3, #1
 800d91e:	2300      	movne	r3, #0
 800d920:	b2db      	uxtb	r3, r3
 800d922:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00e      	beq.n	800d948 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d92a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d92e:	4413      	add	r3, r2
 800d930:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d932:	8b7a      	ldrh	r2, [r7, #26]
 800d934:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d936:	429a      	cmp	r2, r3
 800d938:	f0c0 80a0 	bcc.w	800da7c <ip4_reass+0x2ac>
 800d93c:	8b7b      	ldrh	r3, [r7, #26]
 800d93e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d942:	4293      	cmp	r3, r2
 800d944:	f200 809a 	bhi.w	800da7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d948:	69fa      	ldr	r2, [r7, #28]
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d94e:	f7ff fdd5 	bl	800d4fc <ip_reass_chain_frag_into_datagram_and_validate>
 800d952:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d95a:	f000 809b 	beq.w	800da94 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d95e:	4b48      	ldr	r3, [pc, #288]	; (800da80 <ip4_reass+0x2b0>)
 800d960:	881a      	ldrh	r2, [r3, #0]
 800d962:	8c3b      	ldrh	r3, [r7, #32]
 800d964:	4413      	add	r3, r2
 800d966:	b29a      	uxth	r2, r3
 800d968:	4b45      	ldr	r3, [pc, #276]	; (800da80 <ip4_reass+0x2b0>)
 800d96a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00d      	beq.n	800d98e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d972:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d976:	4413      	add	r3, r2
 800d978:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97c:	8a7a      	ldrh	r2, [r7, #18]
 800d97e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d982:	7f9b      	ldrb	r3, [r3, #30]
 800d984:	f043 0301 	orr.w	r3, r3, #1
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d171      	bne.n	800da78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	8b9b      	ldrh	r3, [r3, #28]
 800d998:	3314      	adds	r3, #20
 800d99a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	2214      	movs	r2, #20
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b8:	f000 fcf5 	bl	800e3a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d9bc:	8a3b      	ldrh	r3, [r7, #16]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7f6 f9d0 	bl	8003d64 <lwip_htons>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	719a      	strb	r2, [r3, #6]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	2200      	movs	r2, #0
 800d9da:	729a      	strb	r2, [r3, #10]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d9e6:	e00d      	b.n	800da04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d9ee:	2114      	movs	r1, #20
 800d9f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d9f2:	f7f7 fc8f 	bl	8005314 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d9f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7f7 fdd3 	bl	80055a4 <pbuf_cat>
      r = iprh->next_pbuf;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800da04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1ee      	bne.n	800d9e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800da0a:	4b1e      	ldr	r3, [pc, #120]	; (800da84 <ip4_reass+0x2b4>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da10:	429a      	cmp	r2, r3
 800da12:	d102      	bne.n	800da1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800da14:	2300      	movs	r3, #0
 800da16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da18:	e010      	b.n	800da3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800da1a:	4b1a      	ldr	r3, [pc, #104]	; (800da84 <ip4_reass+0x2b4>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da20:	e007      	b.n	800da32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800da22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da28:	429a      	cmp	r2, r3
 800da2a:	d006      	beq.n	800da3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800da2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1f4      	bne.n	800da22 <ip4_reass+0x252>
 800da38:	e000      	b.n	800da3c <ip4_reass+0x26c>
          break;
 800da3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800da3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da40:	f7ff fd2e 	bl	800d4a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7f7 fd73 	bl	8005530 <pbuf_clen>
 800da4a:	4603      	mov	r3, r0
 800da4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800da4e:	4b0c      	ldr	r3, [pc, #48]	; (800da80 <ip4_reass+0x2b0>)
 800da50:	881b      	ldrh	r3, [r3, #0]
 800da52:	8c3a      	ldrh	r2, [r7, #32]
 800da54:	429a      	cmp	r2, r3
 800da56:	d906      	bls.n	800da66 <ip4_reass+0x296>
 800da58:	4b0b      	ldr	r3, [pc, #44]	; (800da88 <ip4_reass+0x2b8>)
 800da5a:	f240 229b 	movw	r2, #667	; 0x29b
 800da5e:	490b      	ldr	r1, [pc, #44]	; (800da8c <ip4_reass+0x2bc>)
 800da60:	480b      	ldr	r0, [pc, #44]	; (800da90 <ip4_reass+0x2c0>)
 800da62:	f000 fbc5 	bl	800e1f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800da66:	4b06      	ldr	r3, [pc, #24]	; (800da80 <ip4_reass+0x2b0>)
 800da68:	881a      	ldrh	r2, [r3, #0]
 800da6a:	8c3b      	ldrh	r3, [r7, #32]
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	b29a      	uxth	r2, r3
 800da70:	4b03      	ldr	r3, [pc, #12]	; (800da80 <ip4_reass+0x2b0>)
 800da72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	e038      	b.n	800daea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800da78:	2300      	movs	r3, #0
 800da7a:	e036      	b.n	800daea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800da7c:	bf00      	nop
 800da7e:	e00a      	b.n	800da96 <ip4_reass+0x2c6>
 800da80:	2000a59c 	.word	0x2000a59c
 800da84:	2000a598 	.word	0x2000a598
 800da88:	0801179c 	.word	0x0801179c
 800da8c:	0801190c 	.word	0x0801190c
 800da90:	080117e4 	.word	0x080117e4
    goto nullreturn_ipr;
 800da94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800da96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <ip4_reass+0x2da>
 800da9c:	4b15      	ldr	r3, [pc, #84]	; (800daf4 <ip4_reass+0x324>)
 800da9e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800daa2:	4915      	ldr	r1, [pc, #84]	; (800daf8 <ip4_reass+0x328>)
 800daa4:	4815      	ldr	r0, [pc, #84]	; (800dafc <ip4_reass+0x32c>)
 800daa6:	f000 fba3 	bl	800e1f0 <iprintf>
  if (ipr->p == NULL) {
 800daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d116      	bne.n	800dae0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dab2:	4b13      	ldr	r3, [pc, #76]	; (800db00 <ip4_reass+0x330>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab8:	429a      	cmp	r2, r3
 800daba:	d006      	beq.n	800daca <ip4_reass+0x2fa>
 800dabc:	4b0d      	ldr	r3, [pc, #52]	; (800daf4 <ip4_reass+0x324>)
 800dabe:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dac2:	4910      	ldr	r1, [pc, #64]	; (800db04 <ip4_reass+0x334>)
 800dac4:	480d      	ldr	r0, [pc, #52]	; (800dafc <ip4_reass+0x32c>)
 800dac6:	f000 fb93 	bl	800e1f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800daca:	2100      	movs	r1, #0
 800dacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dace:	f7ff fce7 	bl	800d4a0 <ip_reass_dequeue_datagram>
 800dad2:	e006      	b.n	800dae2 <ip4_reass+0x312>
    goto nullreturn;
 800dad4:	bf00      	nop
 800dad6:	e004      	b.n	800dae2 <ip4_reass+0x312>
    goto nullreturn;
 800dad8:	bf00      	nop
 800dada:	e002      	b.n	800dae2 <ip4_reass+0x312>
      goto nullreturn;
 800dadc:	bf00      	nop
 800dade:	e000      	b.n	800dae2 <ip4_reass+0x312>
  }

nullreturn:
 800dae0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7f7 fc9c 	bl	8005420 <pbuf_free>
  return NULL;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3738      	adds	r7, #56	; 0x38
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	0801179c 	.word	0x0801179c
 800daf8:	08011928 	.word	0x08011928
 800dafc:	080117e4 	.word	0x080117e4
 800db00:	2000a598 	.word	0x2000a598
 800db04:	08011934 	.word	0x08011934

0800db08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800db0c:	2005      	movs	r0, #5
 800db0e:	f7f6 fda1 	bl	8004654 <memp_malloc>
 800db12:	4603      	mov	r3, r0
}
 800db14:	4618      	mov	r0, r3
 800db16:	bd80      	pop	{r7, pc}

0800db18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d106      	bne.n	800db34 <ip_frag_free_pbuf_custom_ref+0x1c>
 800db26:	4b07      	ldr	r3, [pc, #28]	; (800db44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800db28:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800db2c:	4906      	ldr	r1, [pc, #24]	; (800db48 <ip_frag_free_pbuf_custom_ref+0x30>)
 800db2e:	4807      	ldr	r0, [pc, #28]	; (800db4c <ip_frag_free_pbuf_custom_ref+0x34>)
 800db30:	f000 fb5e 	bl	800e1f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800db34:	6879      	ldr	r1, [r7, #4]
 800db36:	2005      	movs	r0, #5
 800db38:	f7f6 fdfc 	bl	8004734 <memp_free>
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	0801179c 	.word	0x0801179c
 800db48:	08011954 	.word	0x08011954
 800db4c:	080117e4 	.word	0x080117e4

0800db50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d106      	bne.n	800db70 <ipfrag_free_pbuf_custom+0x20>
 800db62:	4b11      	ldr	r3, [pc, #68]	; (800dba8 <ipfrag_free_pbuf_custom+0x58>)
 800db64:	f240 22ce 	movw	r2, #718	; 0x2ce
 800db68:	4910      	ldr	r1, [pc, #64]	; (800dbac <ipfrag_free_pbuf_custom+0x5c>)
 800db6a:	4811      	ldr	r0, [pc, #68]	; (800dbb0 <ipfrag_free_pbuf_custom+0x60>)
 800db6c:	f000 fb40 	bl	800e1f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	429a      	cmp	r2, r3
 800db76:	d006      	beq.n	800db86 <ipfrag_free_pbuf_custom+0x36>
 800db78:	4b0b      	ldr	r3, [pc, #44]	; (800dba8 <ipfrag_free_pbuf_custom+0x58>)
 800db7a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800db7e:	490d      	ldr	r1, [pc, #52]	; (800dbb4 <ipfrag_free_pbuf_custom+0x64>)
 800db80:	480b      	ldr	r0, [pc, #44]	; (800dbb0 <ipfrag_free_pbuf_custom+0x60>)
 800db82:	f000 fb35 	bl	800e1f0 <iprintf>
  if (pcr->original != NULL) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d004      	beq.n	800db98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	695b      	ldr	r3, [r3, #20]
 800db92:	4618      	mov	r0, r3
 800db94:	f7f7 fc44 	bl	8005420 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7ff ffbd 	bl	800db18 <ip_frag_free_pbuf_custom_ref>
}
 800db9e:	bf00      	nop
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	0801179c 	.word	0x0801179c
 800dbac:	08011960 	.word	0x08011960
 800dbb0:	080117e4 	.word	0x080117e4
 800dbb4:	0801196c 	.word	0x0801196c

0800dbb8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b094      	sub	sp, #80	; 0x50
 800dbbc:	af02      	add	r7, sp, #8
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dbce:	3b14      	subs	r3, #20
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	da00      	bge.n	800dbd6 <ip4_frag+0x1e>
 800dbd4:	3307      	adds	r3, #7
 800dbd6:	10db      	asrs	r3, r3, #3
 800dbd8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dbda:	2314      	movs	r3, #20
 800dbdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800dbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	f003 030f 	and.w	r3, r3, #15
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b14      	cmp	r3, #20
 800dbf8:	d002      	beq.n	800dc00 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dbfa:	f06f 0305 	mvn.w	r3, #5
 800dbfe:	e110      	b.n	800de22 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	895b      	ldrh	r3, [r3, #10]
 800dc04:	2b13      	cmp	r3, #19
 800dc06:	d809      	bhi.n	800dc1c <ip4_frag+0x64>
 800dc08:	4b88      	ldr	r3, [pc, #544]	; (800de2c <ip4_frag+0x274>)
 800dc0a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dc0e:	4988      	ldr	r1, [pc, #544]	; (800de30 <ip4_frag+0x278>)
 800dc10:	4888      	ldr	r0, [pc, #544]	; (800de34 <ip4_frag+0x27c>)
 800dc12:	f000 faed 	bl	800e1f0 <iprintf>
 800dc16:	f06f 0305 	mvn.w	r3, #5
 800dc1a:	e102      	b.n	800de22 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1e:	88db      	ldrh	r3, [r3, #6]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7f6 f89e 	bl	8003d64 <lwip_htons>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800dc2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dc36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dc38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	891b      	ldrh	r3, [r3, #8]
 800dc42:	3b14      	subs	r3, #20
 800dc44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800dc48:	e0e1      	b.n	800de0e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dc4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc4c:	00db      	lsls	r3, r3, #3
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dc54:	4293      	cmp	r3, r2
 800dc56:	bf28      	it	cs
 800dc58:	4613      	movcs	r3, r2
 800dc5a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dc5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc60:	2114      	movs	r1, #20
 800dc62:	200e      	movs	r0, #14
 800dc64:	f7f7 f8f8 	bl	8004e58 <pbuf_alloc>
 800dc68:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f000 80d5 	beq.w	800de1c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	895b      	ldrh	r3, [r3, #10]
 800dc76:	2b13      	cmp	r3, #19
 800dc78:	d806      	bhi.n	800dc88 <ip4_frag+0xd0>
 800dc7a:	4b6c      	ldr	r3, [pc, #432]	; (800de2c <ip4_frag+0x274>)
 800dc7c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dc80:	496d      	ldr	r1, [pc, #436]	; (800de38 <ip4_frag+0x280>)
 800dc82:	486c      	ldr	r0, [pc, #432]	; (800de34 <ip4_frag+0x27c>)
 800dc84:	f000 fab4 	bl	800e1f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	2214      	movs	r2, #20
 800dc8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 fb88 	bl	800e3a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800dc9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dc9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800dca2:	e064      	b.n	800dd6e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	895a      	ldrh	r2, [r3, #10]
 800dca8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	895b      	ldrh	r3, [r3, #10]
 800dcb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d906      	bls.n	800dcc6 <ip4_frag+0x10e>
 800dcb8:	4b5c      	ldr	r3, [pc, #368]	; (800de2c <ip4_frag+0x274>)
 800dcba:	f240 322d 	movw	r2, #813	; 0x32d
 800dcbe:	495f      	ldr	r1, [pc, #380]	; (800de3c <ip4_frag+0x284>)
 800dcc0:	485c      	ldr	r0, [pc, #368]	; (800de34 <ip4_frag+0x27c>)
 800dcc2:	f000 fa95 	bl	800e1f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dcc6:	8bfa      	ldrh	r2, [r7, #30]
 800dcc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dccc:	4293      	cmp	r3, r2
 800dcce:	bf28      	it	cs
 800dcd0:	4613      	movcs	r3, r2
 800dcd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dcd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d105      	bne.n	800dcea <ip4_frag+0x132>
        poff = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	60fb      	str	r3, [r7, #12]
        continue;
 800dce8:	e041      	b.n	800dd6e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dcea:	f7ff ff0d 	bl	800db08 <ip_frag_alloc_pbuf_custom_ref>
 800dcee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d103      	bne.n	800dcfe <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dcf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcf8:	f7f7 fb92 	bl	8005420 <pbuf_free>
        goto memerr;
 800dcfc:	e08f      	b.n	800de1e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dcfe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dd04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd06:	4413      	add	r3, r2
 800dd08:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800dd0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dd10:	9201      	str	r2, [sp, #4]
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	4603      	mov	r3, r0
 800dd16:	2241      	movs	r2, #65	; 0x41
 800dd18:	2000      	movs	r0, #0
 800dd1a:	f7f7 f9c7 	bl	80050ac <pbuf_alloced_custom>
 800dd1e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d106      	bne.n	800dd34 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dd26:	69b8      	ldr	r0, [r7, #24]
 800dd28:	f7ff fef6 	bl	800db18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dd2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd2e:	f7f7 fb77 	bl	8005420 <pbuf_free>
        goto memerr;
 800dd32:	e074      	b.n	800de1e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7f7 fc13 	bl	8005560 <pbuf_ref>
      pcr->original = p;
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	4a3f      	ldr	r2, [pc, #252]	; (800de40 <ip4_frag+0x288>)
 800dd44:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dd46:	6979      	ldr	r1, [r7, #20]
 800dd48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd4a:	f7f7 fc2b 	bl	80055a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800dd4e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800dd52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800dd5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d004      	beq.n	800dd6e <ip4_frag+0x1b6>
        poff = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800dd6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d196      	bne.n	800dca4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800dd76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dd78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd7c:	4413      	add	r3, r2
 800dd7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd84:	f1a3 0213 	sub.w	r2, r3, #19
 800dd88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	bfcc      	ite	gt
 800dd90:	2301      	movgt	r3, #1
 800dd92:	2300      	movle	r3, #0
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dd98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dd9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dda0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <ip4_frag+0x1f6>
 800dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d003      	beq.n	800ddb6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ddae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ddb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ddb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7f5 ffd3 	bl	8003d64 <lwip_htons>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ddc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ddc8:	3314      	adds	r3, #20
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7f5 ffc9 	bl	8003d64 <lwip_htons>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dddc:	2200      	movs	r2, #0
 800ddde:	729a      	strb	r2, [r3, #10]
 800dde0:	2200      	movs	r2, #0
 800dde2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddec:	68b8      	ldr	r0, [r7, #8]
 800ddee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ddf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddf2:	f7f7 fb15 	bl	8005420 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ddf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ddfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800de02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800de06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de08:	4413      	add	r3, r2
 800de0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800de0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de12:	2b00      	cmp	r3, #0
 800de14:	f47f af19 	bne.w	800dc4a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	e002      	b.n	800de22 <ip4_frag+0x26a>
      goto memerr;
 800de1c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800de1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de22:	4618      	mov	r0, r3
 800de24:	3748      	adds	r7, #72	; 0x48
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	0801179c 	.word	0x0801179c
 800de30:	08011978 	.word	0x08011978
 800de34:	080117e4 	.word	0x080117e4
 800de38:	08011994 	.word	0x08011994
 800de3c:	080119b4 	.word	0x080119b4
 800de40:	0800db51 	.word	0x0800db51

0800de44 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b086      	sub	sp, #24
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800de4e:	230e      	movs	r3, #14
 800de50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	895b      	ldrh	r3, [r3, #10]
 800de56:	2b0e      	cmp	r3, #14
 800de58:	d96e      	bls.n	800df38 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	7bdb      	ldrb	r3, [r3, #15]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de68:	3301      	adds	r3, #1
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	7b1a      	ldrb	r2, [r3, #12]
 800de7a:	7b5b      	ldrb	r3, [r3, #13]
 800de7c:	021b      	lsls	r3, r3, #8
 800de7e:	4313      	orrs	r3, r2
 800de80:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	f003 0301 	and.w	r3, r3, #1
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d023      	beq.n	800ded6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	2b01      	cmp	r3, #1
 800de94:	d10f      	bne.n	800deb6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	785b      	ldrb	r3, [r3, #1]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d11b      	bne.n	800ded6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dea2:	2b5e      	cmp	r3, #94	; 0x5e
 800dea4:	d117      	bne.n	800ded6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	7b5b      	ldrb	r3, [r3, #13]
 800deaa:	f043 0310 	orr.w	r3, r3, #16
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	735a      	strb	r2, [r3, #13]
 800deb4:	e00f      	b.n	800ded6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	2206      	movs	r2, #6
 800deba:	4928      	ldr	r1, [pc, #160]	; (800df5c <ethernet_input+0x118>)
 800debc:	4618      	mov	r0, r3
 800debe:	f000 f9ec 	bl	800e29a <memcmp>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d106      	bne.n	800ded6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	7b5b      	ldrb	r3, [r3, #13]
 800decc:	f043 0308 	orr.w	r3, r3, #8
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ded6:	89fb      	ldrh	r3, [r7, #14]
 800ded8:	2b08      	cmp	r3, #8
 800deda:	d003      	beq.n	800dee4 <ethernet_input+0xa0>
 800dedc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800dee0:	d014      	beq.n	800df0c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800dee2:	e032      	b.n	800df4a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deea:	f003 0308 	and.w	r3, r3, #8
 800deee:	2b00      	cmp	r3, #0
 800def0:	d024      	beq.n	800df3c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800def2:	8afb      	ldrh	r3, [r7, #22]
 800def4:	4619      	mov	r1, r3
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7f7 fa0c 	bl	8005314 <pbuf_remove_header>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d11e      	bne.n	800df40 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800df02:	6839      	ldr	r1, [r7, #0]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7fe ff21 	bl	800cd4c <ip4_input>
      break;
 800df0a:	e013      	b.n	800df34 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df12:	f003 0308 	and.w	r3, r3, #8
 800df16:	2b00      	cmp	r3, #0
 800df18:	d014      	beq.n	800df44 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800df1a:	8afb      	ldrh	r3, [r7, #22]
 800df1c:	4619      	mov	r1, r3
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7f7 f9f8 	bl	8005314 <pbuf_remove_header>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10e      	bne.n	800df48 <ethernet_input+0x104>
        etharp_input(p, netif);
 800df2a:	6839      	ldr	r1, [r7, #0]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7fe f8c1 	bl	800c0b4 <etharp_input>
      break;
 800df32:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	e00c      	b.n	800df52 <ethernet_input+0x10e>
    goto free_and_return;
 800df38:	bf00      	nop
 800df3a:	e006      	b.n	800df4a <ethernet_input+0x106>
        goto free_and_return;
 800df3c:	bf00      	nop
 800df3e:	e004      	b.n	800df4a <ethernet_input+0x106>
        goto free_and_return;
 800df40:	bf00      	nop
 800df42:	e002      	b.n	800df4a <ethernet_input+0x106>
        goto free_and_return;
 800df44:	bf00      	nop
 800df46:	e000      	b.n	800df4a <ethernet_input+0x106>
        goto free_and_return;
 800df48:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f7f7 fa68 	bl	8005420 <pbuf_free>
  return ERR_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	08011b48 	.word	0x08011b48

0800df60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
 800df6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800df6e:	8c3b      	ldrh	r3, [r7, #32]
 800df70:	4618      	mov	r0, r3
 800df72:	f7f5 fef7 	bl	8003d64 <lwip_htons>
 800df76:	4603      	mov	r3, r0
 800df78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800df7a:	210e      	movs	r1, #14
 800df7c:	68b8      	ldr	r0, [r7, #8]
 800df7e:	f7f7 f9b9 	bl	80052f4 <pbuf_add_header>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d125      	bne.n	800dfd4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	8afa      	ldrh	r2, [r7, #22]
 800df92:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	2206      	movs	r2, #6
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f000 fa03 	bl	800e3a6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	3306      	adds	r3, #6
 800dfa4:	2206      	movs	r2, #6
 800dfa6:	6879      	ldr	r1, [r7, #4]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f000 f9fc 	bl	800e3a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dfb4:	2b06      	cmp	r3, #6
 800dfb6:	d006      	beq.n	800dfc6 <ethernet_output+0x66>
 800dfb8:	4b0a      	ldr	r3, [pc, #40]	; (800dfe4 <ethernet_output+0x84>)
 800dfba:	f44f 7299 	mov.w	r2, #306	; 0x132
 800dfbe:	490a      	ldr	r1, [pc, #40]	; (800dfe8 <ethernet_output+0x88>)
 800dfc0:	480a      	ldr	r0, [pc, #40]	; (800dfec <ethernet_output+0x8c>)
 800dfc2:	f000 f915 	bl	800e1f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	68b9      	ldr	r1, [r7, #8]
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	4798      	blx	r3
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	e002      	b.n	800dfda <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800dfd4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800dfd6:	f06f 0301 	mvn.w	r3, #1
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3718      	adds	r7, #24
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	080119c4 	.word	0x080119c4
 800dfe8:	080119fc 	.word	0x080119fc
 800dfec:	08011a30 	.word	0x08011a30

0800dff0 <rand>:
 800dff0:	4b16      	ldr	r3, [pc, #88]	; (800e04c <rand+0x5c>)
 800dff2:	b510      	push	{r4, lr}
 800dff4:	681c      	ldr	r4, [r3, #0]
 800dff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dff8:	b9b3      	cbnz	r3, 800e028 <rand+0x38>
 800dffa:	2018      	movs	r0, #24
 800dffc:	f000 fa4c 	bl	800e498 <malloc>
 800e000:	4602      	mov	r2, r0
 800e002:	6320      	str	r0, [r4, #48]	; 0x30
 800e004:	b920      	cbnz	r0, 800e010 <rand+0x20>
 800e006:	4b12      	ldr	r3, [pc, #72]	; (800e050 <rand+0x60>)
 800e008:	4812      	ldr	r0, [pc, #72]	; (800e054 <rand+0x64>)
 800e00a:	2152      	movs	r1, #82	; 0x52
 800e00c:	f000 f9da 	bl	800e3c4 <__assert_func>
 800e010:	4911      	ldr	r1, [pc, #68]	; (800e058 <rand+0x68>)
 800e012:	4b12      	ldr	r3, [pc, #72]	; (800e05c <rand+0x6c>)
 800e014:	e9c0 1300 	strd	r1, r3, [r0]
 800e018:	4b11      	ldr	r3, [pc, #68]	; (800e060 <rand+0x70>)
 800e01a:	6083      	str	r3, [r0, #8]
 800e01c:	230b      	movs	r3, #11
 800e01e:	8183      	strh	r3, [r0, #12]
 800e020:	2100      	movs	r1, #0
 800e022:	2001      	movs	r0, #1
 800e024:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e028:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e02a:	480e      	ldr	r0, [pc, #56]	; (800e064 <rand+0x74>)
 800e02c:	690b      	ldr	r3, [r1, #16]
 800e02e:	694c      	ldr	r4, [r1, #20]
 800e030:	4a0d      	ldr	r2, [pc, #52]	; (800e068 <rand+0x78>)
 800e032:	4358      	muls	r0, r3
 800e034:	fb02 0004 	mla	r0, r2, r4, r0
 800e038:	fba3 3202 	umull	r3, r2, r3, r2
 800e03c:	3301      	adds	r3, #1
 800e03e:	eb40 0002 	adc.w	r0, r0, r2
 800e042:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e046:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e04a:	bd10      	pop	{r4, pc}
 800e04c:	20000084 	.word	0x20000084
 800e050:	08011b56 	.word	0x08011b56
 800e054:	08011b6d 	.word	0x08011b6d
 800e058:	abcd330e 	.word	0xabcd330e
 800e05c:	e66d1234 	.word	0xe66d1234
 800e060:	0005deec 	.word	0x0005deec
 800e064:	5851f42d 	.word	0x5851f42d
 800e068:	4c957f2d 	.word	0x4c957f2d

0800e06c <std>:
 800e06c:	2300      	movs	r3, #0
 800e06e:	b510      	push	{r4, lr}
 800e070:	4604      	mov	r4, r0
 800e072:	e9c0 3300 	strd	r3, r3, [r0]
 800e076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e07a:	6083      	str	r3, [r0, #8]
 800e07c:	8181      	strh	r1, [r0, #12]
 800e07e:	6643      	str	r3, [r0, #100]	; 0x64
 800e080:	81c2      	strh	r2, [r0, #14]
 800e082:	6183      	str	r3, [r0, #24]
 800e084:	4619      	mov	r1, r3
 800e086:	2208      	movs	r2, #8
 800e088:	305c      	adds	r0, #92	; 0x5c
 800e08a:	f000 f916 	bl	800e2ba <memset>
 800e08e:	4b0d      	ldr	r3, [pc, #52]	; (800e0c4 <std+0x58>)
 800e090:	6263      	str	r3, [r4, #36]	; 0x24
 800e092:	4b0d      	ldr	r3, [pc, #52]	; (800e0c8 <std+0x5c>)
 800e094:	62a3      	str	r3, [r4, #40]	; 0x28
 800e096:	4b0d      	ldr	r3, [pc, #52]	; (800e0cc <std+0x60>)
 800e098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e09a:	4b0d      	ldr	r3, [pc, #52]	; (800e0d0 <std+0x64>)
 800e09c:	6323      	str	r3, [r4, #48]	; 0x30
 800e09e:	4b0d      	ldr	r3, [pc, #52]	; (800e0d4 <std+0x68>)
 800e0a0:	6224      	str	r4, [r4, #32]
 800e0a2:	429c      	cmp	r4, r3
 800e0a4:	d006      	beq.n	800e0b4 <std+0x48>
 800e0a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e0aa:	4294      	cmp	r4, r2
 800e0ac:	d002      	beq.n	800e0b4 <std+0x48>
 800e0ae:	33d0      	adds	r3, #208	; 0xd0
 800e0b0:	429c      	cmp	r4, r3
 800e0b2:	d105      	bne.n	800e0c0 <std+0x54>
 800e0b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0bc:	f000 b970 	b.w	800e3a0 <__retarget_lock_init_recursive>
 800e0c0:	bd10      	pop	{r4, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0800e215 	.word	0x0800e215
 800e0c8:	0800e237 	.word	0x0800e237
 800e0cc:	0800e26f 	.word	0x0800e26f
 800e0d0:	0800e293 	.word	0x0800e293
 800e0d4:	2000a5a0 	.word	0x2000a5a0

0800e0d8 <stdio_exit_handler>:
 800e0d8:	4a02      	ldr	r2, [pc, #8]	; (800e0e4 <stdio_exit_handler+0xc>)
 800e0da:	4903      	ldr	r1, [pc, #12]	; (800e0e8 <stdio_exit_handler+0x10>)
 800e0dc:	4803      	ldr	r0, [pc, #12]	; (800e0ec <stdio_exit_handler+0x14>)
 800e0de:	f000 b869 	b.w	800e1b4 <_fwalk_sglue>
 800e0e2:	bf00      	nop
 800e0e4:	2000002c 	.word	0x2000002c
 800e0e8:	0800ecb5 	.word	0x0800ecb5
 800e0ec:	20000038 	.word	0x20000038

0800e0f0 <cleanup_stdio>:
 800e0f0:	6841      	ldr	r1, [r0, #4]
 800e0f2:	4b0c      	ldr	r3, [pc, #48]	; (800e124 <cleanup_stdio+0x34>)
 800e0f4:	4299      	cmp	r1, r3
 800e0f6:	b510      	push	{r4, lr}
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	d001      	beq.n	800e100 <cleanup_stdio+0x10>
 800e0fc:	f000 fdda 	bl	800ecb4 <_fflush_r>
 800e100:	68a1      	ldr	r1, [r4, #8]
 800e102:	4b09      	ldr	r3, [pc, #36]	; (800e128 <cleanup_stdio+0x38>)
 800e104:	4299      	cmp	r1, r3
 800e106:	d002      	beq.n	800e10e <cleanup_stdio+0x1e>
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 fdd3 	bl	800ecb4 <_fflush_r>
 800e10e:	68e1      	ldr	r1, [r4, #12]
 800e110:	4b06      	ldr	r3, [pc, #24]	; (800e12c <cleanup_stdio+0x3c>)
 800e112:	4299      	cmp	r1, r3
 800e114:	d004      	beq.n	800e120 <cleanup_stdio+0x30>
 800e116:	4620      	mov	r0, r4
 800e118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e11c:	f000 bdca 	b.w	800ecb4 <_fflush_r>
 800e120:	bd10      	pop	{r4, pc}
 800e122:	bf00      	nop
 800e124:	2000a5a0 	.word	0x2000a5a0
 800e128:	2000a608 	.word	0x2000a608
 800e12c:	2000a670 	.word	0x2000a670

0800e130 <global_stdio_init.part.0>:
 800e130:	b510      	push	{r4, lr}
 800e132:	4b0b      	ldr	r3, [pc, #44]	; (800e160 <global_stdio_init.part.0+0x30>)
 800e134:	4c0b      	ldr	r4, [pc, #44]	; (800e164 <global_stdio_init.part.0+0x34>)
 800e136:	4a0c      	ldr	r2, [pc, #48]	; (800e168 <global_stdio_init.part.0+0x38>)
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	4620      	mov	r0, r4
 800e13c:	2200      	movs	r2, #0
 800e13e:	2104      	movs	r1, #4
 800e140:	f7ff ff94 	bl	800e06c <std>
 800e144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e148:	2201      	movs	r2, #1
 800e14a:	2109      	movs	r1, #9
 800e14c:	f7ff ff8e 	bl	800e06c <std>
 800e150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e154:	2202      	movs	r2, #2
 800e156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e15a:	2112      	movs	r1, #18
 800e15c:	f7ff bf86 	b.w	800e06c <std>
 800e160:	2000a6d8 	.word	0x2000a6d8
 800e164:	2000a5a0 	.word	0x2000a5a0
 800e168:	0800e0d9 	.word	0x0800e0d9

0800e16c <__sfp_lock_acquire>:
 800e16c:	4801      	ldr	r0, [pc, #4]	; (800e174 <__sfp_lock_acquire+0x8>)
 800e16e:	f000 b918 	b.w	800e3a2 <__retarget_lock_acquire_recursive>
 800e172:	bf00      	nop
 800e174:	2000a6e1 	.word	0x2000a6e1

0800e178 <__sfp_lock_release>:
 800e178:	4801      	ldr	r0, [pc, #4]	; (800e180 <__sfp_lock_release+0x8>)
 800e17a:	f000 b913 	b.w	800e3a4 <__retarget_lock_release_recursive>
 800e17e:	bf00      	nop
 800e180:	2000a6e1 	.word	0x2000a6e1

0800e184 <__sinit>:
 800e184:	b510      	push	{r4, lr}
 800e186:	4604      	mov	r4, r0
 800e188:	f7ff fff0 	bl	800e16c <__sfp_lock_acquire>
 800e18c:	6a23      	ldr	r3, [r4, #32]
 800e18e:	b11b      	cbz	r3, 800e198 <__sinit+0x14>
 800e190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e194:	f7ff bff0 	b.w	800e178 <__sfp_lock_release>
 800e198:	4b04      	ldr	r3, [pc, #16]	; (800e1ac <__sinit+0x28>)
 800e19a:	6223      	str	r3, [r4, #32]
 800e19c:	4b04      	ldr	r3, [pc, #16]	; (800e1b0 <__sinit+0x2c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1f5      	bne.n	800e190 <__sinit+0xc>
 800e1a4:	f7ff ffc4 	bl	800e130 <global_stdio_init.part.0>
 800e1a8:	e7f2      	b.n	800e190 <__sinit+0xc>
 800e1aa:	bf00      	nop
 800e1ac:	0800e0f1 	.word	0x0800e0f1
 800e1b0:	2000a6d8 	.word	0x2000a6d8

0800e1b4 <_fwalk_sglue>:
 800e1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	4688      	mov	r8, r1
 800e1bc:	4614      	mov	r4, r2
 800e1be:	2600      	movs	r6, #0
 800e1c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1c4:	f1b9 0901 	subs.w	r9, r9, #1
 800e1c8:	d505      	bpl.n	800e1d6 <_fwalk_sglue+0x22>
 800e1ca:	6824      	ldr	r4, [r4, #0]
 800e1cc:	2c00      	cmp	r4, #0
 800e1ce:	d1f7      	bne.n	800e1c0 <_fwalk_sglue+0xc>
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d6:	89ab      	ldrh	r3, [r5, #12]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d907      	bls.n	800e1ec <_fwalk_sglue+0x38>
 800e1dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	d003      	beq.n	800e1ec <_fwalk_sglue+0x38>
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	4638      	mov	r0, r7
 800e1e8:	47c0      	blx	r8
 800e1ea:	4306      	orrs	r6, r0
 800e1ec:	3568      	adds	r5, #104	; 0x68
 800e1ee:	e7e9      	b.n	800e1c4 <_fwalk_sglue+0x10>

0800e1f0 <iprintf>:
 800e1f0:	b40f      	push	{r0, r1, r2, r3}
 800e1f2:	b507      	push	{r0, r1, r2, lr}
 800e1f4:	4906      	ldr	r1, [pc, #24]	; (800e210 <iprintf+0x20>)
 800e1f6:	ab04      	add	r3, sp, #16
 800e1f8:	6808      	ldr	r0, [r1, #0]
 800e1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1fe:	6881      	ldr	r1, [r0, #8]
 800e200:	9301      	str	r3, [sp, #4]
 800e202:	f000 fa27 	bl	800e654 <_vfiprintf_r>
 800e206:	b003      	add	sp, #12
 800e208:	f85d eb04 	ldr.w	lr, [sp], #4
 800e20c:	b004      	add	sp, #16
 800e20e:	4770      	bx	lr
 800e210:	20000084 	.word	0x20000084

0800e214 <__sread>:
 800e214:	b510      	push	{r4, lr}
 800e216:	460c      	mov	r4, r1
 800e218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e21c:	f000 f878 	bl	800e310 <_read_r>
 800e220:	2800      	cmp	r0, #0
 800e222:	bfab      	itete	ge
 800e224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e226:	89a3      	ldrhlt	r3, [r4, #12]
 800e228:	181b      	addge	r3, r3, r0
 800e22a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e22e:	bfac      	ite	ge
 800e230:	6563      	strge	r3, [r4, #84]	; 0x54
 800e232:	81a3      	strhlt	r3, [r4, #12]
 800e234:	bd10      	pop	{r4, pc}

0800e236 <__swrite>:
 800e236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23a:	461f      	mov	r7, r3
 800e23c:	898b      	ldrh	r3, [r1, #12]
 800e23e:	05db      	lsls	r3, r3, #23
 800e240:	4605      	mov	r5, r0
 800e242:	460c      	mov	r4, r1
 800e244:	4616      	mov	r6, r2
 800e246:	d505      	bpl.n	800e254 <__swrite+0x1e>
 800e248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e24c:	2302      	movs	r3, #2
 800e24e:	2200      	movs	r2, #0
 800e250:	f000 f84c 	bl	800e2ec <_lseek_r>
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e25a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e25e:	81a3      	strh	r3, [r4, #12]
 800e260:	4632      	mov	r2, r6
 800e262:	463b      	mov	r3, r7
 800e264:	4628      	mov	r0, r5
 800e266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e26a:	f000 b863 	b.w	800e334 <_write_r>

0800e26e <__sseek>:
 800e26e:	b510      	push	{r4, lr}
 800e270:	460c      	mov	r4, r1
 800e272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e276:	f000 f839 	bl	800e2ec <_lseek_r>
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	bf15      	itete	ne
 800e280:	6560      	strne	r0, [r4, #84]	; 0x54
 800e282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e28a:	81a3      	strheq	r3, [r4, #12]
 800e28c:	bf18      	it	ne
 800e28e:	81a3      	strhne	r3, [r4, #12]
 800e290:	bd10      	pop	{r4, pc}

0800e292 <__sclose>:
 800e292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e296:	f000 b819 	b.w	800e2cc <_close_r>

0800e29a <memcmp>:
 800e29a:	b510      	push	{r4, lr}
 800e29c:	3901      	subs	r1, #1
 800e29e:	4402      	add	r2, r0
 800e2a0:	4290      	cmp	r0, r2
 800e2a2:	d101      	bne.n	800e2a8 <memcmp+0xe>
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	e005      	b.n	800e2b4 <memcmp+0x1a>
 800e2a8:	7803      	ldrb	r3, [r0, #0]
 800e2aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2ae:	42a3      	cmp	r3, r4
 800e2b0:	d001      	beq.n	800e2b6 <memcmp+0x1c>
 800e2b2:	1b18      	subs	r0, r3, r4
 800e2b4:	bd10      	pop	{r4, pc}
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	e7f2      	b.n	800e2a0 <memcmp+0x6>

0800e2ba <memset>:
 800e2ba:	4402      	add	r2, r0
 800e2bc:	4603      	mov	r3, r0
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d100      	bne.n	800e2c4 <memset+0xa>
 800e2c2:	4770      	bx	lr
 800e2c4:	f803 1b01 	strb.w	r1, [r3], #1
 800e2c8:	e7f9      	b.n	800e2be <memset+0x4>
	...

0800e2cc <_close_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4d06      	ldr	r5, [pc, #24]	; (800e2e8 <_close_r+0x1c>)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	f7f2 fb17 	bl	800090a <_close>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d102      	bne.n	800e2e6 <_close_r+0x1a>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	b103      	cbz	r3, 800e2e6 <_close_r+0x1a>
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	2000a6dc 	.word	0x2000a6dc

0800e2ec <_lseek_r>:
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	4d07      	ldr	r5, [pc, #28]	; (800e30c <_lseek_r+0x20>)
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	4608      	mov	r0, r1
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	602a      	str	r2, [r5, #0]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	f7f2 fb2c 	bl	8000958 <_lseek>
 800e300:	1c43      	adds	r3, r0, #1
 800e302:	d102      	bne.n	800e30a <_lseek_r+0x1e>
 800e304:	682b      	ldr	r3, [r5, #0]
 800e306:	b103      	cbz	r3, 800e30a <_lseek_r+0x1e>
 800e308:	6023      	str	r3, [r4, #0]
 800e30a:	bd38      	pop	{r3, r4, r5, pc}
 800e30c:	2000a6dc 	.word	0x2000a6dc

0800e310 <_read_r>:
 800e310:	b538      	push	{r3, r4, r5, lr}
 800e312:	4d07      	ldr	r5, [pc, #28]	; (800e330 <_read_r+0x20>)
 800e314:	4604      	mov	r4, r0
 800e316:	4608      	mov	r0, r1
 800e318:	4611      	mov	r1, r2
 800e31a:	2200      	movs	r2, #0
 800e31c:	602a      	str	r2, [r5, #0]
 800e31e:	461a      	mov	r2, r3
 800e320:	f7f2 faba 	bl	8000898 <_read>
 800e324:	1c43      	adds	r3, r0, #1
 800e326:	d102      	bne.n	800e32e <_read_r+0x1e>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	b103      	cbz	r3, 800e32e <_read_r+0x1e>
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	2000a6dc 	.word	0x2000a6dc

0800e334 <_write_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4d07      	ldr	r5, [pc, #28]	; (800e354 <_write_r+0x20>)
 800e338:	4604      	mov	r4, r0
 800e33a:	4608      	mov	r0, r1
 800e33c:	4611      	mov	r1, r2
 800e33e:	2200      	movs	r2, #0
 800e340:	602a      	str	r2, [r5, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	f7f2 fac5 	bl	80008d2 <_write>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d102      	bne.n	800e352 <_write_r+0x1e>
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	b103      	cbz	r3, 800e352 <_write_r+0x1e>
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	2000a6dc 	.word	0x2000a6dc

0800e358 <__libc_init_array>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	4d0d      	ldr	r5, [pc, #52]	; (800e390 <__libc_init_array+0x38>)
 800e35c:	4c0d      	ldr	r4, [pc, #52]	; (800e394 <__libc_init_array+0x3c>)
 800e35e:	1b64      	subs	r4, r4, r5
 800e360:	10a4      	asrs	r4, r4, #2
 800e362:	2600      	movs	r6, #0
 800e364:	42a6      	cmp	r6, r4
 800e366:	d109      	bne.n	800e37c <__libc_init_array+0x24>
 800e368:	4d0b      	ldr	r5, [pc, #44]	; (800e398 <__libc_init_array+0x40>)
 800e36a:	4c0c      	ldr	r4, [pc, #48]	; (800e39c <__libc_init_array+0x44>)
 800e36c:	f000 fe52 	bl	800f014 <_init>
 800e370:	1b64      	subs	r4, r4, r5
 800e372:	10a4      	asrs	r4, r4, #2
 800e374:	2600      	movs	r6, #0
 800e376:	42a6      	cmp	r6, r4
 800e378:	d105      	bne.n	800e386 <__libc_init_array+0x2e>
 800e37a:	bd70      	pop	{r4, r5, r6, pc}
 800e37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e380:	4798      	blx	r3
 800e382:	3601      	adds	r6, #1
 800e384:	e7ee      	b.n	800e364 <__libc_init_array+0xc>
 800e386:	f855 3b04 	ldr.w	r3, [r5], #4
 800e38a:	4798      	blx	r3
 800e38c:	3601      	adds	r6, #1
 800e38e:	e7f2      	b.n	800e376 <__libc_init_array+0x1e>
 800e390:	08011c3c 	.word	0x08011c3c
 800e394:	08011c3c 	.word	0x08011c3c
 800e398:	08011c3c 	.word	0x08011c3c
 800e39c:	08011c40 	.word	0x08011c40

0800e3a0 <__retarget_lock_init_recursive>:
 800e3a0:	4770      	bx	lr

0800e3a2 <__retarget_lock_acquire_recursive>:
 800e3a2:	4770      	bx	lr

0800e3a4 <__retarget_lock_release_recursive>:
 800e3a4:	4770      	bx	lr

0800e3a6 <memcpy>:
 800e3a6:	440a      	add	r2, r1
 800e3a8:	4291      	cmp	r1, r2
 800e3aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3ae:	d100      	bne.n	800e3b2 <memcpy+0xc>
 800e3b0:	4770      	bx	lr
 800e3b2:	b510      	push	{r4, lr}
 800e3b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3bc:	4291      	cmp	r1, r2
 800e3be:	d1f9      	bne.n	800e3b4 <memcpy+0xe>
 800e3c0:	bd10      	pop	{r4, pc}
	...

0800e3c4 <__assert_func>:
 800e3c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3c6:	4614      	mov	r4, r2
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4b09      	ldr	r3, [pc, #36]	; (800e3f0 <__assert_func+0x2c>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	68d8      	ldr	r0, [r3, #12]
 800e3d2:	b14c      	cbz	r4, 800e3e8 <__assert_func+0x24>
 800e3d4:	4b07      	ldr	r3, [pc, #28]	; (800e3f4 <__assert_func+0x30>)
 800e3d6:	9100      	str	r1, [sp, #0]
 800e3d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3dc:	4906      	ldr	r1, [pc, #24]	; (800e3f8 <__assert_func+0x34>)
 800e3de:	462b      	mov	r3, r5
 800e3e0:	f000 fc90 	bl	800ed04 <fiprintf>
 800e3e4:	f000 fd46 	bl	800ee74 <abort>
 800e3e8:	4b04      	ldr	r3, [pc, #16]	; (800e3fc <__assert_func+0x38>)
 800e3ea:	461c      	mov	r4, r3
 800e3ec:	e7f3      	b.n	800e3d6 <__assert_func+0x12>
 800e3ee:	bf00      	nop
 800e3f0:	20000084 	.word	0x20000084
 800e3f4:	08011bc5 	.word	0x08011bc5
 800e3f8:	08011bd2 	.word	0x08011bd2
 800e3fc:	08011c00 	.word	0x08011c00

0800e400 <_free_r>:
 800e400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e402:	2900      	cmp	r1, #0
 800e404:	d044      	beq.n	800e490 <_free_r+0x90>
 800e406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e40a:	9001      	str	r0, [sp, #4]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f1a1 0404 	sub.w	r4, r1, #4
 800e412:	bfb8      	it	lt
 800e414:	18e4      	addlt	r4, r4, r3
 800e416:	f000 f8e7 	bl	800e5e8 <__malloc_lock>
 800e41a:	4a1e      	ldr	r2, [pc, #120]	; (800e494 <_free_r+0x94>)
 800e41c:	9801      	ldr	r0, [sp, #4]
 800e41e:	6813      	ldr	r3, [r2, #0]
 800e420:	b933      	cbnz	r3, 800e430 <_free_r+0x30>
 800e422:	6063      	str	r3, [r4, #4]
 800e424:	6014      	str	r4, [r2, #0]
 800e426:	b003      	add	sp, #12
 800e428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e42c:	f000 b8e2 	b.w	800e5f4 <__malloc_unlock>
 800e430:	42a3      	cmp	r3, r4
 800e432:	d908      	bls.n	800e446 <_free_r+0x46>
 800e434:	6825      	ldr	r5, [r4, #0]
 800e436:	1961      	adds	r1, r4, r5
 800e438:	428b      	cmp	r3, r1
 800e43a:	bf01      	itttt	eq
 800e43c:	6819      	ldreq	r1, [r3, #0]
 800e43e:	685b      	ldreq	r3, [r3, #4]
 800e440:	1949      	addeq	r1, r1, r5
 800e442:	6021      	streq	r1, [r4, #0]
 800e444:	e7ed      	b.n	800e422 <_free_r+0x22>
 800e446:	461a      	mov	r2, r3
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	b10b      	cbz	r3, 800e450 <_free_r+0x50>
 800e44c:	42a3      	cmp	r3, r4
 800e44e:	d9fa      	bls.n	800e446 <_free_r+0x46>
 800e450:	6811      	ldr	r1, [r2, #0]
 800e452:	1855      	adds	r5, r2, r1
 800e454:	42a5      	cmp	r5, r4
 800e456:	d10b      	bne.n	800e470 <_free_r+0x70>
 800e458:	6824      	ldr	r4, [r4, #0]
 800e45a:	4421      	add	r1, r4
 800e45c:	1854      	adds	r4, r2, r1
 800e45e:	42a3      	cmp	r3, r4
 800e460:	6011      	str	r1, [r2, #0]
 800e462:	d1e0      	bne.n	800e426 <_free_r+0x26>
 800e464:	681c      	ldr	r4, [r3, #0]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	6053      	str	r3, [r2, #4]
 800e46a:	440c      	add	r4, r1
 800e46c:	6014      	str	r4, [r2, #0]
 800e46e:	e7da      	b.n	800e426 <_free_r+0x26>
 800e470:	d902      	bls.n	800e478 <_free_r+0x78>
 800e472:	230c      	movs	r3, #12
 800e474:	6003      	str	r3, [r0, #0]
 800e476:	e7d6      	b.n	800e426 <_free_r+0x26>
 800e478:	6825      	ldr	r5, [r4, #0]
 800e47a:	1961      	adds	r1, r4, r5
 800e47c:	428b      	cmp	r3, r1
 800e47e:	bf04      	itt	eq
 800e480:	6819      	ldreq	r1, [r3, #0]
 800e482:	685b      	ldreq	r3, [r3, #4]
 800e484:	6063      	str	r3, [r4, #4]
 800e486:	bf04      	itt	eq
 800e488:	1949      	addeq	r1, r1, r5
 800e48a:	6021      	streq	r1, [r4, #0]
 800e48c:	6054      	str	r4, [r2, #4]
 800e48e:	e7ca      	b.n	800e426 <_free_r+0x26>
 800e490:	b003      	add	sp, #12
 800e492:	bd30      	pop	{r4, r5, pc}
 800e494:	2000a6e4 	.word	0x2000a6e4

0800e498 <malloc>:
 800e498:	4b02      	ldr	r3, [pc, #8]	; (800e4a4 <malloc+0xc>)
 800e49a:	4601      	mov	r1, r0
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	f000 b823 	b.w	800e4e8 <_malloc_r>
 800e4a2:	bf00      	nop
 800e4a4:	20000084 	.word	0x20000084

0800e4a8 <sbrk_aligned>:
 800e4a8:	b570      	push	{r4, r5, r6, lr}
 800e4aa:	4e0e      	ldr	r6, [pc, #56]	; (800e4e4 <sbrk_aligned+0x3c>)
 800e4ac:	460c      	mov	r4, r1
 800e4ae:	6831      	ldr	r1, [r6, #0]
 800e4b0:	4605      	mov	r5, r0
 800e4b2:	b911      	cbnz	r1, 800e4ba <sbrk_aligned+0x12>
 800e4b4:	f000 fcce 	bl	800ee54 <_sbrk_r>
 800e4b8:	6030      	str	r0, [r6, #0]
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f000 fcc9 	bl	800ee54 <_sbrk_r>
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	d00a      	beq.n	800e4dc <sbrk_aligned+0x34>
 800e4c6:	1cc4      	adds	r4, r0, #3
 800e4c8:	f024 0403 	bic.w	r4, r4, #3
 800e4cc:	42a0      	cmp	r0, r4
 800e4ce:	d007      	beq.n	800e4e0 <sbrk_aligned+0x38>
 800e4d0:	1a21      	subs	r1, r4, r0
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f000 fcbe 	bl	800ee54 <_sbrk_r>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	d101      	bne.n	800e4e0 <sbrk_aligned+0x38>
 800e4dc:	f04f 34ff 	mov.w	r4, #4294967295
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	bd70      	pop	{r4, r5, r6, pc}
 800e4e4:	2000a6e8 	.word	0x2000a6e8

0800e4e8 <_malloc_r>:
 800e4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	1ccd      	adds	r5, r1, #3
 800e4ee:	f025 0503 	bic.w	r5, r5, #3
 800e4f2:	3508      	adds	r5, #8
 800e4f4:	2d0c      	cmp	r5, #12
 800e4f6:	bf38      	it	cc
 800e4f8:	250c      	movcc	r5, #12
 800e4fa:	2d00      	cmp	r5, #0
 800e4fc:	4607      	mov	r7, r0
 800e4fe:	db01      	blt.n	800e504 <_malloc_r+0x1c>
 800e500:	42a9      	cmp	r1, r5
 800e502:	d905      	bls.n	800e510 <_malloc_r+0x28>
 800e504:	230c      	movs	r3, #12
 800e506:	603b      	str	r3, [r7, #0]
 800e508:	2600      	movs	r6, #0
 800e50a:	4630      	mov	r0, r6
 800e50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e510:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e5e4 <_malloc_r+0xfc>
 800e514:	f000 f868 	bl	800e5e8 <__malloc_lock>
 800e518:	f8d8 3000 	ldr.w	r3, [r8]
 800e51c:	461c      	mov	r4, r3
 800e51e:	bb5c      	cbnz	r4, 800e578 <_malloc_r+0x90>
 800e520:	4629      	mov	r1, r5
 800e522:	4638      	mov	r0, r7
 800e524:	f7ff ffc0 	bl	800e4a8 <sbrk_aligned>
 800e528:	1c43      	adds	r3, r0, #1
 800e52a:	4604      	mov	r4, r0
 800e52c:	d155      	bne.n	800e5da <_malloc_r+0xf2>
 800e52e:	f8d8 4000 	ldr.w	r4, [r8]
 800e532:	4626      	mov	r6, r4
 800e534:	2e00      	cmp	r6, #0
 800e536:	d145      	bne.n	800e5c4 <_malloc_r+0xdc>
 800e538:	2c00      	cmp	r4, #0
 800e53a:	d048      	beq.n	800e5ce <_malloc_r+0xe6>
 800e53c:	6823      	ldr	r3, [r4, #0]
 800e53e:	4631      	mov	r1, r6
 800e540:	4638      	mov	r0, r7
 800e542:	eb04 0903 	add.w	r9, r4, r3
 800e546:	f000 fc85 	bl	800ee54 <_sbrk_r>
 800e54a:	4581      	cmp	r9, r0
 800e54c:	d13f      	bne.n	800e5ce <_malloc_r+0xe6>
 800e54e:	6821      	ldr	r1, [r4, #0]
 800e550:	1a6d      	subs	r5, r5, r1
 800e552:	4629      	mov	r1, r5
 800e554:	4638      	mov	r0, r7
 800e556:	f7ff ffa7 	bl	800e4a8 <sbrk_aligned>
 800e55a:	3001      	adds	r0, #1
 800e55c:	d037      	beq.n	800e5ce <_malloc_r+0xe6>
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	442b      	add	r3, r5
 800e562:	6023      	str	r3, [r4, #0]
 800e564:	f8d8 3000 	ldr.w	r3, [r8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d038      	beq.n	800e5de <_malloc_r+0xf6>
 800e56c:	685a      	ldr	r2, [r3, #4]
 800e56e:	42a2      	cmp	r2, r4
 800e570:	d12b      	bne.n	800e5ca <_malloc_r+0xe2>
 800e572:	2200      	movs	r2, #0
 800e574:	605a      	str	r2, [r3, #4]
 800e576:	e00f      	b.n	800e598 <_malloc_r+0xb0>
 800e578:	6822      	ldr	r2, [r4, #0]
 800e57a:	1b52      	subs	r2, r2, r5
 800e57c:	d41f      	bmi.n	800e5be <_malloc_r+0xd6>
 800e57e:	2a0b      	cmp	r2, #11
 800e580:	d917      	bls.n	800e5b2 <_malloc_r+0xca>
 800e582:	1961      	adds	r1, r4, r5
 800e584:	42a3      	cmp	r3, r4
 800e586:	6025      	str	r5, [r4, #0]
 800e588:	bf18      	it	ne
 800e58a:	6059      	strne	r1, [r3, #4]
 800e58c:	6863      	ldr	r3, [r4, #4]
 800e58e:	bf08      	it	eq
 800e590:	f8c8 1000 	streq.w	r1, [r8]
 800e594:	5162      	str	r2, [r4, r5]
 800e596:	604b      	str	r3, [r1, #4]
 800e598:	4638      	mov	r0, r7
 800e59a:	f104 060b 	add.w	r6, r4, #11
 800e59e:	f000 f829 	bl	800e5f4 <__malloc_unlock>
 800e5a2:	f026 0607 	bic.w	r6, r6, #7
 800e5a6:	1d23      	adds	r3, r4, #4
 800e5a8:	1af2      	subs	r2, r6, r3
 800e5aa:	d0ae      	beq.n	800e50a <_malloc_r+0x22>
 800e5ac:	1b9b      	subs	r3, r3, r6
 800e5ae:	50a3      	str	r3, [r4, r2]
 800e5b0:	e7ab      	b.n	800e50a <_malloc_r+0x22>
 800e5b2:	42a3      	cmp	r3, r4
 800e5b4:	6862      	ldr	r2, [r4, #4]
 800e5b6:	d1dd      	bne.n	800e574 <_malloc_r+0x8c>
 800e5b8:	f8c8 2000 	str.w	r2, [r8]
 800e5bc:	e7ec      	b.n	800e598 <_malloc_r+0xb0>
 800e5be:	4623      	mov	r3, r4
 800e5c0:	6864      	ldr	r4, [r4, #4]
 800e5c2:	e7ac      	b.n	800e51e <_malloc_r+0x36>
 800e5c4:	4634      	mov	r4, r6
 800e5c6:	6876      	ldr	r6, [r6, #4]
 800e5c8:	e7b4      	b.n	800e534 <_malloc_r+0x4c>
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	e7cc      	b.n	800e568 <_malloc_r+0x80>
 800e5ce:	230c      	movs	r3, #12
 800e5d0:	603b      	str	r3, [r7, #0]
 800e5d2:	4638      	mov	r0, r7
 800e5d4:	f000 f80e 	bl	800e5f4 <__malloc_unlock>
 800e5d8:	e797      	b.n	800e50a <_malloc_r+0x22>
 800e5da:	6025      	str	r5, [r4, #0]
 800e5dc:	e7dc      	b.n	800e598 <_malloc_r+0xb0>
 800e5de:	605b      	str	r3, [r3, #4]
 800e5e0:	deff      	udf	#255	; 0xff
 800e5e2:	bf00      	nop
 800e5e4:	2000a6e4 	.word	0x2000a6e4

0800e5e8 <__malloc_lock>:
 800e5e8:	4801      	ldr	r0, [pc, #4]	; (800e5f0 <__malloc_lock+0x8>)
 800e5ea:	f7ff beda 	b.w	800e3a2 <__retarget_lock_acquire_recursive>
 800e5ee:	bf00      	nop
 800e5f0:	2000a6e0 	.word	0x2000a6e0

0800e5f4 <__malloc_unlock>:
 800e5f4:	4801      	ldr	r0, [pc, #4]	; (800e5fc <__malloc_unlock+0x8>)
 800e5f6:	f7ff bed5 	b.w	800e3a4 <__retarget_lock_release_recursive>
 800e5fa:	bf00      	nop
 800e5fc:	2000a6e0 	.word	0x2000a6e0

0800e600 <__sfputc_r>:
 800e600:	6893      	ldr	r3, [r2, #8]
 800e602:	3b01      	subs	r3, #1
 800e604:	2b00      	cmp	r3, #0
 800e606:	b410      	push	{r4}
 800e608:	6093      	str	r3, [r2, #8]
 800e60a:	da08      	bge.n	800e61e <__sfputc_r+0x1e>
 800e60c:	6994      	ldr	r4, [r2, #24]
 800e60e:	42a3      	cmp	r3, r4
 800e610:	db01      	blt.n	800e616 <__sfputc_r+0x16>
 800e612:	290a      	cmp	r1, #10
 800e614:	d103      	bne.n	800e61e <__sfputc_r+0x1e>
 800e616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e61a:	f000 bb85 	b.w	800ed28 <__swbuf_r>
 800e61e:	6813      	ldr	r3, [r2, #0]
 800e620:	1c58      	adds	r0, r3, #1
 800e622:	6010      	str	r0, [r2, #0]
 800e624:	7019      	strb	r1, [r3, #0]
 800e626:	4608      	mov	r0, r1
 800e628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e62c:	4770      	bx	lr

0800e62e <__sfputs_r>:
 800e62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e630:	4606      	mov	r6, r0
 800e632:	460f      	mov	r7, r1
 800e634:	4614      	mov	r4, r2
 800e636:	18d5      	adds	r5, r2, r3
 800e638:	42ac      	cmp	r4, r5
 800e63a:	d101      	bne.n	800e640 <__sfputs_r+0x12>
 800e63c:	2000      	movs	r0, #0
 800e63e:	e007      	b.n	800e650 <__sfputs_r+0x22>
 800e640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e644:	463a      	mov	r2, r7
 800e646:	4630      	mov	r0, r6
 800e648:	f7ff ffda 	bl	800e600 <__sfputc_r>
 800e64c:	1c43      	adds	r3, r0, #1
 800e64e:	d1f3      	bne.n	800e638 <__sfputs_r+0xa>
 800e650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e654 <_vfiprintf_r>:
 800e654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e658:	460d      	mov	r5, r1
 800e65a:	b09d      	sub	sp, #116	; 0x74
 800e65c:	4614      	mov	r4, r2
 800e65e:	4698      	mov	r8, r3
 800e660:	4606      	mov	r6, r0
 800e662:	b118      	cbz	r0, 800e66c <_vfiprintf_r+0x18>
 800e664:	6a03      	ldr	r3, [r0, #32]
 800e666:	b90b      	cbnz	r3, 800e66c <_vfiprintf_r+0x18>
 800e668:	f7ff fd8c 	bl	800e184 <__sinit>
 800e66c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e66e:	07d9      	lsls	r1, r3, #31
 800e670:	d405      	bmi.n	800e67e <_vfiprintf_r+0x2a>
 800e672:	89ab      	ldrh	r3, [r5, #12]
 800e674:	059a      	lsls	r2, r3, #22
 800e676:	d402      	bmi.n	800e67e <_vfiprintf_r+0x2a>
 800e678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e67a:	f7ff fe92 	bl	800e3a2 <__retarget_lock_acquire_recursive>
 800e67e:	89ab      	ldrh	r3, [r5, #12]
 800e680:	071b      	lsls	r3, r3, #28
 800e682:	d501      	bpl.n	800e688 <_vfiprintf_r+0x34>
 800e684:	692b      	ldr	r3, [r5, #16]
 800e686:	b99b      	cbnz	r3, 800e6b0 <_vfiprintf_r+0x5c>
 800e688:	4629      	mov	r1, r5
 800e68a:	4630      	mov	r0, r6
 800e68c:	f000 fb8a 	bl	800eda4 <__swsetup_r>
 800e690:	b170      	cbz	r0, 800e6b0 <_vfiprintf_r+0x5c>
 800e692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e694:	07dc      	lsls	r4, r3, #31
 800e696:	d504      	bpl.n	800e6a2 <_vfiprintf_r+0x4e>
 800e698:	f04f 30ff 	mov.w	r0, #4294967295
 800e69c:	b01d      	add	sp, #116	; 0x74
 800e69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a2:	89ab      	ldrh	r3, [r5, #12]
 800e6a4:	0598      	lsls	r0, r3, #22
 800e6a6:	d4f7      	bmi.n	800e698 <_vfiprintf_r+0x44>
 800e6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6aa:	f7ff fe7b 	bl	800e3a4 <__retarget_lock_release_recursive>
 800e6ae:	e7f3      	b.n	800e698 <_vfiprintf_r+0x44>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b4:	2320      	movs	r3, #32
 800e6b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6be:	2330      	movs	r3, #48	; 0x30
 800e6c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e874 <_vfiprintf_r+0x220>
 800e6c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6c8:	f04f 0901 	mov.w	r9, #1
 800e6cc:	4623      	mov	r3, r4
 800e6ce:	469a      	mov	sl, r3
 800e6d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d4:	b10a      	cbz	r2, 800e6da <_vfiprintf_r+0x86>
 800e6d6:	2a25      	cmp	r2, #37	; 0x25
 800e6d8:	d1f9      	bne.n	800e6ce <_vfiprintf_r+0x7a>
 800e6da:	ebba 0b04 	subs.w	fp, sl, r4
 800e6de:	d00b      	beq.n	800e6f8 <_vfiprintf_r+0xa4>
 800e6e0:	465b      	mov	r3, fp
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	4629      	mov	r1, r5
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f7ff ffa1 	bl	800e62e <__sfputs_r>
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	f000 80a9 	beq.w	800e844 <_vfiprintf_r+0x1f0>
 800e6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6f4:	445a      	add	r2, fp
 800e6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f000 80a1 	beq.w	800e844 <_vfiprintf_r+0x1f0>
 800e702:	2300      	movs	r3, #0
 800e704:	f04f 32ff 	mov.w	r2, #4294967295
 800e708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e70c:	f10a 0a01 	add.w	sl, sl, #1
 800e710:	9304      	str	r3, [sp, #16]
 800e712:	9307      	str	r3, [sp, #28]
 800e714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e718:	931a      	str	r3, [sp, #104]	; 0x68
 800e71a:	4654      	mov	r4, sl
 800e71c:	2205      	movs	r2, #5
 800e71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e722:	4854      	ldr	r0, [pc, #336]	; (800e874 <_vfiprintf_r+0x220>)
 800e724:	f7f1 fd64 	bl	80001f0 <memchr>
 800e728:	9a04      	ldr	r2, [sp, #16]
 800e72a:	b9d8      	cbnz	r0, 800e764 <_vfiprintf_r+0x110>
 800e72c:	06d1      	lsls	r1, r2, #27
 800e72e:	bf44      	itt	mi
 800e730:	2320      	movmi	r3, #32
 800e732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e736:	0713      	lsls	r3, r2, #28
 800e738:	bf44      	itt	mi
 800e73a:	232b      	movmi	r3, #43	; 0x2b
 800e73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e740:	f89a 3000 	ldrb.w	r3, [sl]
 800e744:	2b2a      	cmp	r3, #42	; 0x2a
 800e746:	d015      	beq.n	800e774 <_vfiprintf_r+0x120>
 800e748:	9a07      	ldr	r2, [sp, #28]
 800e74a:	4654      	mov	r4, sl
 800e74c:	2000      	movs	r0, #0
 800e74e:	f04f 0c0a 	mov.w	ip, #10
 800e752:	4621      	mov	r1, r4
 800e754:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e758:	3b30      	subs	r3, #48	; 0x30
 800e75a:	2b09      	cmp	r3, #9
 800e75c:	d94d      	bls.n	800e7fa <_vfiprintf_r+0x1a6>
 800e75e:	b1b0      	cbz	r0, 800e78e <_vfiprintf_r+0x13a>
 800e760:	9207      	str	r2, [sp, #28]
 800e762:	e014      	b.n	800e78e <_vfiprintf_r+0x13a>
 800e764:	eba0 0308 	sub.w	r3, r0, r8
 800e768:	fa09 f303 	lsl.w	r3, r9, r3
 800e76c:	4313      	orrs	r3, r2
 800e76e:	9304      	str	r3, [sp, #16]
 800e770:	46a2      	mov	sl, r4
 800e772:	e7d2      	b.n	800e71a <_vfiprintf_r+0xc6>
 800e774:	9b03      	ldr	r3, [sp, #12]
 800e776:	1d19      	adds	r1, r3, #4
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	9103      	str	r1, [sp, #12]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	bfbb      	ittet	lt
 800e780:	425b      	neglt	r3, r3
 800e782:	f042 0202 	orrlt.w	r2, r2, #2
 800e786:	9307      	strge	r3, [sp, #28]
 800e788:	9307      	strlt	r3, [sp, #28]
 800e78a:	bfb8      	it	lt
 800e78c:	9204      	strlt	r2, [sp, #16]
 800e78e:	7823      	ldrb	r3, [r4, #0]
 800e790:	2b2e      	cmp	r3, #46	; 0x2e
 800e792:	d10c      	bne.n	800e7ae <_vfiprintf_r+0x15a>
 800e794:	7863      	ldrb	r3, [r4, #1]
 800e796:	2b2a      	cmp	r3, #42	; 0x2a
 800e798:	d134      	bne.n	800e804 <_vfiprintf_r+0x1b0>
 800e79a:	9b03      	ldr	r3, [sp, #12]
 800e79c:	1d1a      	adds	r2, r3, #4
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	9203      	str	r2, [sp, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	bfb8      	it	lt
 800e7a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7aa:	3402      	adds	r4, #2
 800e7ac:	9305      	str	r3, [sp, #20]
 800e7ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e884 <_vfiprintf_r+0x230>
 800e7b2:	7821      	ldrb	r1, [r4, #0]
 800e7b4:	2203      	movs	r2, #3
 800e7b6:	4650      	mov	r0, sl
 800e7b8:	f7f1 fd1a 	bl	80001f0 <memchr>
 800e7bc:	b138      	cbz	r0, 800e7ce <_vfiprintf_r+0x17a>
 800e7be:	9b04      	ldr	r3, [sp, #16]
 800e7c0:	eba0 000a 	sub.w	r0, r0, sl
 800e7c4:	2240      	movs	r2, #64	; 0x40
 800e7c6:	4082      	lsls	r2, r0
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	3401      	adds	r4, #1
 800e7cc:	9304      	str	r3, [sp, #16]
 800e7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7d2:	4829      	ldr	r0, [pc, #164]	; (800e878 <_vfiprintf_r+0x224>)
 800e7d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7d8:	2206      	movs	r2, #6
 800e7da:	f7f1 fd09 	bl	80001f0 <memchr>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d03f      	beq.n	800e862 <_vfiprintf_r+0x20e>
 800e7e2:	4b26      	ldr	r3, [pc, #152]	; (800e87c <_vfiprintf_r+0x228>)
 800e7e4:	bb1b      	cbnz	r3, 800e82e <_vfiprintf_r+0x1da>
 800e7e6:	9b03      	ldr	r3, [sp, #12]
 800e7e8:	3307      	adds	r3, #7
 800e7ea:	f023 0307 	bic.w	r3, r3, #7
 800e7ee:	3308      	adds	r3, #8
 800e7f0:	9303      	str	r3, [sp, #12]
 800e7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f4:	443b      	add	r3, r7
 800e7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e7f8:	e768      	b.n	800e6cc <_vfiprintf_r+0x78>
 800e7fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7fe:	460c      	mov	r4, r1
 800e800:	2001      	movs	r0, #1
 800e802:	e7a6      	b.n	800e752 <_vfiprintf_r+0xfe>
 800e804:	2300      	movs	r3, #0
 800e806:	3401      	adds	r4, #1
 800e808:	9305      	str	r3, [sp, #20]
 800e80a:	4619      	mov	r1, r3
 800e80c:	f04f 0c0a 	mov.w	ip, #10
 800e810:	4620      	mov	r0, r4
 800e812:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e816:	3a30      	subs	r2, #48	; 0x30
 800e818:	2a09      	cmp	r2, #9
 800e81a:	d903      	bls.n	800e824 <_vfiprintf_r+0x1d0>
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d0c6      	beq.n	800e7ae <_vfiprintf_r+0x15a>
 800e820:	9105      	str	r1, [sp, #20]
 800e822:	e7c4      	b.n	800e7ae <_vfiprintf_r+0x15a>
 800e824:	fb0c 2101 	mla	r1, ip, r1, r2
 800e828:	4604      	mov	r4, r0
 800e82a:	2301      	movs	r3, #1
 800e82c:	e7f0      	b.n	800e810 <_vfiprintf_r+0x1bc>
 800e82e:	ab03      	add	r3, sp, #12
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	462a      	mov	r2, r5
 800e834:	4b12      	ldr	r3, [pc, #72]	; (800e880 <_vfiprintf_r+0x22c>)
 800e836:	a904      	add	r1, sp, #16
 800e838:	4630      	mov	r0, r6
 800e83a:	f3af 8000 	nop.w
 800e83e:	4607      	mov	r7, r0
 800e840:	1c78      	adds	r0, r7, #1
 800e842:	d1d6      	bne.n	800e7f2 <_vfiprintf_r+0x19e>
 800e844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e846:	07d9      	lsls	r1, r3, #31
 800e848:	d405      	bmi.n	800e856 <_vfiprintf_r+0x202>
 800e84a:	89ab      	ldrh	r3, [r5, #12]
 800e84c:	059a      	lsls	r2, r3, #22
 800e84e:	d402      	bmi.n	800e856 <_vfiprintf_r+0x202>
 800e850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e852:	f7ff fda7 	bl	800e3a4 <__retarget_lock_release_recursive>
 800e856:	89ab      	ldrh	r3, [r5, #12]
 800e858:	065b      	lsls	r3, r3, #25
 800e85a:	f53f af1d 	bmi.w	800e698 <_vfiprintf_r+0x44>
 800e85e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e860:	e71c      	b.n	800e69c <_vfiprintf_r+0x48>
 800e862:	ab03      	add	r3, sp, #12
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	462a      	mov	r2, r5
 800e868:	4b05      	ldr	r3, [pc, #20]	; (800e880 <_vfiprintf_r+0x22c>)
 800e86a:	a904      	add	r1, sp, #16
 800e86c:	4630      	mov	r0, r6
 800e86e:	f000 f879 	bl	800e964 <_printf_i>
 800e872:	e7e4      	b.n	800e83e <_vfiprintf_r+0x1ea>
 800e874:	08011c01 	.word	0x08011c01
 800e878:	08011c0b 	.word	0x08011c0b
 800e87c:	00000000 	.word	0x00000000
 800e880:	0800e62f 	.word	0x0800e62f
 800e884:	08011c07 	.word	0x08011c07

0800e888 <_printf_common>:
 800e888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e88c:	4616      	mov	r6, r2
 800e88e:	4699      	mov	r9, r3
 800e890:	688a      	ldr	r2, [r1, #8]
 800e892:	690b      	ldr	r3, [r1, #16]
 800e894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e898:	4293      	cmp	r3, r2
 800e89a:	bfb8      	it	lt
 800e89c:	4613      	movlt	r3, r2
 800e89e:	6033      	str	r3, [r6, #0]
 800e8a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	460c      	mov	r4, r1
 800e8a8:	b10a      	cbz	r2, 800e8ae <_printf_common+0x26>
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	6033      	str	r3, [r6, #0]
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	0699      	lsls	r1, r3, #26
 800e8b2:	bf42      	ittt	mi
 800e8b4:	6833      	ldrmi	r3, [r6, #0]
 800e8b6:	3302      	addmi	r3, #2
 800e8b8:	6033      	strmi	r3, [r6, #0]
 800e8ba:	6825      	ldr	r5, [r4, #0]
 800e8bc:	f015 0506 	ands.w	r5, r5, #6
 800e8c0:	d106      	bne.n	800e8d0 <_printf_common+0x48>
 800e8c2:	f104 0a19 	add.w	sl, r4, #25
 800e8c6:	68e3      	ldr	r3, [r4, #12]
 800e8c8:	6832      	ldr	r2, [r6, #0]
 800e8ca:	1a9b      	subs	r3, r3, r2
 800e8cc:	42ab      	cmp	r3, r5
 800e8ce:	dc26      	bgt.n	800e91e <_printf_common+0x96>
 800e8d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8d4:	1e13      	subs	r3, r2, #0
 800e8d6:	6822      	ldr	r2, [r4, #0]
 800e8d8:	bf18      	it	ne
 800e8da:	2301      	movne	r3, #1
 800e8dc:	0692      	lsls	r2, r2, #26
 800e8de:	d42b      	bmi.n	800e938 <_printf_common+0xb0>
 800e8e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	4638      	mov	r0, r7
 800e8e8:	47c0      	blx	r8
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	d01e      	beq.n	800e92c <_printf_common+0xa4>
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	6922      	ldr	r2, [r4, #16]
 800e8f2:	f003 0306 	and.w	r3, r3, #6
 800e8f6:	2b04      	cmp	r3, #4
 800e8f8:	bf02      	ittt	eq
 800e8fa:	68e5      	ldreq	r5, [r4, #12]
 800e8fc:	6833      	ldreq	r3, [r6, #0]
 800e8fe:	1aed      	subeq	r5, r5, r3
 800e900:	68a3      	ldr	r3, [r4, #8]
 800e902:	bf0c      	ite	eq
 800e904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e908:	2500      	movne	r5, #0
 800e90a:	4293      	cmp	r3, r2
 800e90c:	bfc4      	itt	gt
 800e90e:	1a9b      	subgt	r3, r3, r2
 800e910:	18ed      	addgt	r5, r5, r3
 800e912:	2600      	movs	r6, #0
 800e914:	341a      	adds	r4, #26
 800e916:	42b5      	cmp	r5, r6
 800e918:	d11a      	bne.n	800e950 <_printf_common+0xc8>
 800e91a:	2000      	movs	r0, #0
 800e91c:	e008      	b.n	800e930 <_printf_common+0xa8>
 800e91e:	2301      	movs	r3, #1
 800e920:	4652      	mov	r2, sl
 800e922:	4649      	mov	r1, r9
 800e924:	4638      	mov	r0, r7
 800e926:	47c0      	blx	r8
 800e928:	3001      	adds	r0, #1
 800e92a:	d103      	bne.n	800e934 <_printf_common+0xac>
 800e92c:	f04f 30ff 	mov.w	r0, #4294967295
 800e930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e934:	3501      	adds	r5, #1
 800e936:	e7c6      	b.n	800e8c6 <_printf_common+0x3e>
 800e938:	18e1      	adds	r1, r4, r3
 800e93a:	1c5a      	adds	r2, r3, #1
 800e93c:	2030      	movs	r0, #48	; 0x30
 800e93e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e942:	4422      	add	r2, r4
 800e944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e94c:	3302      	adds	r3, #2
 800e94e:	e7c7      	b.n	800e8e0 <_printf_common+0x58>
 800e950:	2301      	movs	r3, #1
 800e952:	4622      	mov	r2, r4
 800e954:	4649      	mov	r1, r9
 800e956:	4638      	mov	r0, r7
 800e958:	47c0      	blx	r8
 800e95a:	3001      	adds	r0, #1
 800e95c:	d0e6      	beq.n	800e92c <_printf_common+0xa4>
 800e95e:	3601      	adds	r6, #1
 800e960:	e7d9      	b.n	800e916 <_printf_common+0x8e>
	...

0800e964 <_printf_i>:
 800e964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e968:	7e0f      	ldrb	r7, [r1, #24]
 800e96a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e96c:	2f78      	cmp	r7, #120	; 0x78
 800e96e:	4691      	mov	r9, r2
 800e970:	4680      	mov	r8, r0
 800e972:	460c      	mov	r4, r1
 800e974:	469a      	mov	sl, r3
 800e976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e97a:	d807      	bhi.n	800e98c <_printf_i+0x28>
 800e97c:	2f62      	cmp	r7, #98	; 0x62
 800e97e:	d80a      	bhi.n	800e996 <_printf_i+0x32>
 800e980:	2f00      	cmp	r7, #0
 800e982:	f000 80d4 	beq.w	800eb2e <_printf_i+0x1ca>
 800e986:	2f58      	cmp	r7, #88	; 0x58
 800e988:	f000 80c0 	beq.w	800eb0c <_printf_i+0x1a8>
 800e98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e994:	e03a      	b.n	800ea0c <_printf_i+0xa8>
 800e996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e99a:	2b15      	cmp	r3, #21
 800e99c:	d8f6      	bhi.n	800e98c <_printf_i+0x28>
 800e99e:	a101      	add	r1, pc, #4	; (adr r1, 800e9a4 <_printf_i+0x40>)
 800e9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9a4:	0800e9fd 	.word	0x0800e9fd
 800e9a8:	0800ea11 	.word	0x0800ea11
 800e9ac:	0800e98d 	.word	0x0800e98d
 800e9b0:	0800e98d 	.word	0x0800e98d
 800e9b4:	0800e98d 	.word	0x0800e98d
 800e9b8:	0800e98d 	.word	0x0800e98d
 800e9bc:	0800ea11 	.word	0x0800ea11
 800e9c0:	0800e98d 	.word	0x0800e98d
 800e9c4:	0800e98d 	.word	0x0800e98d
 800e9c8:	0800e98d 	.word	0x0800e98d
 800e9cc:	0800e98d 	.word	0x0800e98d
 800e9d0:	0800eb15 	.word	0x0800eb15
 800e9d4:	0800ea3d 	.word	0x0800ea3d
 800e9d8:	0800eacf 	.word	0x0800eacf
 800e9dc:	0800e98d 	.word	0x0800e98d
 800e9e0:	0800e98d 	.word	0x0800e98d
 800e9e4:	0800eb37 	.word	0x0800eb37
 800e9e8:	0800e98d 	.word	0x0800e98d
 800e9ec:	0800ea3d 	.word	0x0800ea3d
 800e9f0:	0800e98d 	.word	0x0800e98d
 800e9f4:	0800e98d 	.word	0x0800e98d
 800e9f8:	0800ead7 	.word	0x0800ead7
 800e9fc:	682b      	ldr	r3, [r5, #0]
 800e9fe:	1d1a      	adds	r2, r3, #4
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	602a      	str	r2, [r5, #0]
 800ea04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e09f      	b.n	800eb50 <_printf_i+0x1ec>
 800ea10:	6820      	ldr	r0, [r4, #0]
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	0607      	lsls	r7, r0, #24
 800ea16:	f103 0104 	add.w	r1, r3, #4
 800ea1a:	6029      	str	r1, [r5, #0]
 800ea1c:	d501      	bpl.n	800ea22 <_printf_i+0xbe>
 800ea1e:	681e      	ldr	r6, [r3, #0]
 800ea20:	e003      	b.n	800ea2a <_printf_i+0xc6>
 800ea22:	0646      	lsls	r6, r0, #25
 800ea24:	d5fb      	bpl.n	800ea1e <_printf_i+0xba>
 800ea26:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ea2a:	2e00      	cmp	r6, #0
 800ea2c:	da03      	bge.n	800ea36 <_printf_i+0xd2>
 800ea2e:	232d      	movs	r3, #45	; 0x2d
 800ea30:	4276      	negs	r6, r6
 800ea32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea36:	485a      	ldr	r0, [pc, #360]	; (800eba0 <_printf_i+0x23c>)
 800ea38:	230a      	movs	r3, #10
 800ea3a:	e012      	b.n	800ea62 <_printf_i+0xfe>
 800ea3c:	682b      	ldr	r3, [r5, #0]
 800ea3e:	6820      	ldr	r0, [r4, #0]
 800ea40:	1d19      	adds	r1, r3, #4
 800ea42:	6029      	str	r1, [r5, #0]
 800ea44:	0605      	lsls	r5, r0, #24
 800ea46:	d501      	bpl.n	800ea4c <_printf_i+0xe8>
 800ea48:	681e      	ldr	r6, [r3, #0]
 800ea4a:	e002      	b.n	800ea52 <_printf_i+0xee>
 800ea4c:	0641      	lsls	r1, r0, #25
 800ea4e:	d5fb      	bpl.n	800ea48 <_printf_i+0xe4>
 800ea50:	881e      	ldrh	r6, [r3, #0]
 800ea52:	4853      	ldr	r0, [pc, #332]	; (800eba0 <_printf_i+0x23c>)
 800ea54:	2f6f      	cmp	r7, #111	; 0x6f
 800ea56:	bf0c      	ite	eq
 800ea58:	2308      	moveq	r3, #8
 800ea5a:	230a      	movne	r3, #10
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea62:	6865      	ldr	r5, [r4, #4]
 800ea64:	60a5      	str	r5, [r4, #8]
 800ea66:	2d00      	cmp	r5, #0
 800ea68:	bfa2      	ittt	ge
 800ea6a:	6821      	ldrge	r1, [r4, #0]
 800ea6c:	f021 0104 	bicge.w	r1, r1, #4
 800ea70:	6021      	strge	r1, [r4, #0]
 800ea72:	b90e      	cbnz	r6, 800ea78 <_printf_i+0x114>
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	d04b      	beq.n	800eb10 <_printf_i+0x1ac>
 800ea78:	4615      	mov	r5, r2
 800ea7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea7e:	fb03 6711 	mls	r7, r3, r1, r6
 800ea82:	5dc7      	ldrb	r7, [r0, r7]
 800ea84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea88:	4637      	mov	r7, r6
 800ea8a:	42bb      	cmp	r3, r7
 800ea8c:	460e      	mov	r6, r1
 800ea8e:	d9f4      	bls.n	800ea7a <_printf_i+0x116>
 800ea90:	2b08      	cmp	r3, #8
 800ea92:	d10b      	bne.n	800eaac <_printf_i+0x148>
 800ea94:	6823      	ldr	r3, [r4, #0]
 800ea96:	07de      	lsls	r6, r3, #31
 800ea98:	d508      	bpl.n	800eaac <_printf_i+0x148>
 800ea9a:	6923      	ldr	r3, [r4, #16]
 800ea9c:	6861      	ldr	r1, [r4, #4]
 800ea9e:	4299      	cmp	r1, r3
 800eaa0:	bfde      	ittt	le
 800eaa2:	2330      	movle	r3, #48	; 0x30
 800eaa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eaa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eaac:	1b52      	subs	r2, r2, r5
 800eaae:	6122      	str	r2, [r4, #16]
 800eab0:	f8cd a000 	str.w	sl, [sp]
 800eab4:	464b      	mov	r3, r9
 800eab6:	aa03      	add	r2, sp, #12
 800eab8:	4621      	mov	r1, r4
 800eaba:	4640      	mov	r0, r8
 800eabc:	f7ff fee4 	bl	800e888 <_printf_common>
 800eac0:	3001      	adds	r0, #1
 800eac2:	d14a      	bne.n	800eb5a <_printf_i+0x1f6>
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295
 800eac8:	b004      	add	sp, #16
 800eaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	f043 0320 	orr.w	r3, r3, #32
 800ead4:	6023      	str	r3, [r4, #0]
 800ead6:	4833      	ldr	r0, [pc, #204]	; (800eba4 <_printf_i+0x240>)
 800ead8:	2778      	movs	r7, #120	; 0x78
 800eada:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	6829      	ldr	r1, [r5, #0]
 800eae2:	061f      	lsls	r7, r3, #24
 800eae4:	f851 6b04 	ldr.w	r6, [r1], #4
 800eae8:	d402      	bmi.n	800eaf0 <_printf_i+0x18c>
 800eaea:	065f      	lsls	r7, r3, #25
 800eaec:	bf48      	it	mi
 800eaee:	b2b6      	uxthmi	r6, r6
 800eaf0:	07df      	lsls	r7, r3, #31
 800eaf2:	bf48      	it	mi
 800eaf4:	f043 0320 	orrmi.w	r3, r3, #32
 800eaf8:	6029      	str	r1, [r5, #0]
 800eafa:	bf48      	it	mi
 800eafc:	6023      	strmi	r3, [r4, #0]
 800eafe:	b91e      	cbnz	r6, 800eb08 <_printf_i+0x1a4>
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	f023 0320 	bic.w	r3, r3, #32
 800eb06:	6023      	str	r3, [r4, #0]
 800eb08:	2310      	movs	r3, #16
 800eb0a:	e7a7      	b.n	800ea5c <_printf_i+0xf8>
 800eb0c:	4824      	ldr	r0, [pc, #144]	; (800eba0 <_printf_i+0x23c>)
 800eb0e:	e7e4      	b.n	800eada <_printf_i+0x176>
 800eb10:	4615      	mov	r5, r2
 800eb12:	e7bd      	b.n	800ea90 <_printf_i+0x12c>
 800eb14:	682b      	ldr	r3, [r5, #0]
 800eb16:	6826      	ldr	r6, [r4, #0]
 800eb18:	6961      	ldr	r1, [r4, #20]
 800eb1a:	1d18      	adds	r0, r3, #4
 800eb1c:	6028      	str	r0, [r5, #0]
 800eb1e:	0635      	lsls	r5, r6, #24
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	d501      	bpl.n	800eb28 <_printf_i+0x1c4>
 800eb24:	6019      	str	r1, [r3, #0]
 800eb26:	e002      	b.n	800eb2e <_printf_i+0x1ca>
 800eb28:	0670      	lsls	r0, r6, #25
 800eb2a:	d5fb      	bpl.n	800eb24 <_printf_i+0x1c0>
 800eb2c:	8019      	strh	r1, [r3, #0]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	4615      	mov	r5, r2
 800eb34:	e7bc      	b.n	800eab0 <_printf_i+0x14c>
 800eb36:	682b      	ldr	r3, [r5, #0]
 800eb38:	1d1a      	adds	r2, r3, #4
 800eb3a:	602a      	str	r2, [r5, #0]
 800eb3c:	681d      	ldr	r5, [r3, #0]
 800eb3e:	6862      	ldr	r2, [r4, #4]
 800eb40:	2100      	movs	r1, #0
 800eb42:	4628      	mov	r0, r5
 800eb44:	f7f1 fb54 	bl	80001f0 <memchr>
 800eb48:	b108      	cbz	r0, 800eb4e <_printf_i+0x1ea>
 800eb4a:	1b40      	subs	r0, r0, r5
 800eb4c:	6060      	str	r0, [r4, #4]
 800eb4e:	6863      	ldr	r3, [r4, #4]
 800eb50:	6123      	str	r3, [r4, #16]
 800eb52:	2300      	movs	r3, #0
 800eb54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb58:	e7aa      	b.n	800eab0 <_printf_i+0x14c>
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4649      	mov	r1, r9
 800eb60:	4640      	mov	r0, r8
 800eb62:	47d0      	blx	sl
 800eb64:	3001      	adds	r0, #1
 800eb66:	d0ad      	beq.n	800eac4 <_printf_i+0x160>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	079b      	lsls	r3, r3, #30
 800eb6c:	d413      	bmi.n	800eb96 <_printf_i+0x232>
 800eb6e:	68e0      	ldr	r0, [r4, #12]
 800eb70:	9b03      	ldr	r3, [sp, #12]
 800eb72:	4298      	cmp	r0, r3
 800eb74:	bfb8      	it	lt
 800eb76:	4618      	movlt	r0, r3
 800eb78:	e7a6      	b.n	800eac8 <_printf_i+0x164>
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	4632      	mov	r2, r6
 800eb7e:	4649      	mov	r1, r9
 800eb80:	4640      	mov	r0, r8
 800eb82:	47d0      	blx	sl
 800eb84:	3001      	adds	r0, #1
 800eb86:	d09d      	beq.n	800eac4 <_printf_i+0x160>
 800eb88:	3501      	adds	r5, #1
 800eb8a:	68e3      	ldr	r3, [r4, #12]
 800eb8c:	9903      	ldr	r1, [sp, #12]
 800eb8e:	1a5b      	subs	r3, r3, r1
 800eb90:	42ab      	cmp	r3, r5
 800eb92:	dcf2      	bgt.n	800eb7a <_printf_i+0x216>
 800eb94:	e7eb      	b.n	800eb6e <_printf_i+0x20a>
 800eb96:	2500      	movs	r5, #0
 800eb98:	f104 0619 	add.w	r6, r4, #25
 800eb9c:	e7f5      	b.n	800eb8a <_printf_i+0x226>
 800eb9e:	bf00      	nop
 800eba0:	08011c12 	.word	0x08011c12
 800eba4:	08011c23 	.word	0x08011c23

0800eba8 <__sflush_r>:
 800eba8:	898a      	ldrh	r2, [r1, #12]
 800ebaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebae:	4605      	mov	r5, r0
 800ebb0:	0710      	lsls	r0, r2, #28
 800ebb2:	460c      	mov	r4, r1
 800ebb4:	d458      	bmi.n	800ec68 <__sflush_r+0xc0>
 800ebb6:	684b      	ldr	r3, [r1, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	dc05      	bgt.n	800ebc8 <__sflush_r+0x20>
 800ebbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	dc02      	bgt.n	800ebc8 <__sflush_r+0x20>
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebca:	2e00      	cmp	r6, #0
 800ebcc:	d0f9      	beq.n	800ebc2 <__sflush_r+0x1a>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebd4:	682f      	ldr	r7, [r5, #0]
 800ebd6:	6a21      	ldr	r1, [r4, #32]
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	d032      	beq.n	800ec42 <__sflush_r+0x9a>
 800ebdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebde:	89a3      	ldrh	r3, [r4, #12]
 800ebe0:	075a      	lsls	r2, r3, #29
 800ebe2:	d505      	bpl.n	800ebf0 <__sflush_r+0x48>
 800ebe4:	6863      	ldr	r3, [r4, #4]
 800ebe6:	1ac0      	subs	r0, r0, r3
 800ebe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebea:	b10b      	cbz	r3, 800ebf0 <__sflush_r+0x48>
 800ebec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebee:	1ac0      	subs	r0, r0, r3
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebf6:	6a21      	ldr	r1, [r4, #32]
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b0      	blx	r6
 800ebfc:	1c43      	adds	r3, r0, #1
 800ebfe:	89a3      	ldrh	r3, [r4, #12]
 800ec00:	d106      	bne.n	800ec10 <__sflush_r+0x68>
 800ec02:	6829      	ldr	r1, [r5, #0]
 800ec04:	291d      	cmp	r1, #29
 800ec06:	d82b      	bhi.n	800ec60 <__sflush_r+0xb8>
 800ec08:	4a29      	ldr	r2, [pc, #164]	; (800ecb0 <__sflush_r+0x108>)
 800ec0a:	410a      	asrs	r2, r1
 800ec0c:	07d6      	lsls	r6, r2, #31
 800ec0e:	d427      	bmi.n	800ec60 <__sflush_r+0xb8>
 800ec10:	2200      	movs	r2, #0
 800ec12:	6062      	str	r2, [r4, #4]
 800ec14:	04d9      	lsls	r1, r3, #19
 800ec16:	6922      	ldr	r2, [r4, #16]
 800ec18:	6022      	str	r2, [r4, #0]
 800ec1a:	d504      	bpl.n	800ec26 <__sflush_r+0x7e>
 800ec1c:	1c42      	adds	r2, r0, #1
 800ec1e:	d101      	bne.n	800ec24 <__sflush_r+0x7c>
 800ec20:	682b      	ldr	r3, [r5, #0]
 800ec22:	b903      	cbnz	r3, 800ec26 <__sflush_r+0x7e>
 800ec24:	6560      	str	r0, [r4, #84]	; 0x54
 800ec26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec28:	602f      	str	r7, [r5, #0]
 800ec2a:	2900      	cmp	r1, #0
 800ec2c:	d0c9      	beq.n	800ebc2 <__sflush_r+0x1a>
 800ec2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec32:	4299      	cmp	r1, r3
 800ec34:	d002      	beq.n	800ec3c <__sflush_r+0x94>
 800ec36:	4628      	mov	r0, r5
 800ec38:	f7ff fbe2 	bl	800e400 <_free_r>
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	6360      	str	r0, [r4, #52]	; 0x34
 800ec40:	e7c0      	b.n	800ebc4 <__sflush_r+0x1c>
 800ec42:	2301      	movs	r3, #1
 800ec44:	4628      	mov	r0, r5
 800ec46:	47b0      	blx	r6
 800ec48:	1c41      	adds	r1, r0, #1
 800ec4a:	d1c8      	bne.n	800ebde <__sflush_r+0x36>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d0c5      	beq.n	800ebde <__sflush_r+0x36>
 800ec52:	2b1d      	cmp	r3, #29
 800ec54:	d001      	beq.n	800ec5a <__sflush_r+0xb2>
 800ec56:	2b16      	cmp	r3, #22
 800ec58:	d101      	bne.n	800ec5e <__sflush_r+0xb6>
 800ec5a:	602f      	str	r7, [r5, #0]
 800ec5c:	e7b1      	b.n	800ebc2 <__sflush_r+0x1a>
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec64:	81a3      	strh	r3, [r4, #12]
 800ec66:	e7ad      	b.n	800ebc4 <__sflush_r+0x1c>
 800ec68:	690f      	ldr	r7, [r1, #16]
 800ec6a:	2f00      	cmp	r7, #0
 800ec6c:	d0a9      	beq.n	800ebc2 <__sflush_r+0x1a>
 800ec6e:	0793      	lsls	r3, r2, #30
 800ec70:	680e      	ldr	r6, [r1, #0]
 800ec72:	bf08      	it	eq
 800ec74:	694b      	ldreq	r3, [r1, #20]
 800ec76:	600f      	str	r7, [r1, #0]
 800ec78:	bf18      	it	ne
 800ec7a:	2300      	movne	r3, #0
 800ec7c:	eba6 0807 	sub.w	r8, r6, r7
 800ec80:	608b      	str	r3, [r1, #8]
 800ec82:	f1b8 0f00 	cmp.w	r8, #0
 800ec86:	dd9c      	ble.n	800ebc2 <__sflush_r+0x1a>
 800ec88:	6a21      	ldr	r1, [r4, #32]
 800ec8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec8c:	4643      	mov	r3, r8
 800ec8e:	463a      	mov	r2, r7
 800ec90:	4628      	mov	r0, r5
 800ec92:	47b0      	blx	r6
 800ec94:	2800      	cmp	r0, #0
 800ec96:	dc06      	bgt.n	800eca6 <__sflush_r+0xfe>
 800ec98:	89a3      	ldrh	r3, [r4, #12]
 800ec9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec9e:	81a3      	strh	r3, [r4, #12]
 800eca0:	f04f 30ff 	mov.w	r0, #4294967295
 800eca4:	e78e      	b.n	800ebc4 <__sflush_r+0x1c>
 800eca6:	4407      	add	r7, r0
 800eca8:	eba8 0800 	sub.w	r8, r8, r0
 800ecac:	e7e9      	b.n	800ec82 <__sflush_r+0xda>
 800ecae:	bf00      	nop
 800ecb0:	dfbffffe 	.word	0xdfbffffe

0800ecb4 <_fflush_r>:
 800ecb4:	b538      	push	{r3, r4, r5, lr}
 800ecb6:	690b      	ldr	r3, [r1, #16]
 800ecb8:	4605      	mov	r5, r0
 800ecba:	460c      	mov	r4, r1
 800ecbc:	b913      	cbnz	r3, 800ecc4 <_fflush_r+0x10>
 800ecbe:	2500      	movs	r5, #0
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	bd38      	pop	{r3, r4, r5, pc}
 800ecc4:	b118      	cbz	r0, 800ecce <_fflush_r+0x1a>
 800ecc6:	6a03      	ldr	r3, [r0, #32]
 800ecc8:	b90b      	cbnz	r3, 800ecce <_fflush_r+0x1a>
 800ecca:	f7ff fa5b 	bl	800e184 <__sinit>
 800ecce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d0f3      	beq.n	800ecbe <_fflush_r+0xa>
 800ecd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecd8:	07d0      	lsls	r0, r2, #31
 800ecda:	d404      	bmi.n	800ece6 <_fflush_r+0x32>
 800ecdc:	0599      	lsls	r1, r3, #22
 800ecde:	d402      	bmi.n	800ece6 <_fflush_r+0x32>
 800ece0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ece2:	f7ff fb5e 	bl	800e3a2 <__retarget_lock_acquire_recursive>
 800ece6:	4628      	mov	r0, r5
 800ece8:	4621      	mov	r1, r4
 800ecea:	f7ff ff5d 	bl	800eba8 <__sflush_r>
 800ecee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecf0:	07da      	lsls	r2, r3, #31
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	d4e4      	bmi.n	800ecc0 <_fflush_r+0xc>
 800ecf6:	89a3      	ldrh	r3, [r4, #12]
 800ecf8:	059b      	lsls	r3, r3, #22
 800ecfa:	d4e1      	bmi.n	800ecc0 <_fflush_r+0xc>
 800ecfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecfe:	f7ff fb51 	bl	800e3a4 <__retarget_lock_release_recursive>
 800ed02:	e7dd      	b.n	800ecc0 <_fflush_r+0xc>

0800ed04 <fiprintf>:
 800ed04:	b40e      	push	{r1, r2, r3}
 800ed06:	b503      	push	{r0, r1, lr}
 800ed08:	4601      	mov	r1, r0
 800ed0a:	ab03      	add	r3, sp, #12
 800ed0c:	4805      	ldr	r0, [pc, #20]	; (800ed24 <fiprintf+0x20>)
 800ed0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed12:	6800      	ldr	r0, [r0, #0]
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	f7ff fc9d 	bl	800e654 <_vfiprintf_r>
 800ed1a:	b002      	add	sp, #8
 800ed1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed20:	b003      	add	sp, #12
 800ed22:	4770      	bx	lr
 800ed24:	20000084 	.word	0x20000084

0800ed28 <__swbuf_r>:
 800ed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2a:	460e      	mov	r6, r1
 800ed2c:	4614      	mov	r4, r2
 800ed2e:	4605      	mov	r5, r0
 800ed30:	b118      	cbz	r0, 800ed3a <__swbuf_r+0x12>
 800ed32:	6a03      	ldr	r3, [r0, #32]
 800ed34:	b90b      	cbnz	r3, 800ed3a <__swbuf_r+0x12>
 800ed36:	f7ff fa25 	bl	800e184 <__sinit>
 800ed3a:	69a3      	ldr	r3, [r4, #24]
 800ed3c:	60a3      	str	r3, [r4, #8]
 800ed3e:	89a3      	ldrh	r3, [r4, #12]
 800ed40:	071a      	lsls	r2, r3, #28
 800ed42:	d525      	bpl.n	800ed90 <__swbuf_r+0x68>
 800ed44:	6923      	ldr	r3, [r4, #16]
 800ed46:	b31b      	cbz	r3, 800ed90 <__swbuf_r+0x68>
 800ed48:	6823      	ldr	r3, [r4, #0]
 800ed4a:	6922      	ldr	r2, [r4, #16]
 800ed4c:	1a98      	subs	r0, r3, r2
 800ed4e:	6963      	ldr	r3, [r4, #20]
 800ed50:	b2f6      	uxtb	r6, r6
 800ed52:	4283      	cmp	r3, r0
 800ed54:	4637      	mov	r7, r6
 800ed56:	dc04      	bgt.n	800ed62 <__swbuf_r+0x3a>
 800ed58:	4621      	mov	r1, r4
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f7ff ffaa 	bl	800ecb4 <_fflush_r>
 800ed60:	b9e0      	cbnz	r0, 800ed9c <__swbuf_r+0x74>
 800ed62:	68a3      	ldr	r3, [r4, #8]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	60a3      	str	r3, [r4, #8]
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	1c5a      	adds	r2, r3, #1
 800ed6c:	6022      	str	r2, [r4, #0]
 800ed6e:	701e      	strb	r6, [r3, #0]
 800ed70:	6962      	ldr	r2, [r4, #20]
 800ed72:	1c43      	adds	r3, r0, #1
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d004      	beq.n	800ed82 <__swbuf_r+0x5a>
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	07db      	lsls	r3, r3, #31
 800ed7c:	d506      	bpl.n	800ed8c <__swbuf_r+0x64>
 800ed7e:	2e0a      	cmp	r6, #10
 800ed80:	d104      	bne.n	800ed8c <__swbuf_r+0x64>
 800ed82:	4621      	mov	r1, r4
 800ed84:	4628      	mov	r0, r5
 800ed86:	f7ff ff95 	bl	800ecb4 <_fflush_r>
 800ed8a:	b938      	cbnz	r0, 800ed9c <__swbuf_r+0x74>
 800ed8c:	4638      	mov	r0, r7
 800ed8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed90:	4621      	mov	r1, r4
 800ed92:	4628      	mov	r0, r5
 800ed94:	f000 f806 	bl	800eda4 <__swsetup_r>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d0d5      	beq.n	800ed48 <__swbuf_r+0x20>
 800ed9c:	f04f 37ff 	mov.w	r7, #4294967295
 800eda0:	e7f4      	b.n	800ed8c <__swbuf_r+0x64>
	...

0800eda4 <__swsetup_r>:
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	4b2a      	ldr	r3, [pc, #168]	; (800ee50 <__swsetup_r+0xac>)
 800eda8:	4605      	mov	r5, r0
 800edaa:	6818      	ldr	r0, [r3, #0]
 800edac:	460c      	mov	r4, r1
 800edae:	b118      	cbz	r0, 800edb8 <__swsetup_r+0x14>
 800edb0:	6a03      	ldr	r3, [r0, #32]
 800edb2:	b90b      	cbnz	r3, 800edb8 <__swsetup_r+0x14>
 800edb4:	f7ff f9e6 	bl	800e184 <__sinit>
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edbe:	0718      	lsls	r0, r3, #28
 800edc0:	d422      	bmi.n	800ee08 <__swsetup_r+0x64>
 800edc2:	06d9      	lsls	r1, r3, #27
 800edc4:	d407      	bmi.n	800edd6 <__swsetup_r+0x32>
 800edc6:	2309      	movs	r3, #9
 800edc8:	602b      	str	r3, [r5, #0]
 800edca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edce:	81a3      	strh	r3, [r4, #12]
 800edd0:	f04f 30ff 	mov.w	r0, #4294967295
 800edd4:	e034      	b.n	800ee40 <__swsetup_r+0x9c>
 800edd6:	0758      	lsls	r0, r3, #29
 800edd8:	d512      	bpl.n	800ee00 <__swsetup_r+0x5c>
 800edda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eddc:	b141      	cbz	r1, 800edf0 <__swsetup_r+0x4c>
 800edde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ede2:	4299      	cmp	r1, r3
 800ede4:	d002      	beq.n	800edec <__swsetup_r+0x48>
 800ede6:	4628      	mov	r0, r5
 800ede8:	f7ff fb0a 	bl	800e400 <_free_r>
 800edec:	2300      	movs	r3, #0
 800edee:	6363      	str	r3, [r4, #52]	; 0x34
 800edf0:	89a3      	ldrh	r3, [r4, #12]
 800edf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800edf6:	81a3      	strh	r3, [r4, #12]
 800edf8:	2300      	movs	r3, #0
 800edfa:	6063      	str	r3, [r4, #4]
 800edfc:	6923      	ldr	r3, [r4, #16]
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	89a3      	ldrh	r3, [r4, #12]
 800ee02:	f043 0308 	orr.w	r3, r3, #8
 800ee06:	81a3      	strh	r3, [r4, #12]
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	b94b      	cbnz	r3, 800ee20 <__swsetup_r+0x7c>
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee16:	d003      	beq.n	800ee20 <__swsetup_r+0x7c>
 800ee18:	4621      	mov	r1, r4
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f000 f857 	bl	800eece <__smakebuf_r>
 800ee20:	89a0      	ldrh	r0, [r4, #12]
 800ee22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee26:	f010 0301 	ands.w	r3, r0, #1
 800ee2a:	d00a      	beq.n	800ee42 <__swsetup_r+0x9e>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	60a3      	str	r3, [r4, #8]
 800ee30:	6963      	ldr	r3, [r4, #20]
 800ee32:	425b      	negs	r3, r3
 800ee34:	61a3      	str	r3, [r4, #24]
 800ee36:	6923      	ldr	r3, [r4, #16]
 800ee38:	b943      	cbnz	r3, 800ee4c <__swsetup_r+0xa8>
 800ee3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee3e:	d1c4      	bne.n	800edca <__swsetup_r+0x26>
 800ee40:	bd38      	pop	{r3, r4, r5, pc}
 800ee42:	0781      	lsls	r1, r0, #30
 800ee44:	bf58      	it	pl
 800ee46:	6963      	ldrpl	r3, [r4, #20]
 800ee48:	60a3      	str	r3, [r4, #8]
 800ee4a:	e7f4      	b.n	800ee36 <__swsetup_r+0x92>
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	e7f7      	b.n	800ee40 <__swsetup_r+0x9c>
 800ee50:	20000084 	.word	0x20000084

0800ee54 <_sbrk_r>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4d06      	ldr	r5, [pc, #24]	; (800ee70 <_sbrk_r+0x1c>)
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	602b      	str	r3, [r5, #0]
 800ee60:	f7f1 fd88 	bl	8000974 <_sbrk>
 800ee64:	1c43      	adds	r3, r0, #1
 800ee66:	d102      	bne.n	800ee6e <_sbrk_r+0x1a>
 800ee68:	682b      	ldr	r3, [r5, #0]
 800ee6a:	b103      	cbz	r3, 800ee6e <_sbrk_r+0x1a>
 800ee6c:	6023      	str	r3, [r4, #0]
 800ee6e:	bd38      	pop	{r3, r4, r5, pc}
 800ee70:	2000a6dc 	.word	0x2000a6dc

0800ee74 <abort>:
 800ee74:	b508      	push	{r3, lr}
 800ee76:	2006      	movs	r0, #6
 800ee78:	f000 f88e 	bl	800ef98 <raise>
 800ee7c:	2001      	movs	r0, #1
 800ee7e:	f7f1 fd01 	bl	8000884 <_exit>

0800ee82 <__swhatbuf_r>:
 800ee82:	b570      	push	{r4, r5, r6, lr}
 800ee84:	460c      	mov	r4, r1
 800ee86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee8a:	2900      	cmp	r1, #0
 800ee8c:	b096      	sub	sp, #88	; 0x58
 800ee8e:	4615      	mov	r5, r2
 800ee90:	461e      	mov	r6, r3
 800ee92:	da0d      	bge.n	800eeb0 <__swhatbuf_r+0x2e>
 800ee94:	89a3      	ldrh	r3, [r4, #12]
 800ee96:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ee9a:	f04f 0100 	mov.w	r1, #0
 800ee9e:	bf0c      	ite	eq
 800eea0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eea4:	2340      	movne	r3, #64	; 0x40
 800eea6:	2000      	movs	r0, #0
 800eea8:	6031      	str	r1, [r6, #0]
 800eeaa:	602b      	str	r3, [r5, #0]
 800eeac:	b016      	add	sp, #88	; 0x58
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	466a      	mov	r2, sp
 800eeb2:	f000 f879 	bl	800efa8 <_fstat_r>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	dbec      	blt.n	800ee94 <__swhatbuf_r+0x12>
 800eeba:	9901      	ldr	r1, [sp, #4]
 800eebc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eec0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eec4:	4259      	negs	r1, r3
 800eec6:	4159      	adcs	r1, r3
 800eec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eecc:	e7eb      	b.n	800eea6 <__swhatbuf_r+0x24>

0800eece <__smakebuf_r>:
 800eece:	898b      	ldrh	r3, [r1, #12]
 800eed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eed2:	079d      	lsls	r5, r3, #30
 800eed4:	4606      	mov	r6, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	d507      	bpl.n	800eeea <__smakebuf_r+0x1c>
 800eeda:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eede:	6023      	str	r3, [r4, #0]
 800eee0:	6123      	str	r3, [r4, #16]
 800eee2:	2301      	movs	r3, #1
 800eee4:	6163      	str	r3, [r4, #20]
 800eee6:	b002      	add	sp, #8
 800eee8:	bd70      	pop	{r4, r5, r6, pc}
 800eeea:	ab01      	add	r3, sp, #4
 800eeec:	466a      	mov	r2, sp
 800eeee:	f7ff ffc8 	bl	800ee82 <__swhatbuf_r>
 800eef2:	9900      	ldr	r1, [sp, #0]
 800eef4:	4605      	mov	r5, r0
 800eef6:	4630      	mov	r0, r6
 800eef8:	f7ff faf6 	bl	800e4e8 <_malloc_r>
 800eefc:	b948      	cbnz	r0, 800ef12 <__smakebuf_r+0x44>
 800eefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef02:	059a      	lsls	r2, r3, #22
 800ef04:	d4ef      	bmi.n	800eee6 <__smakebuf_r+0x18>
 800ef06:	f023 0303 	bic.w	r3, r3, #3
 800ef0a:	f043 0302 	orr.w	r3, r3, #2
 800ef0e:	81a3      	strh	r3, [r4, #12]
 800ef10:	e7e3      	b.n	800eeda <__smakebuf_r+0xc>
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	6020      	str	r0, [r4, #0]
 800ef16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	9b00      	ldr	r3, [sp, #0]
 800ef1e:	6163      	str	r3, [r4, #20]
 800ef20:	9b01      	ldr	r3, [sp, #4]
 800ef22:	6120      	str	r0, [r4, #16]
 800ef24:	b15b      	cbz	r3, 800ef3e <__smakebuf_r+0x70>
 800ef26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f000 f84e 	bl	800efcc <_isatty_r>
 800ef30:	b128      	cbz	r0, 800ef3e <__smakebuf_r+0x70>
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	f023 0303 	bic.w	r3, r3, #3
 800ef38:	f043 0301 	orr.w	r3, r3, #1
 800ef3c:	81a3      	strh	r3, [r4, #12]
 800ef3e:	89a3      	ldrh	r3, [r4, #12]
 800ef40:	431d      	orrs	r5, r3
 800ef42:	81a5      	strh	r5, [r4, #12]
 800ef44:	e7cf      	b.n	800eee6 <__smakebuf_r+0x18>

0800ef46 <_raise_r>:
 800ef46:	291f      	cmp	r1, #31
 800ef48:	b538      	push	{r3, r4, r5, lr}
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	460d      	mov	r5, r1
 800ef4e:	d904      	bls.n	800ef5a <_raise_r+0x14>
 800ef50:	2316      	movs	r3, #22
 800ef52:	6003      	str	r3, [r0, #0]
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	bd38      	pop	{r3, r4, r5, pc}
 800ef5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ef5c:	b112      	cbz	r2, 800ef64 <_raise_r+0x1e>
 800ef5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef62:	b94b      	cbnz	r3, 800ef78 <_raise_r+0x32>
 800ef64:	4620      	mov	r0, r4
 800ef66:	f000 f853 	bl	800f010 <_getpid_r>
 800ef6a:	462a      	mov	r2, r5
 800ef6c:	4601      	mov	r1, r0
 800ef6e:	4620      	mov	r0, r4
 800ef70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef74:	f000 b83a 	b.w	800efec <_kill_r>
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d00a      	beq.n	800ef92 <_raise_r+0x4c>
 800ef7c:	1c59      	adds	r1, r3, #1
 800ef7e:	d103      	bne.n	800ef88 <_raise_r+0x42>
 800ef80:	2316      	movs	r3, #22
 800ef82:	6003      	str	r3, [r0, #0]
 800ef84:	2001      	movs	r0, #1
 800ef86:	e7e7      	b.n	800ef58 <_raise_r+0x12>
 800ef88:	2400      	movs	r4, #0
 800ef8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef8e:	4628      	mov	r0, r5
 800ef90:	4798      	blx	r3
 800ef92:	2000      	movs	r0, #0
 800ef94:	e7e0      	b.n	800ef58 <_raise_r+0x12>
	...

0800ef98 <raise>:
 800ef98:	4b02      	ldr	r3, [pc, #8]	; (800efa4 <raise+0xc>)
 800ef9a:	4601      	mov	r1, r0
 800ef9c:	6818      	ldr	r0, [r3, #0]
 800ef9e:	f7ff bfd2 	b.w	800ef46 <_raise_r>
 800efa2:	bf00      	nop
 800efa4:	20000084 	.word	0x20000084

0800efa8 <_fstat_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d07      	ldr	r5, [pc, #28]	; (800efc8 <_fstat_r+0x20>)
 800efac:	2300      	movs	r3, #0
 800efae:	4604      	mov	r4, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	4611      	mov	r1, r2
 800efb4:	602b      	str	r3, [r5, #0]
 800efb6:	f7f1 fcb4 	bl	8000922 <_fstat>
 800efba:	1c43      	adds	r3, r0, #1
 800efbc:	d102      	bne.n	800efc4 <_fstat_r+0x1c>
 800efbe:	682b      	ldr	r3, [r5, #0]
 800efc0:	b103      	cbz	r3, 800efc4 <_fstat_r+0x1c>
 800efc2:	6023      	str	r3, [r4, #0]
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
 800efc6:	bf00      	nop
 800efc8:	2000a6dc 	.word	0x2000a6dc

0800efcc <_isatty_r>:
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4d06      	ldr	r5, [pc, #24]	; (800efe8 <_isatty_r+0x1c>)
 800efd0:	2300      	movs	r3, #0
 800efd2:	4604      	mov	r4, r0
 800efd4:	4608      	mov	r0, r1
 800efd6:	602b      	str	r3, [r5, #0]
 800efd8:	f7f1 fcb3 	bl	8000942 <_isatty>
 800efdc:	1c43      	adds	r3, r0, #1
 800efde:	d102      	bne.n	800efe6 <_isatty_r+0x1a>
 800efe0:	682b      	ldr	r3, [r5, #0]
 800efe2:	b103      	cbz	r3, 800efe6 <_isatty_r+0x1a>
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	2000a6dc 	.word	0x2000a6dc

0800efec <_kill_r>:
 800efec:	b538      	push	{r3, r4, r5, lr}
 800efee:	4d07      	ldr	r5, [pc, #28]	; (800f00c <_kill_r+0x20>)
 800eff0:	2300      	movs	r3, #0
 800eff2:	4604      	mov	r4, r0
 800eff4:	4608      	mov	r0, r1
 800eff6:	4611      	mov	r1, r2
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	f7f1 fc31 	bl	8000860 <_kill>
 800effe:	1c43      	adds	r3, r0, #1
 800f000:	d102      	bne.n	800f008 <_kill_r+0x1c>
 800f002:	682b      	ldr	r3, [r5, #0]
 800f004:	b103      	cbz	r3, 800f008 <_kill_r+0x1c>
 800f006:	6023      	str	r3, [r4, #0]
 800f008:	bd38      	pop	{r3, r4, r5, pc}
 800f00a:	bf00      	nop
 800f00c:	2000a6dc 	.word	0x2000a6dc

0800f010 <_getpid_r>:
 800f010:	f7f1 bc1e 	b.w	8000850 <_getpid>

0800f014 <_init>:
 800f014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f016:	bf00      	nop
 800f018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f01a:	bc08      	pop	{r3}
 800f01c:	469e      	mov	lr, r3
 800f01e:	4770      	bx	lr

0800f020 <_fini>:
 800f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f022:	bf00      	nop
 800f024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f026:	bc08      	pop	{r3}
 800f028:	469e      	mov	lr, r3
 800f02a:	4770      	bx	lr
